// autogenerated. Please look at /tests/check-docs.rs

#[allow(clippy::too_many_lines)]
#[rustfmt::skip]
fn explain(lint: &str) {
    println!("{}", match lint {
        "absurd_extreme_comparisons" => "### What it does\nChecks for comparisons where one side of the relation is\neither the minimum or maximum value for its type and warns if it involves a\ncase that is always true or always false. Only integer and boolean types are\nchecked.\n### Why is this bad?\nAn expression like `min <= x` may misleadingly imply\nthat it is possible for `x` to be less than the minimum. Expressions like\n`max < x` are probably mistakes.\n### Known problems\nFor `usize` the size of the current compile target will\nbe assumed (e.g., 64 bits on 64 bit systems). This means code that uses such\na comparison to detect target pointer width will trigger this lint. One can\nuse `mem::sizeof` and compare its value or conditional compilation\nattributes\nlike `#[cfg(target_pointer_width = \"64\")] ..` instead.\n### Example\n\nlet vec: Vec<isize> = Vec::new();\nif vec.len() <= 0 {}\nif 100 > i32::MAX {}\n",
        "allow_attributes_without_reason" => "### What it does\nChecks for attributes that allow lints without a reason.\n(This requires the `lint_reasons` feature)\n### Why is this bad?\nAllowing a lint should always have a reason. This reason should be documented to\nensure that others understand the reasoning\n### Example\n\n#![feature(lint_reasons)]\n#![allow(clippy::some_lint)]\n\nUse instead:\n\n#![feature(lint_reasons)]\n#![allow(clippy::some_lint, reason = \"False positive rust-lang/rust-clippy#1002020\")]\n",
        "almost_complete_letter_range" => "### What it does\nChecks for ranges which almost include the entire range of letters from 'a' to 'z', but\ndon't because they're a half open range.\n### Why is this bad?\nThis (`'a'..'z'`) is almost certainly a typo meant to include all letters.\n### Example\n\nlet _ = 'a'..'z';\n\nUse instead:\n\nlet _ = 'a'..='z';\n",
        "almost_swapped" => "### What it does\nChecks for `foo = bar; bar = foo` sequences.\n### Why is this bad?\nThis looks like a failed attempt to swap.\n### Example\n\na = b;\nb = a;\n\nIf swapping is intended, use `swap()` instead:\n\nstd::mem::swap(&mut a, &mut b);\n",
        "approx_constant" => "### What it does\nChecks for floating point literals that approximate\nconstants which are defined in\n[`std::f32::consts`](https://doc.rust-lang.org/stable/std/f32/consts/#constants)\nor\n[`std::f64::consts`](https://doc.rust-lang.org/stable/std/f64/consts/#constants),\nrespectively, suggesting to use the predefined constant.\n### Why is this bad?\nUsually, the definition in the standard library is more\nprecise than what people come up with. If you find that your definition is\nactually more precise, please [file a Rust\nissue](https://github.com/rust-lang/rust/issues).\n### Example\n\nlet x = 3.14;\nlet y = 1_f64 / x;\n\nUse instead:\n\nlet x = std::f32::consts::PI;\nlet y = std::f64::consts::FRAC_1_PI;\n",
        "as_conversions" => "### What it does\nChecks for usage of `as` conversions.\nNote that this lint is specialized in linting *every single* use of `as`\nregardless of whether good alternatives exist or not.\nIf you want more precise lints for `as`, please consider using these separate lints:\n`unnecessary_cast`, `cast_lossless/possible_truncation/possible_wrap/precision_loss/sign_loss`,\n`fn_to_numeric_cast(_with_truncation)`, `char_lit_as_u8`, `ref_to_mut` and `ptr_as_ptr`.\nThere is a good explanation the reason why this lint should work in this way and how it is useful\n[in this issue](https://github.com/rust-lang/rust-clippy/issues/5122).\n### Why is this bad?\n`as` conversions will perform many kinds of\nconversions, including silently lossy conversions and dangerous coercions.\nThere are cases when it makes sense to use `as`, so the lint is\nAllow by default.\n### Example\n\nlet a: u32;\n...\nf(a as u16);\n\nUse instead:\n\nf(a.try_into()?);\n// or\nf(a.try_into().expect(\"Unexpected u16 overflow in f\"));\n",
        "as_underscore" => "### What it does\nCheck for the usage of `as _` conversion using inferred type.\n### Why is this bad?\nThe conversion might include lossy conversion and dangerous cast that might go\nundetected du to the type being inferred.\nThe lint is allowed by default as using `_` is less wordy than always specifying the type.\n### Example\n\nfn foo(n: usize) {}\nlet n: u16 = 256;\nfoo(n as _);\n\nUse instead:\n\nfn foo(n: usize) {}\nlet n: u16 = 256;\nfoo(n as usize);\n",
        "assertions_on_constants" => "### What it does\nChecks for `assert!(true)` and `assert!(false)` calls.\n### Why is this bad?\nWill be optimized out by the compiler or should probably be replaced by a\n`panic!()` or `unreachable!()`\n### Known problems\nNone\n### Example\n\nassert!(false)\nassert!(true)\nconst B: bool = false;\nassert!(B)\n",
        "assign_op_pattern" => "### What it does\nChecks for `a = a op b` or `a = b commutative_op a`\npatterns.\n### Why is this bad?\nThese can be written as the shorter `a op= b`.\n### Known problems\nWhile forbidden by the spec, `OpAssign` traits may have\nimplementations that differ from the regular `Op` impl.\n### Example\n\nlet mut a = 5;\nlet b = 0;\n// ...\na = a + b;\n\nUse instead:\n\nlet mut a = 5;\nlet b = 0;\n// ...\na += b;\n",
        "async_yields_async" => "### What it does\nChecks for async blocks that yield values of types\nthat can themselves be awaited.\n### Why is this bad?\nAn await is likely missing.\n### Example\n\nasync fn foo() {}\nfn bar() {\n  let x = async {\n    foo()\n  };\n}\n\nUse instead:\n\nasync fn foo() {}\nfn bar() {\n  let x = async {\n    foo().await\n  };\n}\n",
        "await_holding_invalid_type" => "### What it does\nAllows users to configure types which should not be held across `await`\nsuspension points.\n### Why is this bad?\nThere are some types which are perfectly \"safe\" to be used concurrently\nfrom a memory access perspective but will cause bugs at runtime if they\nare held in such a way.\n### Known problems\n### Example\n\nawait-holding-invalid-types = [\n  # You can specify a type name\n  \"CustomLockType\",\n  # You can (optionally) specify a reason\n  { path = \"OtherCustomLockType\", reason = \"Relies on a thread local\" }\n]\n\n\nstruct CustomLockType;\nstruct OtherCustomLockType;\nasync fn foo() {\n  let _x = CustomLockType;\n  let _y = OtherCustomLockType;\n  baz().await; // Lint violation\n}\n",
        "await_holding_lock" => "### What it does\nChecks for calls to await while holding a non-async-aware MutexGuard.\n### Why is this bad?\nThe Mutex types found in std::sync and parking_lot\nare not designed to operate in an async context across await points.\nThere are two potential solutions. One is to use an async-aware Mutex\ntype. Many asynchronous foundation crates provide such a Mutex type. The\nother solution is to ensure the mutex is unlocked before calling await,\neither by introducing a scope or an explicit call to Drop::drop.\n### Known problems\nWill report false positive for explicitly dropped guards\n([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)). A workaround for this is\nto wrap the `.lock()` call in a block instead of explicitly dropping the guard.\n### Example\n\nasync fn foo(x: &Mutex<u32>) {\n  let mut guard = x.lock().unwrap();\n  *guard += 1;\n  baz().await;\n}\nasync fn bar(x: &Mutex<u32>) {\n  let mut guard = x.lock().unwrap();\n  *guard += 1;\n  drop(guard); // explicit drop\n  baz().await;\n}\n\nUse instead:\n\nasync fn foo(x: &Mutex<u32>) {\n  {\n    let mut guard = x.lock().unwrap();\n    *guard += 1;\n  }\n  baz().await;\n}\nasync fn bar(x: &Mutex<u32>) {\n  {\n    let mut guard = x.lock().unwrap();\n    *guard += 1;\n  } // guard dropped here at end of scope\n  baz().await;\n}\n",
        "await_holding_refcell_ref" => "### What it does\nChecks for calls to await while holding a `RefCell` `Ref` or `RefMut`.\n### Why is this bad?\n`RefCell` refs only check for exclusive mutable access\nat runtime. Holding onto a `RefCell` ref across an `await` suspension point\nrisks panics from a mutable ref shared while other refs are outstanding.\n### Known problems\nWill report false positive for explicitly dropped refs\n([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)). A workaround for this is\nto wrap the `.borrow[_mut]()` call in a block instead of explicitly dropping the ref.\n### Example\n\nasync fn foo(x: &RefCell<u32>) {\n  let mut y = x.borrow_mut();\n  *y += 1;\n  baz().await;\n}\nasync fn bar(x: &RefCell<u32>) {\n  let mut y = x.borrow_mut();\n  *y += 1;\n  drop(y); // explicit drop\n  baz().await;\n}\n\nUse instead:\n\nasync fn foo(x: &RefCell<u32>) {\n  {\n     let mut y = x.borrow_mut();\n     *y += 1;\n  }\n  baz().await;\n}\nasync fn bar(x: &RefCell<u32>) {\n  {\n    let mut y = x.borrow_mut();\n    *y += 1;\n  } // y dropped here at end of scope\n  baz().await;\n}\n",
        "bad_bit_mask" => "### What it does\nChecks for incompatible bit masks in comparisons.\nThe formula for detecting if an expression of the type `_ <bit_op> m\n<cmp_op> c` (where `<bit_op>` is one of {`&`, `|`} and `<cmp_op>` is one of\n{`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following\ntable:\n|Comparison  |Bit Op|Example      |is always|Formula               |\n|------------|------|-------------|---------|----------------------|\n|`==` or `!=`| `&`  |`x & 2 == 3` |`false`  |`c & m != c`          |\n|`<`  or `>=`| `&`  |`x & 2 < 3`  |`true`   |`m < c`               |\n|`>`  or `<=`| `&`  |`x & 1 > 1`  |`false`  |`m <= c`              |\n|`==` or `!=`| `\\|` |`x \\| 1 == 0`|`false`  |`c \\| m != c`         |\n|`<`  or `>=`| `\\|` |`x \\| 1 < 1` |`false`  |`m >= c`              |\n|`<=` or `>` | `\\|` |`x \\| 1 > 0` |`true`   |`m > c`               |\n### Why is this bad?\nIf the bits that the comparison cares about are always\nset to zero or one by the bit mask, the comparison is constant `true` or\n`false` (depending on mask, compared value, and operators).\nSo the code is actively misleading, and the only reason someone would write\nthis intentionally is to win an underhanded Rust contest or create a\ntest-case for this lint.\n### Example\n\nif (x & 1 == 2) { }\n",
        "bind_instead_of_map" => "### What it does\nChecks for usage of `_.and_then(|x| Some(y))`, `_.and_then(|x| Ok(y))` or\n`_.or_else(|x| Err(y))`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.map(|x| y)` or `_.map_err(|x| y)`.\n### Example\n\nlet _ = opt().and_then(|s| Some(s.len()));\nlet _ = res().and_then(|s| if s.len() == 42 { Ok(10) } else { Ok(20) });\nlet _ = res().or_else(|s| if s.len() == 42 { Err(10) } else { Err(20) });\n\nThe correct use would be:\n\nlet _ = opt().map(|s| s.len());\nlet _ = res().map(|s| if s.len() == 42 { 10 } else { 20 });\nlet _ = res().map_err(|s| if s.len() == 42 { 10 } else { 20 });\n",
        "blacklisted_name" => "### What it does\nChecks for usage of blacklisted names for variables, such\nas `foo`.\n### Why is this bad?\nThese names are usually placeholder names and should be\navoided.\n### Example\n\nlet foo = 3.14;\n",
        "blanket_clippy_restriction_lints" => "### What it does\nChecks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n### Why is this bad?\nRestriction lints sometimes are in contrast with other lints or even go against idiomatic rust.\nThese lints should only be enabled on a lint-by-lint basis and with careful consideration.\n### Example\n\n#![deny(clippy::restriction)]\n\nUse instead:\n\n#![deny(clippy::as_conversions)]\n",
        "blocks_in_if_conditions" => "### What it does\nChecks for `if` conditions that use blocks containing an\nexpression, statements or conditions that use closures with blocks.\n### Why is this bad?\nStyle, using blocks in the condition makes it hard to read.\n### Examples\n\nif { true } { /* ... */ }\nif { let x = somefunc(); x } { /* ... */ }\n\nUse instead:\n\nif true { /* ... */ }\nlet res = { let x = somefunc(); x };\nif res { /* ... */ }\n",
        "bool_assert_comparison" => "### What it does\nThis lint warns about boolean comparisons in assert-like macros.\n### Why is this bad?\nIt is shorter to use the equivalent.\n### Example\n\n// Bad\nassert_eq!(\"a\".is_empty(), false);\nassert_ne!(\"a\".is_empty(), true);\n// Good\nassert!(!\"a\".is_empty());\n",
        "bool_comparison" => "### What it does\nChecks for expressions of the form `x == true`,\n`x != true` and order comparisons such as `x < true` (or vice versa) and\nsuggest using the variable directly.\n### Why is this bad?\nUnnecessary code.\n### Example\n\nif x == true {}\nif y == false {}\n\nuse `x` directly:\n\nif x {}\nif !y {}\n",
        "borrow_as_ptr" => "### What it does\nChecks for the usage of `&expr as *const T` or\n`&mut expr as *mut T`, and suggest using `ptr::addr_of` or\n`ptr::addr_of_mut` instead.\n### Why is this bad?\nThis would improve readability and avoid creating a reference\nthat points to an uninitialized value or unaligned place.\nRead the `ptr::addr_of` docs for more information.\n### Example\n\nlet val = 1;\nlet p = &val as *const i32;\nlet mut val_mut = 1;\nlet p_mut = &mut val_mut as *mut i32;\n\nUse instead:\n\nlet val = 1;\nlet p = std::ptr::addr_of!(val);\nlet mut val_mut = 1;\nlet p_mut = std::ptr::addr_of_mut!(val_mut);\n",
        "borrow_deref_ref" => "### What it does\nChecks for `&*(&T)`.\n### Why is this bad?\nDereferencing and then borrowing a reference value has no effect in most cases.\n### Known problems\nfalse negative on such code:\n\nlet x = &12;\nlet addr_x = &x as *const _ as usize;\nlet addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggerd.\n                                        // But if we fix it, assert will fail.\nassert_ne!(addr_x, addr_y);\n\n### Example\n\nlet s = &String::new();\n// Bad\nlet a: &String = &* s;\nfoo(&*s);\n// Good\nlet a: &String = s;\nfoo(&**s);\nfn foo(_: &str){ }\n",
        "borrow_interior_mutable_const" => "### What it does\nChecks if `const` items which is interior mutable (e.g.,\ncontains a `Cell`, `Mutex`, `AtomicXxxx`, etc.) has been borrowed directly.\n### Why is this bad?\nConsts are copied everywhere they are referenced, i.e.,\nevery time you refer to the const a fresh instance of the `Cell` or `Mutex`\nor `AtomicXxxx` will be created, which defeats the whole purpose of using\nthese types in the first place.\nThe `const` value should be stored inside a `static` item.\n### Known problems\nWhen an enum has variants with interior mutability, use of its non\ninterior mutable variants can generate false positives. See issue\n[#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\nTypes that have underlying or potential interior mutability trigger the lint whether\nthe interior mutable field is used or not. See issues\n[#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n[#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n### Example\n\nuse std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\nconst CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n// Bad.\nCONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\nassert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n// Good.\nstatic STATIC_ATOM: AtomicUsize = CONST_ATOM;\nSTATIC_ATOM.store(9, SeqCst);\nassert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n",
        "borrowed_box" => "### What it does\nChecks for use of `&Box<T>` anywhere in the code.\nCheck the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n### Why is this bad?\nA `&Box<T>` parameter requires the function caller to box `T` first before passing it to a function.\nUsing `&T` defines a concrete type for the parameter and generalizes the function, this would also\nauto-deref to `&T` at the function call site if passed a `&Box<T>`.\n### Example\n\nfn foo(bar: &Box<T>) { ... }\n\nBetter:\n\nfn foo(bar: &T) { ... }\n",
        "box_collection" => "### What it does\nChecks for use of `Box<T>` where T is a collection such as Vec anywhere in the code.\nCheck the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n### Why is this bad?\nCollections already keeps their contents in a separate area on\nthe heap. So if you `Box` them, you just add another level of indirection\nwithout any benefit whatsoever.\n### Example\n\nstruct X {\n    values: Box<Vec<Foo>>,\n}\n\nBetter:\n\nstruct X {\n    values: Vec<Foo>,\n}\n",
        "boxed_local" => "### What it does\nChecks for usage of `Box<T>` where an unboxed `T` would\nwork fine.\n### Why is this bad?\nThis is an unnecessary allocation, and bad for\nperformance. It is only necessary to allocate if you wish to move the box\ninto something.\n### Example\n\nlet x = Box::new(1);\nfoo(*x);\nprintln!(\"{}\", *x);\n\nUse instead:\n\nlet x = 1;\nfoo(x);\nprintln!(\"{}\", x);\n",
        "branches_sharing_code" => "### What it does\nChecks if the `if` and `else` block contain shared code that can be\nmoved out of the blocks.\n### Why is this bad?\nDuplicate code is less maintainable.\n### Known problems\n* The lint doesn't check if the moved expressions modify values that are being used in\n  the if condition. The suggestion can in that case modify the behavior of the program.\n  See [rust-clippy#7452](https://github.com/rust-lang/rust-clippy/issues/7452)\n### Example\n\nlet foo = if … {\n    println!(\"Hello World\");\n    13\n} else {\n    println!(\"Hello World\");\n    42\n};\n\nUse instead:\n\nprintln!(\"Hello World\");\nlet foo = if … {\n    13\n} else {\n    42\n};\n",
        "builtin_type_shadow" => "### What it does\nWarns if a generic shadows a built-in type.\n### Why is this bad?\nThis gives surprising type errors.\n### Example\n\nimpl<u32> Foo<u32> {\n    fn impl_func(&self) -> u32 {\n        42\n    }\n}\n",
        "bytes_count_to_len" => "### What it does\nIt checks for `str::bytes().count()` and suggests replacing it with\n`str::len()`.\n### Why is this bad?\n`str::bytes().count()` is longer and may not be as performant as using\n`str::len()`.\n### Example\n\n\"hello\".bytes().count();\nString::from(\"hello\").bytes().count();\n\nUse instead:\n\n\"hello\".len();\nString::from(\"hello\").len();\n",
        "bytes_nth" => "### What it does\nChecks for the use of `.bytes().nth()`.\n### Why is this bad?\n`.as_bytes().get()` is more efficient and more\nreadable.\n### Example\n\n// Bad\nlet _ = \"Hello\".bytes().nth(3);\n// Good\nlet _ = \"Hello\".as_bytes().get(3);\n",
        "cargo_common_metadata" => "### What it does\nChecks to see if all common metadata is defined in\n`Cargo.toml`. See: https://rust-lang-nursery.github.io/api-guidelines/documentation.html#cargotoml-includes-all-common-metadata-c-metadata\n### Why is this bad?\nIt will be more difficult for users to discover the\npurpose of the crate, and key information related to it.\n### Example\n\n[package]\nname = \"clippy\"\nversion = \"0.0.212\"\nrepository = \"https://github.com/rust-lang/rust-clippy\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"clippy\", \"lint\", \"plugin\"]\ncategories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n\nShould include a description field like:\n\n[package]\nname = \"clippy\"\nversion = \"0.0.212\"\ndescription = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\nrepository = \"https://github.com/rust-lang/rust-clippy\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"clippy\", \"lint\", \"plugin\"]\ncategories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n",
        "case_sensitive_file_extension_comparisons" => "### What it does\nChecks for calls to `ends_with` with possible file extensions\nand suggests to use a case-insensitive approach instead.\n### Why is this bad?\n`ends_with` is case-sensitive and may not detect files with a valid extension.\n### Example\n\nfn is_rust_file(filename: &str) -> bool {\n    filename.ends_with(\".rs\")\n}\n\nUse instead:\n\nfn is_rust_file(filename: &str) -> bool {\n    filename.rsplit('.').next().map(|ext| ext.eq_ignore_ascii_case(\"rs\")) == Some(true)\n}\n",
        "cast_abs_to_unsigned" => "### What it does\nChecks for uses of the `abs()` method that cast the result to unsigned.\n### Why is this bad?\nThe `unsigned_abs()` method avoids panic when called on the MIN value.\n### Example\n\nlet x: i32 = -42;\nlet y: u32 = x.abs() as u32;\n\nUse instead:\n\nlet x: i32 = -42;\nlet y: u32 = x.unsigned_abs();\n",
        "cast_enum_constructor" => "### What it does\nChecks for casts from an enum tuple constructor to an integer.\n### Why is this bad?\nThe cast is easily confused with casting a c-like enum value to an integer.\n### Example\n\nenum E { X(i32) };\nlet _ = E::X as usize;\n",
        "cast_enum_truncation" => "### What it does\nChecks for casts from an enum type to an integral type which will definitely truncate the\nvalue.\n### Why is this bad?\nThe resulting integral value will not match the value of the variant it came from.\n### Example\n\nenum E { X = 256 };\nlet _ = E::X as u8;\n",
        "cast_lossless" => "### What it does\nChecks for casts between numerical types that may\nbe replaced by safe conversion functions.\n### Why is this bad?\nRust's `as` keyword will perform many kinds of\nconversions, including silently lossy conversions. Conversion functions such\nas `i32::from` will only perform lossless conversions. Using the conversion\nfunctions prevents conversions from turning into silent lossy conversions if\nthe types of the input expressions ever change, and make it easier for\npeople reading the code to know that the conversion is lossless.\n### Example\n\nfn as_u64(x: u8) -> u64 {\n    x as u64\n}\n\nUsing `::from` would look like this:\n\nfn as_u64(x: u8) -> u64 {\n    u64::from(x)\n}\n",
        "cast_possible_truncation" => "### What it does\nChecks for casts between numerical types that may\ntruncate large values. This is expected behavior, so the cast is `Allow` by\ndefault.\n### Why is this bad?\nIn some problem domains, it is good practice to avoid\ntruncation. This lint can be activated to help assess where additional\nchecks could be beneficial.\n### Example\n\nfn as_u8(x: u64) -> u8 {\n    x as u8\n}\n",
        "cast_possible_wrap" => "### What it does\nChecks for casts from an unsigned type to a signed type of\nthe same size. Performing such a cast is a 'no-op' for the compiler,\ni.e., nothing is changed at the bit level, and the binary representation of\nthe value is reinterpreted. This can cause wrapping if the value is too big\nfor the target signed type. However, the cast works as defined, so this lint\nis `Allow` by default.\n### Why is this bad?\nWhile such a cast is not bad in itself, the results can\nbe surprising when this is not the intended behavior, as demonstrated by the\nexample below.\n### Example\n\nu32::MAX as i32; // will yield a value of `-1`\n",
        "cast_precision_loss" => "### What it does\nChecks for casts from any numerical to a float type where\nthe receiving type cannot store all values from the original type without\nrounding errors. This possible rounding is to be expected, so this lint is\n`Allow` by default.\nBasically, this warns on casting any integer with 32 or more bits to `f32`\nor any 64-bit integer to `f64`.\n### Why is this bad?\nIt's not bad at all. But in some applications it can be\nhelpful to know where precision loss can take place. This lint can help find\nthose places in the code.\n### Example\n\nlet x = u64::MAX;\nx as f64;\n",
        "cast_ptr_alignment" => "### What it does\nChecks for casts, using `as` or `pointer::cast`,\nfrom a less-strictly-aligned pointer to a more-strictly-aligned pointer\n### Why is this bad?\nDereferencing the resulting pointer may be undefined\nbehavior.\n### Known problems\nUsing `std::ptr::read_unaligned` and `std::ptr::write_unaligned` or similar\non the resulting pointer is fine. Is over-zealous: Casts with manual alignment checks or casts like\nu64-> u8 -> u16 can be fine. Miri is able to do a more in-depth analysis.\n### Example\n\nlet _ = (&1u8 as *const u8) as *const u16;\nlet _ = (&mut 1u8 as *mut u8) as *mut u16;\n(&1u8 as *const u8).cast::<u16>();\n(&mut 1u8 as *mut u8).cast::<u16>();\n",
        "cast_ref_to_mut" => "### What it does\nChecks for casts of `&T` to `&mut T` anywhere in the code.\n### Why is this bad?\nIt’s basically guaranteed to be undefined behavior.\n`UnsafeCell` is the only way to obtain aliasable data that is considered\nmutable.\n### Example\n\nfn x(r: &i32) {\n    unsafe {\n        *(r as *const _ as *mut _) += 1;\n    }\n}\n\nInstead consider using interior mutability types.\n\nuse std::cell::UnsafeCell;\nfn x(r: &UnsafeCell<i32>) {\n    unsafe {\n        *r.get() += 1;\n    }\n}\n",
        "cast_sign_loss" => "### What it does\nChecks for casts from a signed to an unsigned numerical\ntype. In this case, negative values wrap around to large positive values,\nwhich can be quite surprising in practice. However, as the cast works as\ndefined, this lint is `Allow` by default.\n### Why is this bad?\nPossibly surprising results. You can activate this lint\nas a one-time check to see where numerical wrapping can arise.\n### Example\n\nlet y: i8 = -1;\ny as u128; // will return 18446744073709551615\n",
        "cast_slice_different_sizes" => "### What it does\nChecks for `as` casts between raw pointers to slices with differently sized elements.\n### Why is this bad?\nThe produced raw pointer to a slice does not update its length metadata. The produced\npointer will point to a different number of bytes than the original pointer because the\nlength metadata of a raw slice pointer is in elements rather than bytes.\nProducing a slice reference from the raw pointer will either create a slice with\nless data (which can be surprising) or create a slice with more data and cause Undefined Behavior.\n### Example\n// Missing data\n\nlet a = [1_i32, 2, 3, 4];\nlet p = &a as *const [i32] as *const [u8];\nunsafe {\n    println!(\"{:?}\", &*p);\n}\n\n// Undefined Behavior (note: also potential alignment issues)\n\nlet a = [1_u8, 2, 3, 4];\nlet p = &a as *const [u8] as *const [u32];\nunsafe {\n    println!(\"{:?}\", &*p);\n}\n\nInstead use `ptr::slice_from_raw_parts` to construct a slice from a data pointer and the correct length\n\nlet a = [1_i32, 2, 3, 4];\nlet old_ptr = &a as *const [i32];\n// The data pointer is cast to a pointer to the target `u8` not `[u8]`\n// The length comes from the known length of 4 i32s times the 4 bytes per i32\nlet new_ptr = core::ptr::slice_from_raw_parts(old_ptr as *const u8, 16);\nunsafe {\n    println!(\"{:?}\", &*new_ptr);\n}\n",
        "chars_last_cmp" => "### What it does\nChecks for usage of `_.chars().last()` or\n`_.chars().next_back()` on a `str` to check if it ends with a given char.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.ends_with(_)`.\n### Example\n\n// Bad\nname.chars().last() == Some('_') || name.chars().next_back() == Some('-');\n// Good\nname.ends_with('_') || name.ends_with('-');\n",
        "chars_next_cmp" => "### What it does\nChecks for usage of `.chars().next()` on a `str` to check\nif it starts with a given char.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.starts_with(_)`.\n### Example\n\nlet name = \"foo\";\nif name.chars().next() == Some('_') {};\n\nCould be written as\n\nlet name = \"foo\";\nif name.starts_with('_') {};\n",
        "checked_conversions" => "### What it does\nChecks for explicit bounds checking when casting.\n### Why is this bad?\nReduces the readability of statements & is error prone.\n### Example\n\nfoo <= i32::MAX as u32\n\nCould be written:\n\ni32::try_from(foo).is_ok()\n",
        "clippy_lints_internal" => "### What it does\nChecks for various things we like to keep tidy in clippy.\n### Why is this bad?\nWe like to pretend we're an example of tidy code.\n### Example\nWrong ordering of the util::paths constants.",
        "clone_double_ref" => "### What it does\nChecks for usage of `.clone()` on an `&&T`.\n### Why is this bad?\nCloning an `&&T` copies the inner `&T`, instead of\ncloning the underlying `T`.\n### Example\n\nfn main() {\n    let x = vec![1];\n    let y = &&x;\n    let z = y.clone();\n    println!(\"{:p} {:p}\", *y, z); // prints out the same pointer\n}\n",
        "clone_on_copy" => "### What it does\nChecks for usage of `.clone()` on a `Copy` type.\n### Why is this bad?\nThe only reason `Copy` types implement `Clone` is for\ngenerics, not for using the `clone` method on a concrete type.\n### Example\n\n42u64.clone();\n",
        "clone_on_ref_ptr" => "### What it does\nChecks for usage of `.clone()` on a ref-counted pointer,\n(`Rc`, `Arc`, `rc::Weak`, or `sync::Weak`), and suggests calling Clone via unified\nfunction syntax instead (e.g., `Rc::clone(foo)`).\n### Why is this bad?\nCalling '.clone()' on an Rc, Arc, or Weak\ncan obscure the fact that only the pointer is being cloned, not the underlying\ndata.\n### Example\n\nlet x = Rc::new(1);\n// Bad\nx.clone();\n// Good\nRc::clone(&x);\n",
        "cloned_instead_of_copied" => "### What it does\nChecks for usages of `cloned()` on an `Iterator` or `Option` where\n`copied()` could be used instead.\n### Why is this bad?\n`copied()` is better because it guarantees that the type being cloned\nimplements `Copy`.\n### Example\n\n[1, 2, 3].iter().cloned();\n\nUse instead:\n\n[1, 2, 3].iter().copied();\n",
        "cmp_nan" => "### What it does\nChecks for comparisons to NaN.\n### Why is this bad?\nNaN does not compare meaningfully to anything – not\neven itself – so those comparisons are simply wrong.\n### Example\n\n// Bad\nif x == f32::NAN { }\n// Good\nif x.is_nan() { }\n",
        "cmp_null" => "### What it does\nThis lint checks for equality comparisons with `ptr::null`\n### Why is this bad?\nIt's easier and more readable to use the inherent\n`.is_null()`\nmethod instead\n### Example\n\n// Bad\nif x == ptr::null {\n    ..\n}\n// Good\nif x.is_null() {\n    ..\n}\n",
        "cmp_owned" => "### What it does\nChecks for conversions to owned values just for the sake\nof a comparison.\n### Why is this bad?\nThe comparison can operate on a reference, so creating\nan owned value effectively throws it away directly afterwards, which is\nneedlessly consuming code and heap space.\n### Example\n\nif x.to_owned() == y {}\n\nCould be written as\n\nif x == y {}\n",
        "cognitive_complexity" => "### What it does\nChecks for methods with high cognitive complexity.\n### Why is this bad?\nMethods of high cognitive complexity tend to be hard to\nboth read and maintain. Also LLVM will tend to optimize small methods better.\n### Known problems\nSometimes it's hard to find a way to reduce the\ncomplexity.\n### Example\nYou'll see it when you get the warning.",
        "collapsible_else_if" => "### What it does\nChecks for collapsible `else { if ... }` expressions\nthat can be collapsed to `else if ...`.\n### Why is this bad?\nEach `if`-statement adds one level of nesting, which\nmakes code look more complex than it really is.\n### Example\n\nif x {\n    …\n} else {\n    if y {\n        …\n    }\n}\n\nShould be written:\n\nif x {\n    …\n} else if y {\n    …\n}\n",
        "collapsible_if" => "### What it does\nChecks for nested `if` statements which can be collapsed\nby `&&`-combining their conditions.\n### Why is this bad?\nEach `if`-statement adds one level of nesting, which\nmakes code look more complex than it really is.\n### Example\n\nif x {\n    if y {\n        …\n    }\n}\n\nUse instead:\n\nif x && y {\n    …\n}\n",
        "collapsible_match" => "### What it does\nFinds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\nwithout adding any branches.\nNote that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\ncases where merging would most likely make the code more readable.\n### Why is this bad?\nIt is unnecessarily verbose and complex.\n### Example\n\nfn func(opt: Option<Result<u64, String>>) {\n    let n = match opt {\n        Some(n) => match n {\n            Ok(n) => n,\n            _ => return,\n        }\n        None => return,\n    };\n}\n\nUse instead:\n\nfn func(opt: Option<Result<u64, String>>) {\n    let n = match opt {\n        Some(Ok(n)) => n,\n        _ => return,\n    };\n}\n",
        "collapsible_span_lint_calls" => "### What it does\nLints `span_lint_and_then` function calls, where the\nclosure argument has only one statement and that statement is a method\ncall to `span_suggestion`, `span_help`, `span_note` (using the same\nspan), `help` or `note`.\nThese usages of `span_lint_and_then` should be replaced with one of the\nwrapper functions `span_lint_and_sugg`, span_lint_and_help`, or\n`span_lint_and_note`.\n### Why is this bad?\nUsing the wrapper `span_lint_and_*` functions, is more\nconvenient, readable and less error prone.\n### Example\nBad:\n\nspan_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n    diag.span_suggestion(\n        expr.span,\n        help_msg,\n        sugg.to_string(),\n        Applicability::MachineApplicable,\n    );\n});\nspan_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n    diag.span_help(expr.span, help_msg);\n});\nspan_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n    diag.help(help_msg);\n});\nspan_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n    diag.span_note(expr.span, note_msg);\n});\nspan_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n    diag.note(note_msg);\n});\n\nGood:\n\nspan_lint_and_sugg(\n    cx,\n    TEST_LINT,\n    expr.span,\n    lint_msg,\n    help_msg,\n    sugg.to_string(),\n    Applicability::MachineApplicable,\n);\nspan_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\nspan_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\nspan_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg);\nspan_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg);\n",
        "comparison_chain" => "### What it does\nChecks comparison chains written with `if` that can be\nrewritten with `match` and `cmp`.\n### Why is this bad?\n`if` is not guaranteed to be exhaustive and conditionals can get\nrepetitive\n### Known problems\nThe match statement may be slower due to the compiler\nnot inlining the call to cmp. See issue [#5354](https://github.com/rust-lang/rust-clippy/issues/5354)\n### Example\n\nfn f(x: u8, y: u8) {\n    if x > y {\n        a()\n    } else if x < y {\n        b()\n    } else {\n        c()\n    }\n}\n\nUse instead:\n\nuse std::cmp::Ordering;\nfn f(x: u8, y: u8) {\n     match x.cmp(&y) {\n         Ordering::Greater => a(),\n         Ordering::Less => b(),\n         Ordering::Equal => c()\n     }\n}\n",
        "comparison_to_empty" => "### What it does\nChecks for comparing to an empty slice such as `\"\"` or `[]`,\nand suggests using `.is_empty()` where applicable.\n### Why is this bad?\nSome structures can answer `.is_empty()` much faster\nthan checking for equality. So it is good to get into the habit of using\n`.is_empty()`, and having it is cheap.\nBesides, it makes the intent clearer than a manual comparison in some contexts.\n### Example\n\nif s == \"\" {\n    ..\n}\nif arr == [] {\n    ..\n}\n\nUse instead:\n\nif s.is_empty() {\n    ..\n}\nif arr.is_empty() {\n    ..\n}\n",
        "compiler_lint_functions" => "### What it does\nChecks for calls to `cx.span_lint*` and suggests to use the `utils::*`\nvariant of the function.\n### Why is this bad?\nThe `utils::*` variants also add a link to the Clippy documentation to the\nwarning/error messages.\n### Example\nBad:\n\ncx.span_lint(LINT_NAME, \"message\");\n\nGood:\n\nutils::span_lint(cx, LINT_NAME, \"message\");\n",
        "copy_iterator" => "### What it does\nChecks for types that implement `Copy` as well as\n`Iterator`.\n### Why is this bad?\nImplicit copies can be confusing when working with\niterator combinators.\n### Example\n\n#[derive(Copy, Clone)]\nstruct Countdown(u8);\nimpl Iterator for Countdown {\n    // ...\n}\nlet a: Vec<_> = my_iterator.take(1).collect();\nlet b: Vec<_> = my_iterator.collect();\n",
        "crate_in_macro_def" => "### What it does\nChecks for use of `crate` as opposed to `$crate` in a macro definition.\n### Why is this bad?\n`crate` refers to the macro call's crate, whereas `$crate` refers to the macro definition's\ncrate. Rarely is the former intended. See:\nhttps://doc.rust-lang.org/reference/macros-by-example.html#hygiene\n### Example\n\n#[macro_export]\nmacro_rules! print_message {\n    () => {\n        println!(\"{}\", crate::MESSAGE);\n    };\n}\npub const MESSAGE: &str = \"Hello!\";\n\nUse instead:\n\n#[macro_export]\nmacro_rules! print_message {\n    () => {\n        println!(\"{}\", $crate::MESSAGE);\n    };\n}\npub const MESSAGE: &str = \"Hello!\";\n\nNote that if the use of `crate` is intentional, an `allow` attribute can be applied to the\nmacro definition, e.g.:\n\n#[allow(clippy::crate_in_macro_def)]\nmacro_rules! ok { ... crate::foo ... }\n",
        "create_dir" => "### What it does\nChecks usage of `std::fs::create_dir` and suggest using `std::fs::create_dir_all` instead.\n### Why is this bad?\nSometimes `std::fs::create_dir` is mistakenly chosen over `std::fs::create_dir_all`.\n### Example\n\nstd::fs::create_dir(\"foo\");\n\nUse instead:\n\nstd::fs::create_dir_all(\"foo\");\n",
        "crosspointer_transmute" => "### What it does\nChecks for transmutes between a type `T` and `*T`.\n### Why is this bad?\nIt's easy to mistakenly transmute between a type and a\npointer to that type.\n### Example\n\ncore::intrinsics::transmute(t) // where the result type is the same as\n                               // `*t` or `&t`'s\n",
        "dbg_macro" => "### What it does\nChecks for usage of dbg!() macro.\n### Why is this bad?\n`dbg!` macro is intended as a debugging tool. It\nshould not be in version control.\n### Example\n\n// Bad\ndbg!(true)\n// Good\ntrue\n",
        "debug_assert_with_mut_call" => "### What it does\nChecks for function/method calls with a mutable\nparameter in `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!` macros.\n### Why is this bad?\nIn release builds `debug_assert!` macros are optimized out by the\ncompiler.\nTherefore mutating something in a `debug_assert!` macro results in different behavior\nbetween a release and debug build.\n### Example\n\ndebug_assert_eq!(vec![3].pop(), Some(3));\n// or\ndebug_assert!(takes_a_mut_parameter(&mut x));\n",
        "decimal_literal_representation" => "### What it does\nWarns if there is a better representation for a numeric literal.\n### Why is this bad?\nEspecially for big powers of 2 a hexadecimal representation is more\nreadable than a decimal representation.\n### Example\n`255` => `0xFF`\n`65_535` => `0xFFFF`\n`4_042_322_160` => `0xF0F0_F0F0`",
        "declare_interior_mutable_const" => "### What it does\nChecks for declaration of `const` items which is interior\nmutable (e.g., contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.).\n### Why is this bad?\nConsts are copied everywhere they are referenced, i.e.,\nevery time you refer to the const a fresh instance of the `Cell` or `Mutex`\nor `AtomicXxxx` will be created, which defeats the whole purpose of using\nthese types in the first place.\nThe `const` should better be replaced by a `static` item if a global\nvariable is wanted, or replaced by a `const fn` if a constructor is wanted.\n### Known problems\nA \"non-constant\" const item is a legacy way to supply an\ninitialized value to downstream `static` items (e.g., the\n`std::sync::ONCE_INIT` constant). In this case the use of `const` is legit,\nand this lint should be suppressed.\nEven though the lint avoids triggering on a constant whose type has enums that have variants\nwith interior mutability, and its value uses non interior mutable variants (see\n[#3962](https://github.com/rust-lang/rust-clippy/issues/3962) and\n[#3825](https://github.com/rust-lang/rust-clippy/issues/3825) for examples);\nit complains about associated constants without default values only based on its types;\nwhich might not be preferable.\nThere're other enums plus associated constants cases that the lint cannot handle.\nTypes that have underlying or potential interior mutability trigger the lint whether\nthe interior mutable field is used or not. See issues\n[#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n### Example\n\nuse std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n// Bad.\nconst CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\nCONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\nassert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n// Good.\nstatic STATIC_ATOM: AtomicUsize = AtomicUsize::new(15);\nSTATIC_ATOM.store(9, SeqCst);\nassert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n",
        "default_lint" => "### What it does\nChecks for cases of an auto-generated lint without an updated description,\ni.e. `default lint description`.\n### Why is this bad?\nIndicates that the lint is not finished.\n### Example\nBad:\n\ndeclare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n\nGood:\n\ndeclare_lint! { pub COOL_LINT, nursery, \"a great new lint\" }\n",
        "default_numeric_fallback" => "### What it does\nChecks for usage of unconstrained numeric literals which may cause default numeric fallback in type\ninference.\nDefault numeric fallback means that if numeric types have not yet been bound to concrete\ntypes at the end of type inference, then integer type is bound to `i32`, and similarly\nfloating type is bound to `f64`.\nSee [RFC0212](https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md) for more information about the fallback.\n### Why is this bad?\nFor those who are very careful about types, default numeric fallback\ncan be a pitfall that cause unexpected runtime behavior.\n### Known problems\nThis lint can only be allowed at the function level or above.\n### Example\n\nlet i = 10;\nlet f = 1.23;\n\nUse instead:\n\nlet i = 10i32;\nlet f = 1.23f64;\n",
        "default_trait_access" => "### What it does\nChecks for literal calls to `Default::default()`.\n### Why is this bad?\nIt's more clear to the reader to use the name of the type whose default is\nbeing gotten than the generic `Default`.\n### Example\n\n// Bad\nlet s: String = Default::default();\n// Good\nlet s = String::default();\n",
        "default_union_representation" => "### What it does\nDisplays a warning when a union is declared with the default representation (without a `#[repr(C)]` attribute).\n### Why is this bad?\nUnions in Rust have unspecified layout by default, despite many people thinking that they\nlay out each field at the start of the union (like C does). That is, there are no guarantees\nabout the offset of the fields for unions with multiple non-ZST fields without an explicitly\nspecified layout. These cases may lead to undefined behavior in unsafe blocks.\n### Example\n\nunion Foo {\n    a: i32,\n    b: u32,\n}\nfn main() {\n    let _x: u32 = unsafe {\n        Foo { a: 0_i32 }.b // Undefined behavior: `b` is allowed to be padding\n    };\n}\n\nUse instead:\n\n#[repr(C)]\nunion Foo {\n    a: i32,\n    b: u32,\n}\nfn main() {\n    let _x: u32 = unsafe {\n        Foo { a: 0_i32 }.b // Now defined behavior, this is just an i32 -> u32 transmute\n    };\n}\n",
        "deprecated_cfg_attr" => "### What it does\nChecks for `#[cfg_attr(rustfmt, rustfmt_skip)]` and suggests to replace it\nwith `#[rustfmt::skip]`.\n### Why is this bad?\nSince tool_attributes ([rust-lang/rust#44690](https://github.com/rust-lang/rust/issues/44690))\nare stable now, they should be used instead of the old `cfg_attr(rustfmt)` attributes.\n### Known problems\nThis lint doesn't detect crate level inner attributes, because they get\nprocessed before the PreExpansionPass lints get executed. See\n[#3123](https://github.com/rust-lang/rust-clippy/pull/3123#issuecomment-422321765)\n### Example\n\n#[cfg_attr(rustfmt, rustfmt_skip)]\nfn main() { }\n\nUse instead:\n\n#[rustfmt::skip]\nfn main() { }\n",
        "deprecated_semver" => "### What it does\nChecks for `#[deprecated]` annotations with a `since`\nfield that is not a valid semantic version.\n### Why is this bad?\nFor checking the version of the deprecation, it must be\na valid semver. Failing that, the contained information is useless.\n### Example\n\n#[deprecated(since = \"forever\")]\nfn something_else() { /* ... */ }\n",
        "deref_addrof" => "### What it does\nChecks for usage of `*&` and `*&mut` in expressions.\n### Why is this bad?\nImmediately dereferencing a reference is no-op and\nmakes the code less clear.\n### Known problems\nMultiple dereference/addrof pairs are not handled so\nthe suggested fix for `x = **&&y` is `x = *&y`, which is still incorrect.\n### Example\n\n// Bad\nlet a = f(*&mut b);\nlet c = *&d;\n// Good\nlet a = f(b);\nlet c = d;\n",
        "deref_by_slicing" => "### What it does\nChecks for slicing expressions which are equivalent to dereferencing the\nvalue.\n### Why is this bad?\nSome people may prefer to dereference rather than slice.\n### Example\n\nlet vec = vec![1, 2, 3];\nlet slice = &vec[..];\n\nUse instead:\n\nlet vec = vec![1, 2, 3];\nlet slice = &*vec;\n",
        "derivable_impls" => "### What it does\nDetects manual `std::default::Default` implementations that are identical to a derived implementation.\n### Why is this bad?\nIt is less concise.\n### Example\n\nstruct Foo {\n    bar: bool\n}\nimpl Default for Foo {\n    fn default() -> Self {\n        Self {\n            bar: false\n        }\n    }\n}\n\nCould be written as:\n\n#[derive(Default)]\nstruct Foo {\n    bar: bool\n}\n\n### Known problems\nDerive macros [sometimes use incorrect bounds](https://github.com/rust-lang/rust/issues/26925)\nin generic types and the user defined `impl` maybe is more generalized or\nspecialized than what derive will produce. This lint can't detect the manual `impl`\nhas exactly equal bounds, and therefore this lint is disabled for types with\ngeneric parameters.",
        "derive_hash_xor_eq" => "### What it does\nChecks for deriving `Hash` but implementing `PartialEq`\nexplicitly or vice versa.\n### Why is this bad?\nThe implementation of these traits must agree (for\nexample for use with `HashMap`) so it’s probably a bad idea to use a\ndefault-generated `Hash` implementation with an explicitly defined\n`PartialEq`. In particular, the following must hold for any type:\n\nk1 == k2 ⇒ hash(k1) == hash(k2)\n\n### Example\n\n#[derive(Hash)]\nstruct Foo;\nimpl PartialEq for Foo {\n    ...\n}\n",
        "derive_ord_xor_partial_ord" => "### What it does\nChecks for deriving `Ord` but implementing `PartialOrd`\nexplicitly or vice versa.\n### Why is this bad?\nThe implementation of these traits must agree (for\nexample for use with `sort`) so it’s probably a bad idea to use a\ndefault-generated `Ord` implementation with an explicitly defined\n`PartialOrd`. In particular, the following must hold for any type\nimplementing `Ord`:\n\nk1.cmp(&k2) == k1.partial_cmp(&k2).unwrap()\n\n### Example\n\n#[derive(Ord, PartialEq, Eq)]\nstruct Foo;\nimpl PartialOrd for Foo {\n    ...\n}\n\nUse instead:\n\n#[derive(PartialEq, Eq)]\nstruct Foo;\nimpl PartialOrd for Foo {\n    fn partial_cmp(&self, other: &Foo) -> Option<Ordering> {\n       Some(self.cmp(other))\n    }\n}\nimpl Ord for Foo {\n    ...\n}\n\nor, if you don't need a custom ordering:\n\n#[derive(Ord, PartialOrd, PartialEq, Eq)]\nstruct Foo;\n",
        "derive_partial_eq_without_eq" => "### What it does\nChecks for types that derive `PartialEq` and could implement `Eq`.\n### Why is this bad?\nIf a type `T` derives `PartialEq` and all of its members implement `Eq`,\nthen `T` can always implement `Eq`. Implementing `Eq` allows `T` to be used\nin APIs that require `Eq` types. It also allows structs containing `T` to derive\n`Eq` themselves.\n### Example\n\n#[derive(PartialEq)]\nstruct Foo {\n    i_am_eq: i32,\n    i_am_eq_too: Vec<String>,\n}\n\nUse instead:\n\n#[derive(PartialEq, Eq)]\nstruct Foo {\n    i_am_eq: i32,\n    i_am_eq_too: Vec<String>,\n}\n",
        "disallowed_methods" => "### What it does\nDenies the configured methods and functions in clippy.toml\nNote: Even though this lint is warn-by-default, it will only trigger if\nmethods are defined in the clippy.toml file.\n### Why is this bad?\nSome methods are undesirable in certain contexts, and it's beneficial to\nlint for them as needed.\n### Example\nAn example clippy.toml configuration:\n\ndisallowed-methods = [\n    # Can use a string as the path of the disallowed method.\n    \"std::boxed::Box::new\",\n    # Can also use an inline table with a `path` key.\n    { path = \"std::time::Instant::now\" },\n    # When using an inline table, can add a `reason` for why the method\n    # is disallowed.\n    { path = \"std::vec::Vec::leak\", reason = \"no leaking memory\" },\n]\n\n\n// Example code where clippy issues a warning\nlet xs = vec![1, 2, 3, 4];\nxs.leak(); // Vec::leak is disallowed in the config.\n// The diagnostic contains the message \"no leaking memory\".\nlet _now = Instant::now(); // Instant::now is disallowed in the config.\nlet _box = Box::new(3); // Box::new is disallowed in the config.\n\nUse instead:\n\n// Example code which does not raise clippy warning\nlet mut xs = Vec::new(); // Vec::new is _not_ disallowed in the config.\nxs.push(123); // Vec::push is _not_ disallowed in the config.\n",
        "disallowed_script_idents" => "### What it does\nChecks for usage of unicode scripts other than those explicitly allowed\nby the lint config.\nThis lint doesn't take into account non-text scripts such as `Unknown` and `Linear_A`.\nIt also ignores the `Common` script type.\nWhile configuring, be sure to use official script name [aliases] from\n[the list of supported scripts][supported_scripts].\nSee also: [`non_ascii_idents`].\n[aliases]: http://www.unicode.org/reports/tr24/tr24-31.html#Script_Value_Aliases\n[supported_scripts]: https://www.unicode.org/iso15924/iso15924-codes.html\n### Why is this bad?\nIt may be not desired to have many different scripts for\nidentifiers in the codebase.\nNote that if you only want to allow plain English, you might want to use\nbuilt-in [`non_ascii_idents`] lint instead.\n[`non_ascii_idents`]: https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#non-ascii-idents\n### Example\n\n// Assuming that `clippy.toml` contains the following line:\n// allowed-locales = [\"Latin\", \"Cyrillic\"]\nlet counter = 10; // OK, latin is allowed.\nlet счётчик = 10; // OK, cyrillic is allowed.\nlet zähler = 10; // OK, it's still latin.\nlet カウンタ = 10; // Will spawn the lint.\n",
        "disallowed_types" => "### What it does\nDenies the configured types in clippy.toml.\nNote: Even though this lint is warn-by-default, it will only trigger if\ntypes are defined in the clippy.toml file.\n### Why is this bad?\nSome types are undesirable in certain contexts.\n### Example:\nAn example clippy.toml configuration:\n\ndisallowed-types = [\n    # Can use a string as the path of the disallowed type.\n    \"std::collections::BTreeMap\",\n    # Can also use an inline table with a `path` key.\n    { path = \"std::net::TcpListener\" },\n    # When using an inline table, can add a `reason` for why the type\n    # is disallowed.\n    { path = \"std::net::Ipv4Addr\", reason = \"no IPv4 allowed\" },\n]\n\n\nuse std::collections::BTreeMap;\n// or its use\nlet x = std::collections::BTreeMap::new();\n\nUse instead:\n\n// A similar type that is allowed by the config\nuse std::collections::HashMap;\n",
        "diverging_sub_expression" => "### What it does\nChecks for diverging calls that are not match arms or\nstatements.\n### Why is this bad?\nIt is often confusing to read. In addition, the\nsub-expression evaluation order for Rust is not well documented.\n### Known problems\nSomeone might want to use `some_bool || panic!()` as a\nshorthand.\n### Example\n\nlet a = b() || panic!() || c();\n// `c()` is dead, `panic!()` is only called if `b()` returns `false`\nlet x = (a, b, c, panic!());\n// can simply be replaced by `panic!()`\n",
        "doc_link_with_quotes" => "### What it does\nDetects the syntax `['foo']` in documentation comments (notice quotes instead of backticks)\noutside of code blocks\n### Why is this bad?\nIt is likely a typo when defining an intra-doc link\n### Example\n\n/// See also: ['foo']\nfn bar() {}\n\nUse instead:\n\n/// See also: [`foo`]\nfn bar() {}\n",
        "doc_markdown" => "### What it does\nChecks for the presence of `_`, `::` or camel-case words\noutside ticks in documentation.\n### Why is this bad?\n*Rustdoc* supports markdown formatting, `_`, `::` and\ncamel-case probably indicates some code which should be included between\nticks. `_` can also be used for emphasis in markdown, this lint tries to\nconsider that.\n### Known problems\nLots of bad docs won’t be fixed, what the lint checks\nfor is limited, and there are still false positives. HTML elements and their\ncontent are not linted.\nIn addition, when writing documentation comments, including `[]` brackets\ninside a link text would trip the parser. Therefore, documenting link with\n`[`SmallVec<[T; INLINE_CAPACITY]>`]` and then [`SmallVec<[T; INLINE_CAPACITY]>`]: SmallVec\nwould fail.\n### Examples\n\n/// Do something with the foo_bar parameter. See also\n/// that::other::module::foo.\n// ^ `foo_bar` and `that::other::module::foo` should be ticked.\nfn doit(foo_bar: usize) {}\n\n\n// Link text with `[]` brackets should be written as following:\n/// Consume the array and return the inner\n/// [`SmallVec<[T; INLINE_CAPACITY]>`][SmallVec].\n/// [SmallVec]: SmallVec\nfn main() {}\n",
        "double_comparisons" => "### What it does\nChecks for double comparisons that could be simplified to a single expression.\n### Why is this bad?\nReadability.\n### Example\n\nif x == y || x < y {}\n\nUse instead:\n\nif x <= y {}\n",
        "double_must_use" => "### What it does\nChecks for a `#[must_use]` attribute without\nfurther information on functions and methods that return a type already\nmarked as `#[must_use]`.\n### Why is this bad?\nThe attribute isn't needed. Not using the result\nwill already be reported. Alternatively, one can add some text to the\nattribute to improve the lint message.\n### Examples\n\n#[must_use]\nfn double_must_use() -> Result<(), ()> {\n    unimplemented!();\n}\n",
        "double_neg" => "### What it does\nDetects expressions of the form `--x`.\n### Why is this bad?\nIt can mislead C/C++ programmers to think `x` was\ndecremented.\n### Example\n\nlet mut x = 3;\n--x;\n",
        "double_parens" => "### What it does\nChecks for unnecessary double parentheses.\n### Why is this bad?\nThis makes code harder to read and might indicate a\nmistake.\n### Example\n\nfn simple_double_parens() -> i32 {\n    ((0))\n}\nfoo((0));\n\nUse instead:\n\nfn simple_no_parens() -> i32 {\n    0\n}\nfoo(0);\n",
        "drop_copy" => "### What it does\nChecks for calls to `std::mem::drop` with a value\nthat derives the Copy trait\n### Why is this bad?\nCalling `std::mem::drop` [does nothing for types that\nimplement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\nvalue will be copied and moved into the function on invocation.\n### Example\n\nlet x: i32 = 42; // i32 implements Copy\nstd::mem::drop(x) // A copy of x is passed to the function, leaving the\n                  // original unaffected\n",
        "drop_non_drop" => "### What it does\nChecks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n### Why is this bad?\nCalling `std::mem::drop` is no different than dropping such a type. A different value may\nhave been intended.\n### Example\n\nstruct Foo;\nlet x = Foo;\nstd::mem::drop(x);\n",
        "drop_ref" => "### What it does\nChecks for calls to `std::mem::drop` with a reference\ninstead of an owned value.\n### Why is this bad?\nCalling `drop` on a reference will only drop the\nreference itself, which is a no-op. It will not call the `drop` method (from\nthe `Drop` trait implementation) on the underlying referenced value, which\nis likely what was intended.\n### Example\n\nlet mut lock_guard = mutex.lock();\nstd::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n// still locked\noperation_that_requires_mutex_to_be_unlocked();\n",
        "dump_hir" => "### What it does\nIt formats the attached node with `{:#?}` and writes the result to the\nstandard output. This is intended for debugging.\n### Examples\n\n#[clippy::dump]\nuse std::mem;\n#[clippy::dump]\nfn foo(input: u32) -> u64 {\n    input as u64\n}\n",
        "duplicate_mod" => "### What it does\nChecks for files that are included as modules multiple times.\n### Why is this bad?\nLoading a file as a module more than once causes it to be compiled\nmultiple times, taking longer and putting duplicate content into the\nmodule tree.\n### Example\n\n// lib.rs\nmod a;\nmod b;\n\n\n// a.rs\n#[path = \"./b.rs\"]\nmod b;\n\nUse instead:\n\n// lib.rs\nmod a;\nmod b;\n\n\n// a.rs\nuse crate::b;\n",
        "duplicate_underscore_argument" => "### What it does\nChecks for function arguments having the similar names\ndiffering by an underscore.\n### Why is this bad?\nIt affects code readability.\n### Example\n\n// Bad\nfn foo(a: i32, _a: i32) {}\n// Good\nfn bar(a: i32, _b: i32) {}\n",
        "duration_subsec" => "### What it does\nChecks for calculation of subsecond microseconds or milliseconds\nfrom other `Duration` methods.\n### Why is this bad?\nIt's more concise to call `Duration::subsec_micros()` or\n`Duration::subsec_millis()` than to calculate them.\n### Example\n\nlet micros = duration.subsec_nanos() / 1_000;\nlet millis = duration.subsec_nanos() / 1_000_000;\n\nUse instead:\n\nlet micros = duration.subsec_micros();\nlet millis = duration.subsec_millis();\n",
        "else_if_without_else" => "### What it does\nChecks for usage of if expressions with an `else if` branch,\nbut without a final `else` branch.\n### Why is this bad?\nSome coding guidelines require this (e.g., MISRA-C:2004 Rule 14.10).\n### Example\n\nif x.is_positive() {\n    a();\n} else if x.is_negative() {\n    b();\n}\n\nUse instead:\n\nif x.is_positive() {\n    a();\n} else if x.is_negative() {\n    b();\n} else {\n    // We don't care about zero.\n}\n",
        "empty_drop" => "### What it does\nChecks for empty `Drop` implementations.\n### Why is this bad?\nEmpty `Drop` implementations have no effect when dropping an instance of the type. They are\nmost likely useless. However, an empty `Drop` implementation prevents a type from being\ndestructured, which might be the intention behind adding the implementation as a marker.\n### Example\n\nstruct S;\nimpl Drop for S {\n    fn drop(&mut self) {}\n}\n\nUse instead:\n\nstruct S;\n",
        "empty_enum" => "### What it does\nChecks for `enum`s with no variants.\nAs of this writing, the `never_type` is still a\nnightly-only experimental API. Therefore, this lint is only triggered\nif the `never_type` is enabled.\n### Why is this bad?\nIf you want to introduce a type which\ncan't be instantiated, you should use `!` (the primitive type \"never\"),\nor a wrapper around it, because `!` has more extensive\ncompiler support (type inference, etc...) and wrappers\naround it are the conventional way to define an uninhabited type.\nFor further information visit [never type documentation](https://doc.rust-lang.org/std/primitive.never.html)\n### Example\n\nenum Test {}\n\nUse instead:\n\n#![feature(never_type)]\nstruct Test(!);\n",
        "empty_line_after_outer_attr" => "### What it does\nChecks for empty lines after outer attributes\n### Why is this bad?\nMost likely the attribute was meant to be an inner attribute using a '!'.\nIf it was meant to be an outer attribute, then the following item\nshould not be separated by empty lines.\n### Known problems\nCan cause false positives.\nFrom the clippy side it's difficult to detect empty lines between an attributes and the\nfollowing item because empty lines and comments are not part of the AST. The parsing\ncurrently works for basic cases but is not perfect.\n### Example\n\n#[allow(dead_code)]\nfn not_quite_good_code() { }\n\nUse instead:\n\n// Good (as inner attribute)\n#![allow(dead_code)]\nfn this_is_fine() { }\n// or\n// Good (as outer attribute)\n#[allow(dead_code)]\nfn this_is_fine_too() { }\n",
        "empty_loop" => "### What it does\nChecks for empty `loop` expressions.\n### Why is this bad?\nThese busy loops burn CPU cycles without doing\nanything. It is _almost always_ a better idea to `panic!` than to have\na busy loop.\nIf panicking isn't possible, think of the environment and either:\n  - block on something\n  - sleep the thread for some microseconds\n  - yield or pause the thread\nFor `std` targets, this can be done with\n[`std::thread::sleep`](https://doc.rust-lang.org/std/thread/fn.sleep.html)\nor [`std::thread::yield_now`](https://doc.rust-lang.org/std/thread/fn.yield_now.html).\nFor `no_std` targets, doing this is more complicated, especially because\n`#[panic_handler]`s can't panic. To stop/pause the thread, you will\nprobably need to invoke some target-specific intrinsic. Examples include:\n  - [`x86_64::instructions::hlt`](https://docs.rs/x86_64/0.12.2/x86_64/instructions/fn.hlt.html)\n  - [`cortex_m::asm::wfi`](https://docs.rs/cortex-m/0.6.3/cortex_m/asm/fn.wfi.html)\n### Example\n\nloop {}\n",
        "empty_structs_with_brackets" => "### What it does\nFinds structs without fields (a so-called \"empty struct\") that are declared with brackets.\n### Why is this bad?\nEmpty brackets after a struct declaration can be omitted.\n### Example\n\nstruct Cookie {}\n\nUse instead:\n\nstruct Cookie;\n",
        "enum_clike_unportable_variant" => "### What it does\nChecks for C-like enumerations that are\n`repr(isize/usize)` and have values that don't fit into an `i32`.\n### Why is this bad?\nThis will truncate the variant value on 32 bit\narchitectures, but works fine on 64 bit.\n### Example\n\n#[repr(usize)]\nenum NonPortable {\n    X = 0x1_0000_0000,\n    Y = 0,\n}\n",
        "enum_glob_use" => "### What it does\nChecks for `use Enum::*`.\n### Why is this bad?\nIt is usually better style to use the prefixed name of\nan enumeration variant, rather than importing variants.\n### Known problems\nOld-style enumerations that prefix the variants are\nstill around.\n### Example\n\n// Bad\nuse std::cmp::Ordering::*;\nfoo(Less);\n// Good\nuse std::cmp::Ordering;\nfoo(Ordering::Less)\n",
        "enum_variant_names" => "### What it does\nDetects enumeration variants that are prefixed or suffixed\nby the same characters.\n### Why is this bad?\nEnumeration variant names should specify their variant,\nnot repeat the enumeration name.\n### Limitations\nCharacters with no casing will be considered when comparing prefixes/suffixes\nThis applies to numbers and non-ascii characters without casing\ne.g. `Foo1` and `Foo2` is considered to have different prefixes\n(the prefixes are `Foo1` and `Foo2` respectively), as also `Bar螃`, `Bar蟹`\n### Example\n\nenum Cake {\n    BlackForestCake,\n    HummingbirdCake,\n    BattenbergCake,\n}\n\nUse instead:\n\nenum Cake {\n    BlackForest,\n    Hummingbird,\n    Battenberg,\n}\n",
        "eq_op" => "### What it does\nChecks for equal operands to comparison, logical and\nbitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\n`||`, `&`, `|`, `^`, `-` and `/`).\n### Why is this bad?\nThis is usually just a typo or a copy and paste error.\n### Known problems\nFalse negatives: We had some false positives regarding\ncalls (notably [racer](https://github.com/phildawes/racer) had one instance\nof `x.pop() && x.pop()`), so we removed matching any function or method\ncalls. We may introduce a list of known pure functions in the future.\n### Example\n\nif x + 1 == x + 1 {}\n// or\nassert_eq!(a, a);\n",
        "equatable_if_let" => "### What it does\nChecks for pattern matchings that can be expressed using equality.\n### Why is this bad?\n* It reads better and has less cognitive load because equality won't cause binding.\n* It is a [Yoda condition](https://en.wikipedia.org/wiki/Yoda_conditions). Yoda conditions are widely\ncriticized for increasing the cognitive load of reading the code.\n* Equality is a simple bool expression and can be merged with `&&` and `||` and\nreuse if blocks\n### Example\n\nif let Some(2) = x {\n    do_thing();\n}\n\nUse instead:\n\nif x == Some(2) {\n    do_thing();\n}\n",
        "erasing_op" => "### What it does\nChecks for erasing operations, e.g., `x * 0`.\n### Why is this bad?\nThe whole expression can be replaced by zero.\nThis is most likely not the intended outcome and should probably be\ncorrected\n### Example\n\nlet x = 1;\n0 / x;\n0 * x;\nx & 0;\n",
        "err_expect" => "### What it does\nChecks for `.err().expect()` calls on the `Result` type.\n### Why is this bad?\n`.expect_err()` can be called directly to avoid the extra type conversion from `err()`.\n### Example\n\nlet x: Result<u32, &str> = Ok(10);\nx.err().expect(\"Testing err().expect()\");\n\nUse instead:\n\nlet x: Result<u32, &str> = Ok(10);\nx.expect_err(\"Testing expect_err\");\n",
        "excessive_precision" => "### What it does\nChecks for float literals with a precision greater\nthan that supported by the underlying type.\n### Why is this bad?\nRust will truncate the literal silently.\n### Example\n\nlet v: f32 = 0.123_456_789_9;\nprintln!(\"{}\", v); //  0.123_456_789\n\nUse instead:\n\nlet v: f64 = 0.123_456_789_9;\nprintln!(\"{}\", v); //  0.123_456_789_9\n",
        "exhaustive_enums" => "### What it does\nWarns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n### Why is this bad?\nExhaustive enums are typically fine, but a project which does\nnot wish to make a stability commitment around exported enums may wish to\ndisable them by default.\n### Example\n\nenum Foo {\n    Bar,\n    Baz\n}\n\nUse instead:\n\n#[non_exhaustive]\nenum Foo {\n    Bar,\n    Baz\n}\n",
        "exhaustive_structs" => "### What it does\nWarns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n### Why is this bad?\nExhaustive structs are typically fine, but a project which does\nnot wish to make a stability commitment around exported structs may wish to\ndisable them by default.\n### Example\n\nstruct Foo {\n    bar: u8,\n    baz: String,\n}\n\nUse instead:\n\n#[non_exhaustive]\nstruct Foo {\n    bar: u8,\n    baz: String,\n}\n",
        "exit" => "### What it does\n`exit()`  terminates the program and doesn't provide a\nstack trace.\n### Why is this bad?\nIdeally a program is terminated by finishing\nthe main function.\n### Example\n\nstd::process::exit(0)\n",
        "expect_fun_call" => "### What it does\nChecks for calls to `.expect(&format!(...))`, `.expect(foo(..))`,\netc., and suggests to use `unwrap_or_else` instead\n### Why is this bad?\nThe function will always be called.\n### Known problems\nIf the function has side-effects, not calling it will\nchange the semantics of the program, but you shouldn't rely on that anyway.\n### Example\n\nfoo.expect(&format!(\"Err {}: {}\", err_code, err_msg));\n// or\nfoo.expect(format!(\"Err {}: {}\", err_code, err_msg).as_str());\n\nUse instead:\n\nfoo.unwrap_or_else(|| panic!(\"Err {}: {}\", err_code, err_msg));\n",
        "expect_used" => "### What it does\nChecks for `.expect()` calls on `Option`s and `Result`s.\n### Why is this bad?\nUsually it is better to handle the `None` or `Err` case.\nStill, for a lot of quick-and-dirty code, `expect` is a good choice, which is why\nthis lint is `Allow` by default.\n`result.expect()` will let the thread panic on `Err`\nvalues. Normally, you want to implement more sophisticated error handling,\nand propagate errors upwards with `?` operator.\n### Examples\n\noption.expect(\"one\");\nresult.expect(\"one\");\n\nUse instead:\n\noption?;\n// or\nresult?;\n",
        "expl_impl_clone_on_copy" => "### What it does\nChecks for explicit `Clone` implementations for `Copy`\ntypes.\n### Why is this bad?\nTo avoid surprising behavior, these traits should\nagree and the behavior of `Copy` cannot be overridden. In almost all\nsituations a `Copy` type should have a `Clone` implementation that does\nnothing more than copy the object, which is what `#[derive(Copy, Clone)]`\ngets you.\n### Example\n\n#[derive(Copy)]\nstruct Foo;\nimpl Clone for Foo {\n    // ..\n}\n",
        "explicit_counter_loop" => "### What it does\nChecks `for` loops over slices with an explicit counter\nand suggests the use of `.enumerate()`.\n### Why is this bad?\nUsing `.enumerate()` makes the intent more clear,\ndeclutters the code and may be faster in some instances.\n### Example\n\nlet mut i = 0;\nfor item in &v {\n    bar(i, *item);\n    i += 1;\n}\n\nCould be written as\n\nfor (i, item) in v.iter().enumerate() { bar(i, *item); }\n",
        "explicit_deref_methods" => "### What it does\nChecks for explicit `deref()` or `deref_mut()` method calls.\n### Why is this bad?\nDereferencing by `&*x` or `&mut *x` is clearer and more concise,\nwhen not part of a method chain.\n### Example\n\nuse std::ops::Deref;\nlet a: &mut String = &mut String::from(\"foo\");\nlet b: &str = a.deref();\n\nCould be written as:\n\nlet a: &mut String = &mut String::from(\"foo\");\nlet b = &*a;\n\nThis lint excludes\n\nlet _ = d.unwrap().deref();\n",
        "explicit_into_iter_loop" => "### What it does\nChecks for loops on `y.into_iter()` where `y` will do, and\nsuggests the latter.\n### Why is this bad?\nReadability.\n### Example\n\n// with `y` a `Vec` or slice:\nfor x in y.into_iter() {\n    // ..\n}\n\ncan be rewritten to\n\nfor x in y {\n    // ..\n}\n",
        "explicit_iter_loop" => "### What it does\nChecks for loops on `x.iter()` where `&x` will do, and\nsuggests the latter.\n### Why is this bad?\nReadability.\n### Known problems\nFalse negatives. We currently only warn on some known\ntypes.\n### Example\n\n// with `y` a `Vec` or slice:\nfor x in y.iter() {\n    // ..\n}\n\ncan be rewritten to\n\nfor x in &y {\n    // ..\n}\n",
        "explicit_write" => "### What it does\nChecks for usage of `write!()` / `writeln()!` which can be\nreplaced with `(e)print!()` / `(e)println!()`\n### Why is this bad?\nUsing `(e)println! is clearer and more concise\n### Example\n\nwriteln!(&mut std::io::stderr(), \"foo: {:?}\", bar).unwrap();\nwriteln!(&mut std::io::stdout(), \"foo: {:?}\", bar).unwrap();\n\nUse instead:\n\neprintln!(\"foo: {:?}\", bar);\nprintln!(\"foo: {:?}\", bar);\n",
        "extend_with_drain" => "### What it does\nChecks for occurrences where one vector gets extended instead of append\n### Why is this bad?\nUsing `append` instead of `extend` is more concise and faster\n### Example\n\nlet mut a = vec![1, 2, 3];\nlet mut b = vec![4, 5, 6];\n// Bad\na.extend(b.drain(..));\n// Good\na.append(&mut b);\n",
        "extra_unused_lifetimes" => "### What it does\nChecks for lifetimes in generics that are never used\nanywhere else.\n### Why is this bad?\nThe additional lifetimes make the code look more\ncomplicated, while there is nothing out of the ordinary going on. Removing\nthem leads to more readable code.\n### Example\n\n// Bad: unnecessary lifetimes\nfn unused_lifetime<'a>(x: u8) {\n    // ..\n}\n// Good\nfn no_lifetime(x: u8) {\n    // ...\n}\n",
        "fallible_impl_from" => "### What it does\nChecks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n### Why is this bad?\n`TryFrom` should be used if there's a possibility of failure.\n### Example\n\nstruct Foo(i32);\nimpl From<String> for Foo {\n    fn from(s: String) -> Self {\n        Foo(s.parse().unwrap())\n    }\n}\n\nUse instead:\n\nstruct Foo(i32);\nimpl TryFrom<String> for Foo {\n    type Error = ();\n    fn try_from(s: String) -> Result<Self, Self::Error> {\n        if let Ok(parsed) = s.parse() {\n            Ok(Foo(parsed))\n        } else {\n            Err(())\n        }\n    }\n}\n",
        "field_reassign_with_default" => "### What it does\nChecks for immediate reassignment of fields initialized\nwith Default::default().\n### Why is this bad?\n### Known problems\nAssignments to patterns that are of tuple type are not linted.\n### Example\nBad:\n\nlet mut a: A = Default::default();\na.i = 42;\n\nUse instead:\n\nlet a = A {\n    i: 42,\n    .. Default::default()\n};\n",
        "filetype_is_file" => "### What it does\nChecks for `FileType::is_file()`.\n### Why is this bad?\nWhen people testing a file type with `FileType::is_file`\nthey are testing whether a path is something they can get bytes from. But\n`is_file` doesn't cover special file types in unix-like systems, and doesn't cover\nsymlink in windows. Using `!FileType::is_dir()` is a better way to that intention.\n### Example\n\nlet metadata = std::fs::metadata(\"foo.txt\")?;\nlet filetype = metadata.file_type();\nif filetype.is_file() {\n    // read file\n}\n\nshould be written as:\n\nlet metadata = std::fs::metadata(\"foo.txt\")?;\nlet filetype = metadata.file_type();\nif !filetype.is_dir() {\n    // read file\n}\n",
        "filter_map_identity" => "### What it does\nChecks for usage of `filter_map(|x| x)`.\n### Why is this bad?\nReadability, this can be written more concisely by using `flatten`.\n### Example\n\niter.filter_map(|x| x);\n\nUse instead:\n\niter.flatten();\n",
        "filter_map_next" => "### What it does\nChecks for usage of `_.filter_map(_).next()`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.find_map(_)`.\n### Example\n\n (0..3).filter_map(|x| if x == 2 { Some(x) } else { None }).next();\n\nCan be written as\n\n (0..3).find_map(|x| if x == 2 { Some(x) } else { None });\n",
        "filter_next" => "### What it does\nChecks for usage of `_.filter(_).next()`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.find(_)`.\n### Example\n\nvec.iter().filter(|x| **x == 0).next();\n\nCould be written as\n\nvec.iter().find(|x| **x == 0);\n",
        "flat_map_identity" => "### What it does\nChecks for usage of `flat_map(|x| x)`.\n### Why is this bad?\nReadability, this can be written more concisely by using `flatten`.\n### Example\n\niter.flat_map(|x| x);\n\nCan be written as\n\niter.flatten();\n",
        "flat_map_option" => "### What it does\nChecks for usages of `Iterator::flat_map()` where `filter_map()` could be\nused instead.\n### Why is this bad?\nWhen applicable, `filter_map()` is more clear since it shows that\n`Option` is used to produce 0 or 1 items.\n### Example\n\nlet nums: Vec<i32> = [\"1\", \"2\", \"whee!\"].iter().flat_map(|x| x.parse().ok()).collect();\n\nUse instead:\n\nlet nums: Vec<i32> = [\"1\", \"2\", \"whee!\"].iter().filter_map(|x| x.parse().ok()).collect();\n",
        "float_arithmetic" => "### What it does\nChecks for float arithmetic.\n### Why is this bad?\nFor some embedded systems or kernel development, it\ncan be useful to rule out floating-point numbers.\n### Example\n\na + 1.0;\n",
        "float_cmp" => "### What it does\nChecks for (in-)equality comparisons on floating-point\nvalues (apart from zero), except in functions called `*eq*` (which probably\nimplement equality for a type involving floats).\n### Why is this bad?\nFloating point calculations are usually imprecise, so\nasking if two values are *exactly* equal is asking for trouble. For a good\nguide on what to do, see [the floating point\nguide](http://www.floating-point-gui.de/errors/comparison).\n### Example\n\nlet x = 1.2331f64;\nlet y = 1.2332f64;\nif y == 1.23f64 { }\nif y != x {} // where both are floats\n\nUse instead:\n\nlet error_margin = f64::EPSILON; // Use an epsilon for comparison\n// Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n// let error_margin = std::f64::EPSILON;\nif (y - 1.23f64).abs() < error_margin { }\nif (y - x).abs() > error_margin { }\n",
        "float_cmp_const" => "### What it does\nChecks for (in-)equality comparisons on floating-point\nvalue and constant, except in functions called `*eq*` (which probably\nimplement equality for a type involving floats).\n### Why is this bad?\nFloating point calculations are usually imprecise, so\nasking if two values are *exactly* equal is asking for trouble. For a good\nguide on what to do, see [the floating point\nguide](http://www.floating-point-gui.de/errors/comparison).\n### Example\n\nlet x: f64 = 1.0;\nconst ONE: f64 = 1.00;\nif x == ONE { } // where both are floats\n\nUse instead:\n\nlet error_margin = f64::EPSILON; // Use an epsilon for comparison\n// Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n// let error_margin = std::f64::EPSILON;\nif (x - ONE).abs() < error_margin { }\n",
        "float_equality_without_abs" => "### What it does\nChecks for statements of the form `(a - b) < f32::EPSILON` or\n`(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n### Why is this bad?\nThe code without `.abs()` is more likely to have a bug.\n### Known problems\nIf the user can ensure that b is larger than a, the `.abs()` is\ntechnically unnecessary. However, it will make the code more robust and doesn't have any\nlarge performance implications. If the abs call was deliberately left out for performance\nreasons, it is probably better to state this explicitly in the code, which then can be done\nwith an allow.\n### Example\n\npub fn is_roughly_equal(a: f32, b: f32) -> bool {\n    (a - b) < f32::EPSILON\n}\n\nUse instead:\n\npub fn is_roughly_equal(a: f32, b: f32) -> bool {\n    (a - b).abs() < f32::EPSILON\n}\n",
        "fn_address_comparisons" => "### What it does\nChecks for comparisons with an address of a function item.\n### Why is this bad?\nFunction item address is not guaranteed to be unique and could vary\nbetween different code generation units. Furthermore different function items could have\nthe same address after being merged together.\n### Example\n\ntype F = fn();\nfn a() {}\nlet f: F = a;\nif f == a {\n    // ...\n}\n",
        "fn_params_excessive_bools" => "### What it does\nChecks for excessive use of\nbools in function definitions.\n### Why is this bad?\nCalls to such functions\nare confusing and error prone, because it's\nhard to remember argument order and you have\nno type system support to back you up. Using\ntwo-variant enums instead of bools often makes\nAPI easier to use.\n### Example\nBad:\n\nfn f(is_round: bool, is_hot: bool) { ... }\n\nGood:\n\nenum Shape {\n    Round,\n    Spiky,\n}\nenum Temperature {\n    Hot,\n    IceCold,\n}\nfn f(shape: Shape, temperature: Temperature) { ... }\n",
        "fn_to_numeric_cast" => "### What it does\nChecks for casts of function pointers to something other than usize\n### Why is this bad?\nCasting a function pointer to anything other than usize/isize is not portable across\narchitectures, because you end up losing bits if the target type is too small or end up with a\nbunch of extra bits that waste space and add more instructions to the final binary than\nstrictly necessary for the problem\nCasting to isize also doesn't make sense since there are no signed addresses.\n### Example\n\n// Bad\nfn fun() -> i32 { 1 }\nlet a = fun as i64;\n// Good\nfn fun2() -> i32 { 1 }\nlet a = fun2 as usize;\n",
        "fn_to_numeric_cast_any" => "### What it does\nChecks for casts of a function pointer to any integer type.\n### Why is this bad?\nCasting a function pointer to an integer can have surprising results and can occur\naccidentally if parentheses are omitted from a function call. If you aren't doing anything\nlow-level with function pointers then you can opt-out of casting functions to integers in\norder to avoid mistakes. Alternatively, you can use this lint to audit all uses of function\npointer casts in your code.\n### Example\n\n// Bad: fn1 is cast as `usize`\nfn fn1() -> u16 {\n    1\n};\nlet _ = fn1 as usize;\n// Good: maybe you intended to call the function?\nfn fn2() -> u16 {\n    1\n};\nlet _ = fn2() as usize;\n// Good: maybe you intended to cast it to a function type?\nfn fn3() -> u16 {\n    1\n}\nlet _ = fn3 as fn() -> u16;\n",
        "fn_to_numeric_cast_with_truncation" => "### What it does\nChecks for casts of a function pointer to a numeric type not wide enough to\nstore address.\n### Why is this bad?\nSuch a cast discards some bits of the function's address. If this is intended, it would be more\nclearly expressed by casting to usize first, then casting the usize to the intended type (with\na comment) to perform the truncation.\n### Example\n\n// Bad\nfn fn1() -> i16 {\n    1\n};\nlet _ = fn1 as i32;\n// Better: Cast to usize first, then comment with the reason for the truncation\nfn fn2() -> i16 {\n    1\n};\nlet fn_ptr = fn2 as usize;\nlet fn_ptr_truncated = fn_ptr as i32;\n",
        "for_kv_map" => "### What it does\nChecks for iterating a map (`HashMap` or `BTreeMap`) and\nignoring either the keys or values.\n### Why is this bad?\nReadability. There are `keys` and `values` methods that\ncan be used to express that don't need the values or keys.\n### Example\n\nfor (k, _) in &map {\n    ..\n}\n\ncould be replaced by\n\nfor k in map.keys() {\n    ..\n}\n",
        "for_loops_over_fallibles" => "### What it does\nChecks for `for` loops over `Option` or `Result` values.\n### Why is this bad?\nReadability. This is more clearly expressed as an `if\nlet`.\n### Example\n\nfor x in opt {\n    // ..\n}\nfor x in &res {\n    // ..\n}\n\nUse instead:\n\nif let Some(x) = opt {\n    // ..\n}\nif let Ok(x) = res {\n    // ..\n}\n",
        "forget_copy" => "### What it does\nChecks for calls to `std::mem::forget` with a value that\nderives the Copy trait\n### Why is this bad?\nCalling `std::mem::forget` [does nothing for types that\nimplement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\nvalue will be copied and moved into the function on invocation.\nAn alternative, but also valid, explanation is that Copy types do not\nimplement\nthe Drop trait, which means they have no destructors. Without a destructor,\nthere\nis nothing for `std::mem::forget` to ignore.\n### Example\n\nlet x: i32 = 42; // i32 implements Copy\nstd::mem::forget(x) // A copy of x is passed to the function, leaving the\n                    // original unaffected\n",
        "forget_non_drop" => "### What it does\nChecks for calls to `std::mem::forget` with a value that does not implement `Drop`.\n### Why is this bad?\nCalling `std::mem::forget` is no different than dropping such a type. A different value may\nhave been intended.\n### Example\n\nstruct Foo;\nlet x = Foo;\nstd::mem::forget(x);\n",
        "forget_ref" => "### What it does\nChecks for calls to `std::mem::forget` with a reference\ninstead of an owned value.\n### Why is this bad?\nCalling `forget` on a reference will only forget the\nreference itself, which is a no-op. It will not forget the underlying\nreferenced\nvalue, which is likely what was intended.\n### Example\n\nlet x = Box::new(1);\nstd::mem::forget(&x) // Should have been forget(x), x will still be dropped\n",
        "format_in_format_args" => "### What it does\nDetects `format!` within the arguments of another macro that does\nformatting such as `format!` itself, `write!` or `println!`. Suggests\ninlining the `format!` call.\n### Why is this bad?\nThe recommended code is both shorter and avoids a temporary allocation.\n### Example\n\nprintln!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n\nUse instead:\n\nprintln!(\"error: something failed at {}\", Location::caller());\n",
        "format_push_string" => "### What it does\nDetects cases where the result of a `format!` call is\nappended to an existing `String`.\n### Why is this bad?\nIntroduces an extra, avoidable heap allocation.\n### Example\n\nlet mut s = String::new();\ns += &format!(\"0x{:X}\", 1024);\ns.push_str(&format!(\"0x{:X}\", 1024));\n\nUse instead:\n\nuse std::fmt::Write as _; // import without risk of name clashing\nlet mut s = String::new();\nlet _ = write!(s, \"0x{:X}\", 1024);\n",
        "from_iter_instead_of_collect" => "### What it does\nChecks for `from_iter()` function calls on types that implement the `FromIterator`\ntrait.\n### Why is this bad?\nIt is recommended style to use collect. See\n[FromIterator documentation](https://doc.rust-lang.org/std/iter/trait.FromIterator.html)\n### Example\n\nlet five_fives = std::iter::repeat(5).take(5);\nlet v = Vec::from_iter(five_fives);\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n\nUse instead:\n\nlet five_fives = std::iter::repeat(5).take(5);\nlet v: Vec<i32> = five_fives.collect();\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n",
        "from_over_into" => "### What it does\nSearches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n### Why is this bad?\nAccording the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n### Example\n\nstruct StringWrapper(String);\nimpl Into<StringWrapper> for String {\n    fn into(self) -> StringWrapper {\n        StringWrapper(self)\n    }\n}\n\nUse instead:\n\nstruct StringWrapper(String);\nimpl From<String> for StringWrapper {\n    fn from(s: String) -> StringWrapper {\n        StringWrapper(s)\n    }\n}\n",
        "future_not_send" => "### What it does\nThis lint requires Future implementations returned from\nfunctions and methods to implement the `Send` marker trait. It is mostly\nused by library authors (public and internal) that target an audience where\nmultithreaded executors are likely to be used for running these Futures.\n### Why is this bad?\nA Future implementation captures some state that it\nneeds to eventually produce its final value. When targeting a multithreaded\nexecutor (which is the norm on non-embedded devices) this means that this\nstate may need to be transported to other threads, in other words the\nwhole Future needs to implement the `Send` marker trait. If it does not,\nthen the resulting Future cannot be submitted to a thread pool in the\nend user’s code.\nEspecially for generic functions it can be confusing to leave the\ndiscovery of this problem to the end user: the reported error location\nwill be far from its cause and can in many cases not even be fixed without\nmodifying the library where the offending Future implementation is\nproduced.\n### Example\n\nasync fn not_send(bytes: std::rc::Rc<[u8]>) {}\n\nUse instead:\n\nasync fn is_send(bytes: std::sync::Arc<[u8]>) {}\n",
        "get_first" => "### What it does\nChecks for using `x.get(0)` instead of\n`x.first()`.\n### Why is this bad?\nUsing `x.first()` is easier to read and has the same\nresult.\n### Example\n\n// Bad\nlet x = vec![2, 3, 5];\nlet first_element = x.get(0);\n\nUse instead:\n\n// Good\nlet x = vec![2, 3, 5];\nlet first_element = x.first();\n",
        "get_last_with_len" => "### What it does\nChecks for using `x.get(x.len() - 1)` instead of\n`x.last()`.\n### Why is this bad?\nUsing `x.last()` is easier to read and has the same\nresult.\nNote that using `x[x.len() - 1]` is semantically different from\n`x.last()`.  Indexing into the array will panic on out-of-bounds\naccesses, while `x.get()` and `x.last()` will return `None`.\nThere is another lint (get_unwrap) that covers the case of using\n`x.get(index).unwrap()` instead of `x[index]`.\n### Example\n\n// Bad\nlet x = vec![2, 3, 5];\nlet last_element = x.get(x.len() - 1);\n// Good\nlet x = vec![2, 3, 5];\nlet last_element = x.last();\n",
        "get_unwrap" => "### What it does\nChecks for use of `.get().unwrap()` (or\n`.get_mut().unwrap`) on a standard library type which implements `Index`\n### Why is this bad?\nUsing the Index trait (`[]`) is more clear and more\nconcise.\n### Known problems\nNot a replacement for error handling: Using either\n`.unwrap()` or the Index trait (`[]`) carries the risk of causing a `panic`\nif the value being accessed is `None`. If the use of `.get().unwrap()` is a\ntemporary placeholder for dealing with the `Option` type, then this does\nnot mitigate the need for error handling. If there is a chance that `.get()`\nwill be `None` in your program, then it is advisable that the `None` case\nis handled in a future refactor instead of using `.unwrap()` or the Index\ntrait.\n### Example\n\nlet mut some_vec = vec![0, 1, 2, 3];\nlet last = some_vec.get(3).unwrap();\n*some_vec.get_mut(0).unwrap() = 1;\n\nThe correct use would be:\n\nlet mut some_vec = vec![0, 1, 2, 3];\nlet last = some_vec[3];\nsome_vec[0] = 1;\n",
        "identity_op" => "### What it does\nChecks for identity operations, e.g., `x + 0`.\n### Why is this bad?\nThis code can be removed without changing the\nmeaning. So it just obscures what's going on. Delete it mercilessly.\n### Example\n\nx / 1 + 0 * 1 - 0 | 0;\n",
        "if_chain_style" => "Finds unidiomatic usage of `if_chain!`",
        "if_let_mutex" => "### What it does\nChecks for `Mutex::lock` calls in `if let` expression\nwith lock calls in any of the else blocks.\n### Why is this bad?\nThe Mutex lock remains held for the whole\n`if let ... else` block and deadlocks.\n### Example\n\nif let Ok(thing) = mutex.lock() {\n    do_thing();\n} else {\n    mutex.lock();\n}\n\nShould be written\n\nlet locked = mutex.lock();\nif let Ok(thing) = locked {\n    do_thing(thing);\n} else {\n    use_locked(locked);\n}\n",
        "if_not_else" => "### What it does\nChecks for usage of `!` or `!=` in an if condition with an\nelse branch.\n### Why is this bad?\nNegations reduce the readability of statements.\n### Example\n\nif !v.is_empty() {\n    a()\n} else {\n    b()\n}\n\nCould be written:\n\nif v.is_empty() {\n    b()\n} else {\n    a()\n}\n",
        "if_same_then_else" => "### What it does\nChecks for `if/else` with the same body as the *then* part\nand the *else* part.\n### Why is this bad?\nThis is probably a copy & paste error.\n### Example\n\nlet foo = if … {\n    42\n} else {\n    42\n};\n",
        "if_then_some_else_none" => "### What it does\nChecks for if-else that could be written to `bool::then`.\n### Why is this bad?\nLooks a little redundant. Using `bool::then` helps it have less lines of code.\n### Example\n\nlet a = if v.is_empty() {\n    println!(\"true!\");\n    Some(42)\n} else {\n    None\n};\n\nCould be written:\n\nlet a = v.is_empty().then(|| {\n    println!(\"true!\");\n    42\n});\n",
        "ifs_same_cond" => "### What it does\nChecks for consecutive `if`s with the same condition.\n### Why is this bad?\nThis is probably a copy & paste error.\n### Example\n\nif a == b {\n    …\n} else if a == b {\n    …\n}\n\nNote that this lint ignores all conditions with a function call as it could\nhave side effects:\n\nif foo() {\n    …\n} else if foo() { // not linted\n    …\n}\n",
        "implicit_clone" => "### What it does\nChecks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be clearer.\n### Why is this bad?\nThese methods do the same thing as `_.clone()` but may be confusing as\nto why we are calling `to_vec` on something that is already a `Vec` or calling `to_owned` on something that is already owned.\n### Example\n\nlet a = vec![1, 2, 3];\nlet b = a.to_vec();\nlet c = a.to_owned();\n\nUse instead:\n\nlet a = vec![1, 2, 3];\nlet b = a.clone();\nlet c = a.clone();\n",
        "implicit_hasher" => "### What it does\nChecks for public `impl` or `fn` missing generalization\nover different hashers and implicitly defaulting to the default hashing\nalgorithm (`SipHash`).\n### Why is this bad?\n`HashMap` or `HashSet` with custom hashers cannot be\nused with them.\n### Known problems\nSuggestions for replacing constructors can contain\nfalse-positives. Also applying suggestions can require modification of other\npieces of code, possibly including external crates.\n### Example\n\nimpl<K: Hash + Eq, V> Serialize for HashMap<K, V> { }\npub fn foo(map: &mut HashMap<i32, i32>) { }\n\ncould be rewritten as\n\nimpl<K: Hash + Eq, V, S: BuildHasher> Serialize for HashMap<K, V, S> { }\npub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n",
        "implicit_return" => "### What it does\nChecks for missing return statements at the end of a block.\n### Why is this bad?\nActually omitting the return keyword is idiomatic Rust code. Programmers\ncoming from other languages might prefer the expressiveness of `return`. It's possible to miss\nthe last returning statement because the only difference is a missing `;`. Especially in bigger\ncode with multiple return paths having a `return` keyword makes it easier to find the\ncorresponding statements.\n### Example\n\nfn foo(x: usize) -> usize {\n    x\n}\n\nadd return\n\nfn foo(x: usize) -> usize {\n    return x;\n}\n",
        "implicit_saturating_sub" => "### What it does\nChecks for implicit saturating subtraction.\n### Why is this bad?\nSimplicity and readability. Instead we can easily use an builtin function.\n### Example\n\nlet end: u32 = 10;\nlet start: u32 = 5;\nlet mut i: u32 = end - start;\n// Bad\nif i != 0 {\n    i -= 1;\n}\n// Good\ni = i.saturating_sub(1);\n",
        "imprecise_flops" => "### What it does\nLooks for floating-point expressions that\ncan be expressed using built-in methods to improve accuracy\nat the cost of performance.\n### Why is this bad?\nNegatively impacts accuracy.\n### Example\n\nlet a = 3f32;\nlet _ = a.powf(1.0 / 3.0);\nlet _ = (1.0 + a).ln();\nlet _ = a.exp() - 1.0;\n\nUse instead:\n\nlet a = 3f32;\nlet _ = a.cbrt();\nlet _ = a.ln_1p();\nlet _ = a.exp_m1();\n",
        "inconsistent_digit_grouping" => "### What it does\nWarns if an integral or floating-point constant is\ngrouped inconsistently with underscores.\n### Why is this bad?\nReaders may incorrectly interpret inconsistently\ngrouped digits.\n### Example\n\n// Bad\nlet x: u64 = 618_64_9189_73_511;\n// Good\nlet x: u64 = 61_864_918_973_511;\n",
        "inconsistent_struct_constructor" => "### What it does\nChecks for struct constructors where all fields are shorthand and\nthe order of the field init shorthand in the constructor is inconsistent\nwith the order in the struct definition.\n### Why is this bad?\nSince the order of fields in a constructor doesn't affect the\nresulted instance as the below example indicates,\n\n#[derive(Debug, PartialEq, Eq)]\nstruct Foo {\n    x: i32,\n    y: i32,\n}\nlet x = 1;\nlet y = 2;\n// This assertion never fails:\nassert_eq!(Foo { x, y }, Foo { y, x });\n\ninconsistent order can be confusing and decreases readability and consistency.\n### Example\n\nstruct Foo {\n    x: i32,\n    y: i32,\n}\nlet x = 1;\nlet y = 2;\nFoo { y, x };\n\nUse instead:\n\nFoo { x, y };\n",
        "index_refutable_slice" => "### What it does\nThe lint checks for slice bindings in patterns that are only used to\naccess individual slice values.\n### Why is this bad?\nAccessing slice values using indices can lead to panics. Using refutable\npatterns can avoid these. Binding to individual values also improves the\nreadability as they can be named.\n### Limitations\nThis lint currently only checks for immutable access inside `if let`\npatterns.\n### Example\n\nlet slice: Option<&[u32]> = Some(&[1, 2, 3]);\nif let Some(slice) = slice {\n    println!(\"{}\", slice[0]);\n}\n\nUse instead:\n\nlet slice: Option<&[u32]> = Some(&[1, 2, 3]);\nif let Some(&[first, ..]) = slice {\n    println!(\"{}\", first);\n}\n",
        "indexing_slicing" => "### What it does\nChecks for usage of indexing or slicing. Arrays are special cases, this lint\ndoes report on arrays if we can tell that slicing operations are in bounds and does not\nlint on constant `usize` indexing on arrays because that is handled by rustc's `const_err` lint.\n### Why is this bad?\nIndexing and slicing can panic at runtime and there are\nsafe alternatives.\n### Known problems\nHopefully none.\n### Example\n\n// Vector\nlet x = vec![0; 5];\n// Bad\nx[2];\n&x[2..100];\n&x[2..];\n&x[..100];\n// Good\nx.get(2);\nx.get(2..100);\nx.get(2..);\nx.get(..100);\n// Array\nlet y = [0, 1, 2, 3];\n// Bad\n&y[10..100];\n&y[10..];\n&y[..100];\n// Good\n&y[2..];\n&y[..2];\n&y[0..3];\ny.get(10);\ny.get(10..100);\ny.get(10..);\ny.get(..100);\n",
        "ineffective_bit_mask" => "### What it does\nChecks for bit masks in comparisons which can be removed\nwithout changing the outcome. The basic structure can be seen in the\nfollowing table:\n|Comparison| Bit Op   |Example     |equals |\n|----------|----------|------------|-------|\n|`>` / `<=`|`\\|` / `^`|`x \\| 2 > 3`|`x > 3`|\n|`<` / `>=`|`\\|` / `^`|`x ^ 1 < 4` |`x < 4`|\n### Why is this bad?\nNot equally evil as [`bad_bit_mask`](#bad_bit_mask),\nbut still a bit misleading, because the bit mask is ineffective.\n### Known problems\nFalse negatives: This lint will only match instances\nwhere we have figured out the math (which is for a power-of-two compared\nvalue). This means things like `x | 1 >= 7` (which would be better written\nas `x >= 6`) will not be reported (but bit masks like this are fairly\nuncommon).\n### Example\n\nif (x | 1 > 3) {  }\n",
        "inefficient_to_string" => "### What it does\nChecks for usage of `.to_string()` on an `&&T` where\n`T` implements `ToString` directly (like `&&str` or `&&String`).\n### Why is this bad?\nThis bypasses the specialized implementation of\n`ToString` and instead goes through the more expensive string formatting\nfacilities.\n### Example\n\n// Generic implementation for `T: Display` is used (slow)\n[\"foo\", \"bar\"].iter().map(|s| s.to_string());\n// OK, the specialized impl is used\n[\"foo\", \"bar\"].iter().map(|&s| s.to_string());\n",
        "infallible_destructuring_match" => "### What it does\nChecks for matches being used to destructure a single-variant enum\nor tuple struct where a `let` will suffice.\n### Why is this bad?\nJust readability – `let` doesn't nest, whereas a `match` does.\n### Example\n\nenum Wrapper {\n    Data(i32),\n}\nlet wrapper = Wrapper::Data(42);\nlet data = match wrapper {\n    Wrapper::Data(i) => i,\n};\n\nThe correct use would be:\n\nenum Wrapper {\n    Data(i32),\n}\nlet wrapper = Wrapper::Data(42);\nlet Wrapper::Data(data) = wrapper;\n",
        "infinite_iter" => "### What it does\nChecks for iteration that is guaranteed to be infinite.\n### Why is this bad?\nWhile there may be places where this is acceptable\n(e.g., in event streams), in most cases this is simply an error.\n### Example\n\nuse std::iter;\niter::repeat(1_u8).collect::<Vec<_>>();\n",
        "inherent_to_string" => "### What it does\nChecks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n### Why is this bad?\nThis method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n### Known problems\nNone\n### Example\n\n// Bad\npub struct A;\nimpl A {\n    pub fn to_string(&self) -> String {\n        \"I am A\".to_string()\n    }\n}\n\n\n// Good\nuse std::fmt;\npub struct A;\nimpl fmt::Display for A {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"I am A\")\n    }\n}\n",
        "inherent_to_string_shadow_display" => "### What it does\nChecks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n### Why is this bad?\nThis method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n### Known problems\nNone\n### Example\n\n// Bad\nuse std::fmt;\npub struct A;\nimpl A {\n    pub fn to_string(&self) -> String {\n        \"I am A\".to_string()\n    }\n}\nimpl fmt::Display for A {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"I am A, too\")\n    }\n}\n\n\n// Good\nuse std::fmt;\npub struct A;\nimpl fmt::Display for A {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"I am A\")\n    }\n}\n",
        "init_numbered_fields" => "### What it does\nChecks for tuple structs initialized with field syntax.\nIt will however not lint if a base initializer is present.\nThe lint will also ignore code in macros.\n### Why is this bad?\nThis may be confusing to the uninitiated and adds no\nbenefit as opposed to tuple initializers\n### Example\n\nstruct TupleStruct(u8, u16);\nlet _ = TupleStruct {\n    0: 1,\n    1: 23,\n};\n// should be written as\nlet base = TupleStruct(1, 23);\n// This is OK however\nlet _ = TupleStruct { 0: 42, ..base };\n",
        "inline_always" => "### What it does\nChecks for items annotated with `#[inline(always)]`,\nunless the annotated function is empty or simply panics.\n### Why is this bad?\nWhile there are valid uses of this annotation (and once\nyou know when to use it, by all means `allow` this lint), it's a common\nnewbie-mistake to pepper one's code with it.\nAs a rule of thumb, before slapping `#[inline(always)]` on a function,\nmeasure if that additional function call really affects your runtime profile\nsufficiently to make up for the increase in compile time.\n### Known problems\nFalse positives, big time. This lint is meant to be\ndeactivated by everyone doing serious performance work. This means having\ndone the measurement.\n### Example\n\n#[inline(always)]\nfn not_quite_hot_code(..) { ... }\n",
        "inline_fn_without_body" => "### What it does\nChecks for `#[inline]` on trait methods without bodies\n### Why is this bad?\nOnly implementations of trait methods may be inlined.\nThe inline attribute is ignored for trait methods without bodies.\n### Example\n\ntrait Animal {\n    #[inline]\n    fn name(&self) -> &'static str;\n}\n",
        "inspect_for_each" => "### What it does\nChecks for usage of `inspect().for_each()`.\n### Why is this bad?\nIt is the same as performing the computation\ninside `inspect` at the beginning of the closure in `for_each`.\n### Example\n\n[1,2,3,4,5].iter()\n.inspect(|&x| println!(\"inspect the number: {}\", x))\n.for_each(|&x| {\n    assert!(x >= 0);\n});\n\nCan be written as\n\n[1,2,3,4,5].iter()\n.for_each(|&x| {\n    println!(\"inspect the number: {}\", x);\n    assert!(x >= 0);\n});\n",
        "int_plus_one" => "### What it does\nChecks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n### Why is this bad?\nReadability -- better to use `> y` instead of `>= y + 1`.\n### Example\n\nif x >= y + 1 {}\n\nCould be written as:\n\nif x > y {}\n",
        "integer_arithmetic" => "### What it does\nChecks for integer arithmetic operations which could overflow or panic.\nSpecifically, checks for any operators (`+`, `-`, `*`, `<<`, etc) which are capable\nof overflowing according to the [Rust\nReference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\nor which can panic (`/`, `%`). No bounds analysis or sophisticated reasoning is\nattempted.\n### Why is this bad?\nInteger overflow will trigger a panic in debug builds or will wrap in\nrelease mode. Division by zero will cause a panic in either mode. In some applications one\nwants explicitly checked, wrapping or saturating arithmetic.\n### Example\n\na + 1;\n",
        "integer_division" => "### What it does\nChecks for division of integers\n### Why is this bad?\nWhen outside of some very specific algorithms,\ninteger division is very often a mistake because it discards the\nremainder.\n### Example\n\n// Bad\nlet x = 3 / 2;\nprintln!(\"{}\", x);\n// Good\nlet x = 3f32 / 2f32;\nprintln!(\"{}\", x);\n",
        "internal_metadata_collector" => "### What it does\nCollects metadata about clippy lints for the website.\nThis lint will be used to report problems of syntax parsing. You should hopefully never\nsee this but never say never I guess ^^\n### Why is this bad?\nThis is not a bad thing but definitely a hacky way to do it. See\nissue [#4310](https://github.com/rust-lang/rust-clippy/issues/4310) for a discussion\nabout the implementation.\n### Known problems\nHopefully none. It would be pretty uncool to have a problem here :)\n### Example output\n\n{\n    \"id\": \"internal_metadata_collector\",\n    \"id_span\": {\n        \"path\": \"clippy_lints/src/utils/internal_lints/metadata_collector.rs\",\n        \"line\": 1\n    },\n    \"group\": \"clippy::internal\",\n    \"docs\": \" ### What it does\\nCollects metadata about clippy lints for the website. [...] \"\n}\n",
        "interning_defined_symbol" => "### What it does\nChecks for interning symbols that have already been pre-interned and defined as constants.\n### Why is this bad?\nIt's faster and easier to use the symbol constant.\n### Example\nBad:\n\nlet _ = sym!(f32);\n\nGood:\n\nlet _ = sym::f32;\n",
        "into_iter_on_ref" => "### What it does\nChecks for `into_iter` calls on references which should be replaced by `iter`\nor `iter_mut`.\n### Why is this bad?\nReadability. Calling `into_iter` on a reference will not move out its\ncontent into the resulting iterator, which is confusing. It is better just call `iter` or\n`iter_mut` directly.\n### Example\n\n// Bad\nlet _ = (&vec![3, 4, 5]).into_iter();\n// Good\nlet _ = (&vec![3, 4, 5]).iter();\n",
        "invalid_clippy_version_attribute" => "### What it does\nChecks for invalid `clippy::version` attributes.\nValid values are:\n* \"pre 1.29.0\"\n* any valid semantic version",
        "invalid_null_ptr_usage" => "### What it does\nThis lint checks for invalid usages of `ptr::null`.\n### Why is this bad?\nThis causes undefined behavior.\n### Example\n\n// Bad. Undefined behavior\nunsafe { std::slice::from_raw_parts(ptr::null(), 0); }\n\n\n// Good\nunsafe { std::slice::from_raw_parts(NonNull::dangling().as_ptr(), 0); }\n",
        "invalid_paths" => "### What it does\nChecks the paths module for invalid paths.\n### Why is this bad?\nIt indicates a bug in the code.\n### Example\nNone.",
        "invalid_regex" => "### What it does\nChecks [regex](https://crates.io/crates/regex) creation\n(with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`) for correct\nregex syntax.\n### Why is this bad?\nThis will lead to a runtime panic.\n### Example\n\nRegex::new(\"|\")\n",
        "invalid_upcast_comparisons" => "### What it does\nChecks for comparisons where the relation is always either\ntrue or false, but where one side has been upcast so that the comparison is\nnecessary. Only integer types are checked.\n### Why is this bad?\nAn expression like `let x : u8 = ...; (x as u32) > 300`\nwill mistakenly imply that it is possible for `x` to be outside the range of\n`u8`.\n### Known problems\nhttps://github.com/rust-lang/rust-clippy/issues/886\n### Example\n\nlet x: u8 = 1;\n(x as u32) > 300;\n",
        "invisible_characters" => "### What it does\nChecks for invisible Unicode characters in the code.\n### Why is this bad?\nHaving an invisible character in the code makes for all\nsorts of April fools, but otherwise is very much frowned upon.\n### Example\nYou don't see it, but there may be a zero-width space or soft hyphen\nsome\u{ad}where in this text.",
        "is_digit_ascii_radix" => "### What it does\nFinds usages of [`char::is_digit`]\n(https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_digit) that\ncan be replaced with [`is_ascii_digit`]\n(https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_digit) or\n[`is_ascii_hexdigit`]\n(https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_hexdigit).\n### Why is this bad?\n`is_digit(..)` is slower and requires specifying the radix.\n### Example\n\nlet c: char = '6';\nc.is_digit(10);\nc.is_digit(16);\n\nUse instead:\n\nlet c: char = '6';\nc.is_ascii_digit();\nc.is_ascii_hexdigit();\n",
        "items_after_statements" => "### What it does\nChecks for items declared after some statement in a block.\n### Why is this bad?\nItems live for the entire scope they are declared\nin. But statements are processed in order. This might cause confusion as\nit's hard to figure out which item is meant in a statement.\n### Example\n\n// Bad\nfn foo() {\n    println!(\"cake\");\n}\nfn main() {\n    foo(); // prints \"foo\"\n    fn foo() {\n        println!(\"foo\");\n    }\n    foo(); // prints \"foo\"\n}\n\n\n// Good\nfn foo() {\n    println!(\"cake\");\n}\nfn main() {\n    fn foo() {\n        println!(\"foo\");\n    }\n    foo(); // prints \"foo\"\n    foo(); // prints \"foo\"\n}\n",
        "iter_cloned_collect" => "### What it does\nChecks for the use of `.cloned().collect()` on slice to\ncreate a `Vec`.\n### Why is this bad?\n`.to_vec()` is clearer\n### Example\n\nlet s = [1, 2, 3, 4, 5];\nlet s2: Vec<isize> = s[..].iter().cloned().collect();\n\nThe better use would be:\n\nlet s = [1, 2, 3, 4, 5];\nlet s2: Vec<isize> = s.to_vec();\n",
        "iter_count" => "### What it does\nChecks for the use of `.iter().count()`.\n### Why is this bad?\n`.len()` is more efficient and more\nreadable.\n### Example\n\n// Bad\nlet some_vec = vec![0, 1, 2, 3];\nlet _ = some_vec.iter().count();\nlet _ = &some_vec[..].iter().count();\n// Good\nlet some_vec = vec![0, 1, 2, 3];\nlet _ = some_vec.len();\nlet _ = &some_vec[..].len();\n",
        "iter_next_loop" => "### What it does\nChecks for loops on `x.next()`.\n### Why is this bad?\n`next()` returns either `Some(value)` if there was a\nvalue, or `None` otherwise. The insidious thing is that `Option<_>`\nimplements `IntoIterator`, so that possibly one value will be iterated,\nleading to some hard to find bugs. No one will want to write such code\n[except to win an Underhanded Rust\nContest](https://www.reddit.com/r/rust/comments/3hb0wm/underhanded_rust_contest/cu5yuhr).\n### Example\n\nfor x in y.next() {\n    ..\n}\n",
        "iter_next_slice" => "### What it does\nChecks for usage of `iter().next()` on a Slice or an Array\n### Why is this bad?\nThese can be shortened into `.get()`\n### Example\n\na[2..].iter().next();\nb.iter().next();\n\nshould be written as:\n\na.get(2);\nb.get(0);\n",
        "iter_not_returning_iterator" => "### What it does\nDetects methods named `iter` or `iter_mut` that do not have a return type that implements `Iterator`.\n### Why is this bad?\nMethods named `iter` or `iter_mut` conventionally return an `Iterator`.\n### Example\n\n// `String` does not implement `Iterator`\nstruct Data {}\nimpl Data {\n    fn iter(&self) -> String {\n        todo!()\n    }\n}\n\nUse instead:\n\nuse std::str::Chars;\nstruct Data {}\nimpl Data {\n   fn iter(&self) -> Chars<'static> {\n       todo!()\n   }\n}\n",
        "iter_nth" => "### What it does\nChecks for use of `.iter().nth()` (and the related\n`.iter_mut().nth()`) on standard library types with *O*(1) element access.\n### Why is this bad?\n`.get()` and `.get_mut()` are more efficient and more\nreadable.\n### Example\n\nlet some_vec = vec![0, 1, 2, 3];\nlet bad_vec = some_vec.iter().nth(3);\nlet bad_slice = &some_vec[..].iter().nth(3);\n\nThe correct use would be:\n\nlet some_vec = vec![0, 1, 2, 3];\nlet bad_vec = some_vec.get(3);\nlet bad_slice = &some_vec[..].get(3);\n",
        "iter_nth_zero" => "### What it does\nChecks for the use of `iter.nth(0)`.\n### Why is this bad?\n`iter.next()` is equivalent to\n`iter.nth(0)`, as they both consume the next element,\n but is more readable.\n### Example\n\n// Bad\nlet x = s.iter().nth(0);\n// Good\nlet x = s.iter().next();\n",
        "iter_overeager_cloned" => "### What it does\nChecks for usage of `_.cloned().<func>()` where call to `.cloned()` can be postponed.\n### Why is this bad?\nIt's often inefficient to clone all elements of an iterator, when eventually, only some\nof them will be consumed.\n### Examples\n\n// Bad\nvec.iter().cloned().take(10);\n// Good\nvec.iter().take(10).cloned();\n// Bad\nvec.iter().cloned().last();\n// Good\nvec.iter().last().cloned();\n\n### Known Problems\nThis `lint` removes the side of effect of cloning items in the iterator.\nA code that relies on that side-effect could fail.",
        "iter_skip_next" => "### What it does\nChecks for use of `.skip(x).next()` on iterators.\n### Why is this bad?\n`.nth(x)` is cleaner\n### Example\n\nlet some_vec = vec![0, 1, 2, 3];\nlet bad_vec = some_vec.iter().skip(3).next();\nlet bad_slice = &some_vec[..].iter().skip(3).next();\n\nThe correct use would be:\n\nlet some_vec = vec![0, 1, 2, 3];\nlet bad_vec = some_vec.iter().nth(3);\nlet bad_slice = &some_vec[..].iter().nth(3);\n",
        "iter_with_drain" => "### What it does\nChecks for use of `.drain(..)` on `Vec` and `VecDeque` for iteration.\n### Why is this bad?\n`.into_iter()` is simpler with better performance.\n### Example\n\nlet mut foo = vec![0, 1, 2, 3];\nlet bar: HashSet<usize> = foo.drain(..).collect();\n\nUse instead:\n\nlet foo = vec![0, 1, 2, 3];\nlet bar: HashSet<usize> = foo.into_iter().collect();\n",
        "iterator_step_by_zero" => "### What it does\nChecks for calling `.step_by(0)` on iterators which panics.\n### Why is this bad?\nThis very much looks like an oversight. Use `panic!()` instead if you\nactually intend to panic.\n### Example\n\nfor x in (0..100).step_by(0) {\n    //..\n}\n",
        "just_underscores_and_digits" => "### What it does\nChecks if you have variables whose name consists of just\nunderscores and digits.\n### Why is this bad?\nIt's hard to memorize what a variable means without a\ndescriptive name.\n### Example\n\nlet _1 = 1;\nlet ___1 = 1;\nlet __1___2 = 11;\n",
        "large_const_arrays" => "### What it does\nChecks for large `const` arrays that should\nbe defined as `static` instead.\n### Why is this bad?\nPerformance: const variables are inlined upon use.\nStatic items result in only one instance and has a fixed location in memory.\n### Example\n\n// Bad\npub const a = [0u32; 1_000_000];\n// Good\npub static a = [0u32; 1_000_000];\n",
        "large_digit_groups" => "### What it does\nWarns if the digits of an integral or floating-point\nconstant are grouped into groups that\nare too large.\n### Why is this bad?\nNegatively impacts readability.\n### Example\n\nlet x: u64 = 6186491_8973511;\n",
        "large_enum_variant" => "### What it does\nChecks for large size differences between variants on\n`enum`s.\n### Why is this bad?\nEnum size is bounded by the largest variant. Having a\nlarge variant can penalize the memory layout of that enum.\n### Known problems\nThis lint obviously cannot take the distribution of\nvariants in your running program into account. It is possible that the\nsmaller variants make up less than 1% of all instances, in which case\nthe overhead is negligible and the boxing is counter-productive. Always\nmeasure the change this lint suggests.\nFor types that implement `Copy`, the suggestion to `Box` a variant's\ndata would require removing the trait impl. The types can of course\nstill be `Clone`, but that is worse ergonomically. Depending on the\nuse case it may be possible to store the large data in an auxillary\nstructure (e.g. Arena or ECS).\nThe lint will ignore generic types if the layout depends on the\ngenerics, even if the size difference will be large anyway.\n### Example\n\n// Bad\nenum Test {\n    A(i32),\n    B([i32; 8000]),\n}\n// Possibly better\nenum Test2 {\n    A(i32),\n    B(Box<[i32; 8000]>),\n}\n",
        "large_include_file" => "### What it does\nChecks for the inclusion of large files via `include_bytes!()`\nand `include_str!()`\n### Why is this bad?\nIncluding large files can increase the size of the binary\n### Example\n\nlet included_str = include_str!(\"very_large_file.txt\");\nlet included_bytes = include_bytes!(\"very_large_file.txt\");\n\nInstead, you can load the file at runtime:\n\nuse std::fs;\nlet string = fs::read_to_string(\"very_large_file.txt\")?;\nlet bytes = fs::read(\"very_large_file.txt\")?;\n",
        "large_stack_arrays" => "### What it does\nChecks for local arrays that may be too large.\n### Why is this bad?\nLarge local arrays may cause stack overflow.\n### Example\n\nlet a = [0u32; 1_000_000];\n",
        "large_types_passed_by_value" => "### What it does\nChecks for functions taking arguments by value, where\nthe argument type is `Copy` and large enough to be worth considering\npassing by reference. Does not trigger if the function is being exported,\nbecause that might induce API breakage, if the parameter is declared as mutable,\nor if the argument is a `self`.\n### Why is this bad?\nArguments passed by value might result in an unnecessary\nshallow copy, taking up more space in the stack and requiring a call to\n`memcpy`, which can be expensive.\n### Example\n\n#[derive(Clone, Copy)]\nstruct TooLarge([u8; 2048]);\n// Bad\nfn foo(v: TooLarge) {}\n\n\n#[derive(Clone, Copy)]\nstruct TooLarge([u8; 2048]);\n// Good\nfn foo(v: &TooLarge) {}\n",
        "len_without_is_empty" => "### What it does\nChecks for items that implement `.len()` but not\n`.is_empty()`.\n### Why is this bad?\nIt is good custom to have both methods, because for\nsome data structures, asking about the length will be a costly operation,\nwhereas `.is_empty()` can usually answer in constant time. Also it used to\nlead to false positives on the [`len_zero`](#len_zero) lint – currently that\nlint will ignore such entities.\n### Example\n\nimpl X {\n    pub fn len(&self) -> usize {\n        ..\n    }\n}\n",
        "len_zero" => "### What it does\nChecks for getting the length of something via `.len()`\njust to compare to zero, and suggests using `.is_empty()` where applicable.\n### Why is this bad?\nSome structures can answer `.is_empty()` much faster\nthan calculating their length. So it is good to get into the habit of using\n`.is_empty()`, and having it is cheap.\nBesides, it makes the intent clearer than a manual comparison in some contexts.\n### Example\n\nif x.len() == 0 {\n    ..\n}\nif y.len() != 0 {\n    ..\n}\n\ninstead use\n\nif x.is_empty() {\n    ..\n}\nif !y.is_empty() {\n    ..\n}\n",
        "let_and_return" => "### What it does\nChecks for `let`-bindings, which are subsequently\nreturned.\n### Why is this bad?\nIt is just extraneous code. Remove it to make your code\nmore rusty.\n### Example\n\nfn foo() -> String {\n    let x = String::new();\n    x\n}\n\ninstead, use\n\nfn foo() -> String {\n    String::new()\n}\n",
        "let_underscore_drop" => "### What it does\nChecks for `let _ = <expr>`\nwhere expr has a type that implements `Drop`\n### Why is this bad?\nThis statement immediately drops the initializer\nexpression instead of extending its lifetime to the end of the scope, which\nis often not intended. To extend the expression's lifetime to the end of the\nscope, use an underscore-prefixed name instead (i.e. _var). If you want to\nexplicitly drop the expression, `std::mem::drop` conveys your intention\nbetter and is less error-prone.\n### Example\nBad:\n\nstruct Droppable;\nimpl Drop for Droppable {\n    fn drop(&mut self) {}\n}\n{\n    let _ = Droppable;\n    //               ^ dropped here\n    /* more code */\n}\n\nGood:\n\n{\n    let _droppable = Droppable;\n    /* more code */\n    // dropped at end of scope\n}\n",
        "let_underscore_lock" => "### What it does\nChecks for `let _ = sync_lock`.\nThis supports `mutex` and `rwlock` in `std::sync` and `parking_lot`.\n### Why is this bad?\nThis statement immediately drops the lock instead of\nextending its lifetime to the end of the scope, which is often not intended.\nTo extend lock lifetime to the end of the scope, use an underscore-prefixed\nname instead (i.e. _lock). If you want to explicitly drop the lock,\n`std::mem::drop` conveys your intention better and is less error-prone.\n### Example\nBad:\n\nlet _ = mutex.lock();\n\nGood:\n\nlet _lock = mutex.lock();\n",
        "let_underscore_must_use" => "### What it does\nChecks for `let _ = <expr>` where expr is `#[must_use]`\n### Why is this bad?\nIt's better to explicitly handle the value of a `#[must_use]`\nexpr\n### Example\n\nfn f() -> Result<u32, u32> {\n    Ok(0)\n}\nlet _ = f();\n// is_ok() is marked #[must_use]\nlet _ = f().is_ok();\n",
        "let_unit_value" => "### What it does\nChecks for binding a unit value.\n### Why is this bad?\nA unit value cannot usefully be used anywhere. So\nbinding one is kind of pointless.\n### Example\n\nlet x = {\n    1;\n};\n",
        "linkedlist" => "### What it does\nChecks for usage of any `LinkedList`, suggesting to use a\n`Vec` or a `VecDeque` (formerly called `RingBuf`).\n### Why is this bad?\nGankro says:\n> The TL;DR of `LinkedList` is that it's built on a massive amount of\npointers and indirection.\n> It wastes memory, it has terrible cache locality, and is all-around slow.\n`RingBuf`, while\n> \"only\" amortized for push/pop, should be faster in the general case for\nalmost every possible\n> workload, and isn't even amortized at all if you can predict the capacity\nyou need.\n>\n> `LinkedList`s are only really good if you're doing a lot of merging or\nsplitting of lists.\n> This is because they can just mangle some pointers instead of actually\ncopying the data. Even\n> if you're doing a lot of insertion in the middle of the list, `RingBuf`\ncan still be better\n> because of how expensive it is to seek to the middle of a `LinkedList`.\n### Known problems\nFalse positives – the instances where using a\n`LinkedList` makes sense are few and far between, but they can still happen.\n### Example\n\nlet x: LinkedList<usize> = LinkedList::new();\n",
        "lint_author" => "### What it does\nGenerates clippy code that detects the offending pattern\n### Example\n\n// ./tests/ui/my_lint.rs\nfn foo() {\n    // detect the following pattern\n    #[clippy::author]\n    if x == 42 {\n        // but ignore everything from here on\n        #![clippy::author = \"ignore\"]\n    }\n    ()\n}\n\nRunning `TESTNAME=ui/my_lint cargo uitest` will produce\na `./tests/ui/new_lint.stdout` file with the generated code:\n\n// ./tests/ui/new_lint.stdout\nif_chain! {\n    if let ExprKind::If(ref cond, ref then, None) = item.kind,\n    if let ExprKind::Binary(BinOp::Eq, ref left, ref right) = cond.kind,\n    if let ExprKind::Path(ref path) = left.kind,\n    if let ExprKind::Lit(ref lit) = right.kind,\n    if let LitKind::Int(42, _) = lit.node,\n    then {\n        // report your lint here\n    }\n}\n",
        "lint_without_lint_pass" => "### What it does\nEnsures every lint is associated to a `LintPass`.\n### Why is this bad?\nThe compiler only knows lints via a `LintPass`. Without\nputting a lint to a `LintPass::get_lints()`'s return, the compiler will not\nknow the name of the lint.\n### Known problems\nOnly checks for lints associated using the\n`declare_lint_pass!`, `impl_lint_pass!`, and `lint_array!` macros.\n### Example\n\ndeclare_lint! { pub LINT_1, ... }\ndeclare_lint! { pub LINT_2, ... }\ndeclare_lint! { pub FORGOTTEN_LINT, ... }\n// ...\ndeclare_lint_pass!(Pass => [LINT_1, LINT_2]);\n// missing FORGOTTEN_LINT\n",
        "logic_bug" => "### What it does\nChecks for boolean expressions that contain terminals that\ncan be eliminated.\n### Why is this bad?\nThis is most likely a logic bug.\n### Known problems\nIgnores short circuiting behavior.\n### Example\n\n// The `b` is unnecessary, the expression is equivalent to `if a`.\nif a && b || a { ... }\n\nUse instead:\n\nif a {}\n",
        "lossy_float_literal" => "### What it does\nChecks for whole number float literals that\ncannot be represented as the underlying type without loss.\n### Why is this bad?\nRust will silently lose precision during\nconversion to a float.\n### Example\n\n// Bad\nlet _: f32 = 16_777_217.0; // 16_777_216.0\n// Good\nlet _: f32 = 16_777_216.0;\nlet _: f64 = 16_777_217.0;\n",
        "macro_use_imports" => "### What it does\nChecks for `#[macro_use] use...`.\n### Why is this bad?\nSince the Rust 2018 edition you can import\nmacro's directly, this is considered idiomatic.\n### Example\n\n#[macro_use]\nuse some_macro;\n",
        "main_recursion" => "### What it does\nChecks for recursion using the entrypoint.\n### Why is this bad?\nApart from special setups (which we could detect following attributes like #![no_std]),\nrecursing into main() seems like an unintuitive anti-pattern we should be able to detect.\n### Example\n\nfn main() {\n    main();\n}\n",
        "manual_assert" => "### What it does\nDetects `if`-then-`panic!` that can be replaced with `assert!`.\n### Why is this bad?\n`assert!` is simpler than `if`-then-`panic!`.\n### Example\n\nlet sad_people: Vec<&str> = vec![];\nif !sad_people.is_empty() {\n    panic!(\"there are sad people: {:?}\", sad_people);\n}\n\nUse instead:\n\nlet sad_people: Vec<&str> = vec![];\nassert!(sad_people.is_empty(), \"there are sad people: {:?}\", sad_people);\n",
        "manual_async_fn" => "### What it does\nIt checks for manual implementations of `async` functions.\n### Why is this bad?\nIt's more idiomatic to use the dedicated syntax.\n### Example\n\nuse std::future::Future;\nfn foo() -> impl Future<Output = i32> { async { 42 } }\n\nUse instead:\n\nasync fn foo() -> i32 { 42 }\n",
        "manual_bits" => "### What it does\nChecks for uses of `std::mem::size_of::<T>() * 8` when\n`T::BITS` is available.\n### Why is this bad?\nCan be written as the shorter `T::BITS`.\n### Example\n\nstd::mem::size_of::<usize>() * 8;\n\nUse instead:\n\nusize::BITS as usize;\n",
        "manual_filter_map" => "### What it does\nChecks for usage of `_.filter(_).map(_)` that can be written more simply\nas `filter_map(_)`.\n### Why is this bad?\nRedundant code in the `filter` and `map` operations is poor style and\nless performant.\n### Example\nBad:\n\n(0_i32..10)\n    .filter(|n| n.checked_add(1).is_some())\n    .map(|n| n.checked_add(1).unwrap());\n\nGood:\n\n(0_i32..10).filter_map(|n| n.checked_add(1));\n",
        "manual_find_map" => "### What it does\nChecks for usage of `_.find(_).map(_)` that can be written more simply\nas `find_map(_)`.\n### Why is this bad?\nRedundant code in the `find` and `map` operations is poor style and\nless performant.\n### Example\nBad:\n\n(0_i32..10)\n    .find(|n| n.checked_add(1).is_some())\n    .map(|n| n.checked_add(1).unwrap());\n\nGood:\n\n(0_i32..10).find_map(|n| n.checked_add(1));\n",
        "manual_flatten" => "### What it does\nCheck for unnecessary `if let` usage in a for loop\nwhere only the `Some` or `Ok` variant of the iterator element is used.\n### Why is this bad?\nIt is verbose and can be simplified\nby first calling the `flatten` method on the `Iterator`.\n### Example\n\nlet x = vec![Some(1), Some(2), Some(3)];\nfor n in x {\n    if let Some(n) = n {\n        println!(\"{}\", n);\n    }\n}\n\nUse instead:\n\nlet x = vec![Some(1), Some(2), Some(3)];\nfor n in x.into_iter().flatten() {\n    println!(\"{}\", n);\n}\n",
        "manual_map" => "### What it does\nChecks for usages of `match` which could be implemented using `map`\n### Why is this bad?\nUsing the `map` method is clearer and more concise.\n### Example\n\nmatch Some(0) {\n    Some(x) => Some(x + 1),\n    None => None,\n};\n\nUse instead:\n\nSome(0).map(|x| x + 1);\n",
        "manual_memcpy" => "### What it does\nChecks for for-loops that manually copy items between\nslices that could be optimized by having a memcpy.\n### Why is this bad?\nIt is not as fast as a memcpy.\n### Example\n\nfor i in 0..src.len() {\n    dst[i + 64] = src[i];\n}\n\nCould be written as:\n\ndst[64..(src.len() + 64)].clone_from_slice(&src[..]);\n",
        "manual_non_exhaustive" => "### What it does\nChecks for manual implementations of the non-exhaustive pattern.\n### Why is this bad?\nUsing the #[non_exhaustive] attribute expresses better the intent\nand allows possible optimizations when applied to enums.\n### Example\n\nstruct S {\n    pub a: i32,\n    pub b: i32,\n    _c: (),\n}\nenum E {\n    A,\n    B,\n    #[doc(hidden)]\n    _C,\n}\nstruct T(pub i32, pub i32, ());\n\nUse instead:\n\n#[non_exhaustive]\nstruct S {\n    pub a: i32,\n    pub b: i32,\n}\n#[non_exhaustive]\nenum E {\n    A,\n    B,\n}\n#[non_exhaustive]\nstruct T(pub i32, pub i32);\n",
        "manual_ok_or" => "### What it does\nFinds patterns that reimplement `Option::ok_or`.\n### Why is this bad?\nConcise code helps focusing on behavior instead of boilerplate.\n### Examples\n\nlet foo: Option<i32> = None;\nfoo.map_or(Err(\"error\"), |v| Ok(v));\n\nUse instead:\n\nlet foo: Option<i32> = None;\nfoo.ok_or(\"error\");\n",
        "manual_range_contains" => "### What it does\nChecks for expressions like `x >= 3 && x < 8` that could\nbe more readably expressed as `(3..8).contains(x)`.\n### Why is this bad?\n`contains` expresses the intent better and has less\nfailure modes (such as fencepost errors or using `||` instead of `&&`).\n### Example\n\n// given\nlet x = 6;\nassert!(x >= 3 && x < 8);\n\nUse instead:\n\nassert!((3..8).contains(&x));\n",
        "manual_saturating_arithmetic" => "### What it does\nChecks for `.checked_add/sub(x).unwrap_or(MAX/MIN)`.\n### Why is this bad?\nThese can be written simply with `saturating_add/sub` methods.\n### Example\n\nlet add = x.checked_add(y).unwrap_or(u32::MAX);\nlet sub = x.checked_sub(y).unwrap_or(u32::MIN);\n\ncan be written using dedicated methods for saturating addition/subtraction as:\n\nlet add = x.saturating_add(y);\nlet sub = x.saturating_sub(y);\n",
        "manual_split_once" => "### What it does\nChecks for usages of `str::splitn(2, _)`\n### Why is this bad?\n`split_once` is both clearer in intent and slightly more efficient.\n### Example\n\n// Bad\nlet s = \"key=value=add\";\nlet (key, value) = s.splitn(2, '=').next_tuple()?;\nlet value = s.splitn(2, '=').nth(1)?;\nlet mut parts = s.splitn(2, '=');\nlet key = parts.next()?;\nlet value = parts.next()?;\n\nUse instead:\n\n// Good\nlet s = \"key=value=add\";\nlet (key, value) = s.split_once('=')?;\nlet value = s.split_once('=')?.1;\nlet (key, value) = s.split_once('=')?;\n\n### Limitations\nThe multiple statement variant currently only detects `iter.next()?`/`iter.next().unwrap()`\nin two separate `let` statements that immediately follow the `splitn()`",
        "manual_str_repeat" => "### What it does\nChecks for manual implementations of `str::repeat`\n### Why is this bad?\nThese are both harder to read, as well as less performant.\n### Example\n\n// Bad\nlet x: String = std::iter::repeat('x').take(10).collect();\n// Good\nlet x: String = \"x\".repeat(10);\n",
        "manual_strip" => "### What it does\nSuggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using\nthe pattern's length.\n### Why is this bad?\nUsing `str:strip_{prefix,suffix}` is safer and may have better performance as there is no\nslicing which may panic and the compiler does not need to insert this panic code. It is\nalso sometimes more readable as it removes the need for duplicating or storing the pattern\nused by `str::{starts,ends}_with` and in the slicing.\n### Example\n\nlet s = \"hello, world!\";\nif s.starts_with(\"hello, \") {\n    assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n}\n\nUse instead:\n\nlet s = \"hello, world!\";\nif let Some(end) = s.strip_prefix(\"hello, \") {\n    assert_eq!(end.to_uppercase(), \"WORLD!\");\n}\n",
        "manual_swap" => "### What it does\nChecks for manual swapping.\n### Why is this bad?\nThe `std::mem::swap` function exposes the intent better\nwithout deinitializing or copying either variable.\n### Example\n\nlet mut a = 42;\nlet mut b = 1337;\nlet t = b;\nb = a;\na = t;\n\nUse std::mem::swap():\n\nlet mut a = 1;\nlet mut b = 2;\nstd::mem::swap(&mut a, &mut b);\n",
        "manual_unwrap_or" => "### What it does\nFinds patterns that reimplement `Option::unwrap_or` or `Result::unwrap_or`.\n### Why is this bad?\nConcise code helps focusing on behavior instead of boilerplate.\n### Example\n\nlet foo: Option<i32> = None;\nmatch foo {\n    Some(v) => v,\n    None => 1,\n};\n\nUse instead:\n\nlet foo: Option<i32> = None;\nfoo.unwrap_or(1);\n",
        "many_single_char_names" => "### What it does\nChecks for too many variables whose name consists of a\nsingle character.\n### Why is this bad?\nIt's hard to memorize what a variable means without a\ndescriptive name.\n### Example\n\nlet (a, b, c, d, e, f, g) = (...);\n",
        "map_clone" => "### What it does\nChecks for usage of `map(|x| x.clone())` or\ndereferencing closures for `Copy` types, on `Iterator` or `Option`,\nand suggests `cloned()` or `copied()` instead\n### Why is this bad?\nReadability, this can be written more concisely\n### Example\n\nlet x = vec![42, 43];\nlet y = x.iter();\nlet z = y.map(|i| *i);\n\nThe correct use would be:\n\nlet x = vec![42, 43];\nlet y = x.iter();\nlet z = y.cloned();\n",
        "map_collect_result_unit" => "### What it does\nChecks for usage of `_.map(_).collect::<Result<(), _>()`.\n### Why is this bad?\nUsing `try_for_each` instead is more readable and idiomatic.\n### Example\n\n(0..3).map(|t| Err(t)).collect::<Result<(), _>>();\n\nUse instead:\n\n(0..3).try_for_each(|t| Err(t));\n",
        "map_entry" => "### What it does\nChecks for uses of `contains_key` + `insert` on `HashMap`\nor `BTreeMap`.\n### Why is this bad?\nUsing `entry` is more efficient.\n### Known problems\nThe suggestion may have type inference errors in some cases. e.g.\n\nlet mut map = std::collections::HashMap::new();\nlet _ = if !map.contains_key(&0) {\n    map.insert(0, 0)\n} else {\n    None\n};\n\n### Example\n\nif !map.contains_key(&k) {\n    map.insert(k, v);\n}\n\nUse instead:\n\nmap.entry(k).or_insert(v);\n",
        "map_err_ignore" => "### What it does\nChecks for instances of `map_err(|_| Some::Enum)`\n### Why is this bad?\nThis `map_err` throws away the original error rather than allowing the enum to contain and report the cause of the error\n### Example\nBefore:\n\nuse std::fmt;\n#[derive(Debug)]\nenum Error {\n    Indivisible,\n    Remainder(u8),\n}\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match self {\n            Error::Indivisible => write!(f, \"could not divide input by three\"),\n            Error::Remainder(remainder) => write!(\n                f,\n                \"input is not divisible by three, remainder = {}\",\n                remainder\n            ),\n        }\n    }\n}\nimpl std::error::Error for Error {}\nfn divisible_by_3(input: &str) -> Result<(), Error> {\n    input\n        .parse::<i32>()\n        .map_err(|_| Error::Indivisible)\n        .map(|v| v % 3)\n        .and_then(|remainder| {\n            if remainder == 0 {\n                Ok(())\n            } else {\n                Err(Error::Remainder(remainder as u8))\n            }\n        })\n}\n ```\n After:\n ```rust\nuse std::{fmt, num::ParseIntError};\n#[derive(Debug)]\nenum Error {\n    Indivisible(ParseIntError),\n    Remainder(u8),\n}\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match self {\n            Error::Indivisible(_) => write!(f, \"could not divide input by three\"),\n            Error::Remainder(remainder) => write!(\n                f,\n                \"input is not divisible by three, remainder = {}\",\n                remainder\n            ),\n        }\n    }\n}\nimpl std::error::Error for Error {\n    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n        match self {\n            Error::Indivisible(source) => Some(source),\n            _ => None,\n        }\n    }\n}\nfn divisible_by_3(input: &str) -> Result<(), Error> {\n    input\n        .parse::<i32>()\n        .map_err(Error::Indivisible)\n        .map(|v| v % 3)\n        .and_then(|remainder| {\n            if remainder == 0 {\n                Ok(())\n            } else {\n                Err(Error::Remainder(remainder as u8))\n            }\n        })\n}\n",
        "map_flatten" => "### What it does\nChecks for usage of `_.map(_).flatten(_)` on `Iterator` and `Option`\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.flat_map(_)` for `Iterator` or `_.and_then(_)` for `Option`\n### Example\n\nlet vec = vec![vec![1]];\nlet opt = Some(5);\n// Bad\nvec.iter().map(|x| x.iter()).flatten();\nopt.map(|x| Some(x * 2)).flatten();\n// Good\nvec.iter().flat_map(|x| x.iter());\nopt.and_then(|x| Some(x * 2));\n",
        "map_identity" => "### What it does\nChecks for instances of `map(f)` where `f` is the identity function.\n### Why is this bad?\nIt can be written more concisely without the call to `map`.\n### Example\n\nlet x = [1, 2, 3];\nlet y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n\nUse instead:\n\nlet x = [1, 2, 3];\nlet y: Vec<_> = x.iter().map(|x| 2*x).collect();\n",
        "map_unwrap_or" => "### What it does\nChecks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n`result.map(_).unwrap_or_else(_)`.\n### Why is this bad?\nReadability, these can be written more concisely (resp.) as\n`option.map_or(_, _)`, `option.map_or_else(_, _)` and `result.map_or_else(_, _)`.\n### Known problems\nThe order of the arguments is not in execution order\n### Examples\n\noption.map(|a| a + 1).unwrap_or(0);\nresult.map(|a| a + 1).unwrap_or_else(some_function);\n\nUse instead:\n\noption.map_or(0, |a| a + 1);\nresult.map_or_else(some_function, |a| a + 1);\n",
        "match_as_ref" => "### What it does\nChecks for match which is used to add a reference to an\n`Option` value.\n### Why is this bad?\nUsing `as_ref()` or `as_mut()` instead is shorter.\n### Example\n\nlet x: Option<()> = None;\n// Bad\nlet r: Option<&()> = match x {\n    None => None,\n    Some(ref v) => Some(v),\n};\n// Good\nlet r: Option<&()> = x.as_ref();\n",
        "match_bool" => "### What it does\nChecks for matches where match expression is a `bool`. It\nsuggests to replace the expression with an `if...else` block.\n### Why is this bad?\nIt makes the code less readable.\n### Example\n\nlet condition: bool = true;\nmatch condition {\n    true => foo(),\n    false => bar(),\n}\n\nUse if/else instead:\n\nlet condition: bool = true;\nif condition {\n    foo();\n} else {\n    bar();\n}\n",
        "match_like_matches_macro" => "### What it does\nChecks for `match`  or `if let` expressions producing a\n`bool` that could be written using `matches!`\n### Why is this bad?\nReadability and needless complexity.\n### Known problems\nThis lint falsely triggers, if there are arms with\n`cfg` attributes that remove an arm evaluating to `false`.\n### Example\n\nlet x = Some(5);\n// Bad\nlet a = match x {\n    Some(0) => true,\n    _ => false,\n};\nlet a = if let Some(0) = x {\n    true\n} else {\n    false\n};\n// Good\nlet a = matches!(x, Some(0));\n",
        "match_on_vec_items" => "### What it does\nChecks for `match vec[idx]` or `match vec[n..m]`.\n### Why is this bad?\nThis can panic at runtime.\n### Example\n\nlet arr = vec![0, 1, 2, 3];\nlet idx = 1;\n// Bad\nmatch arr[idx] {\n    0 => println!(\"{}\", 0),\n    1 => println!(\"{}\", 3),\n    _ => {},\n}\n\nUse instead:\n\nlet arr = vec![0, 1, 2, 3];\nlet idx = 1;\n// Good\nmatch arr.get(idx) {\n    Some(0) => println!(\"{}\", 0),\n    Some(1) => println!(\"{}\", 3),\n    _ => {},\n}\n",
        "match_overlapping_arm" => "### What it does\nChecks for overlapping match arms.\n### Why is this bad?\nIt is likely to be an error and if not, makes the code\nless obvious.\n### Example\n\nlet x = 5;\nmatch x {\n    1..=10 => println!(\"1 ... 10\"),\n    5..=15 => println!(\"5 ... 15\"),\n    _ => (),\n}\n",
        "match_ref_pats" => "### What it does\nChecks for matches where all arms match a reference,\nsuggesting to remove the reference and deref the matched expression\ninstead. It also checks for `if let &foo = bar` blocks.\n### Why is this bad?\nIt just makes the code less readable. That reference\ndestructuring adds nothing to the code.\n### Example\n\n// Bad\nmatch x {\n    &A(ref y) => foo(y),\n    &B => bar(),\n    _ => frob(&x),\n}\n// Good\nmatch *x {\n    A(ref y) => foo(y),\n    B => bar(),\n    _ => frob(x),\n}\n",
        "match_result_ok" => "### What it does\nChecks for unnecessary `ok()` in `while let`.\n### Why is this bad?\nCalling `ok()` in `while let` is unnecessary, instead match\non `Ok(pat)`\n### Example\n\nwhile let Some(value) = iter.next().ok() {\n    vec.push(value)\n}\nif let Some(value) = iter.next().ok() {\n    vec.push(value)\n}\n\nUse instead:\n\nwhile let Ok(value) = iter.next() {\n    vec.push(value)\n}\nif let Ok(value) = iter.next() {\n       vec.push(value)\n}\n",
        "match_same_arms" => "### What it does\nChecks for `match` with identical arm bodies.\n### Why is this bad?\nThis is probably a copy & paste error. If arm bodies\nare the same on purpose, you can factor them\n[using `|`](https://doc.rust-lang.org/book/patterns.html#multiple-patterns).\n### Known problems\nFalse positive possible with order dependent `match`\n(see issue\n[#860](https://github.com/rust-lang/rust-clippy/issues/860)).\n### Example\n\nmatch foo {\n    Bar => bar(),\n    Quz => quz(),\n    Baz => bar(), // <= oops\n}\n\nThis should probably be\n\nmatch foo {\n    Bar => bar(),\n    Quz => quz(),\n    Baz => baz(), // <= fixed\n}\n\nor if the original code was not a typo:\n\nmatch foo {\n    Bar | Baz => bar(), // <= shows the intent better\n    Quz => quz(),\n}\n",
        "match_single_binding" => "### What it does\nChecks for useless match that binds to only one value.\n### Why is this bad?\nReadability and needless complexity.\n### Known problems\n Suggested replacements may be incorrect when `match`\nis actually binding temporary value, bringing a 'dropped while borrowed' error.\n### Example\n\n// Bad\nmatch (a, b) {\n    (c, d) => {\n        // useless match\n    }\n}\n// Good\nlet (c, d) = (a, b);\n",
        "match_str_case_mismatch" => "### What it does\nChecks for `match` expressions modifying the case of a string with non-compliant arms\n### Why is this bad?\nThe arm is unreachable, which is likely a mistake\n### Example\n\nmatch &*text.to_ascii_lowercase() {\n    \"foo\" => {},\n    \"Bar\" => {},\n    _ => {},\n}\n\nUse instead:\n\nmatch &*text.to_ascii_lowercase() {\n    \"foo\" => {},\n    \"bar\" => {},\n    _ => {},\n}\n",
        "match_type_on_diagnostic_item" => "### What it does\nChecks for calls to `utils::match_type()` on a type diagnostic item\nand suggests to use `utils::is_type_diagnostic_item()` instead.\n### Why is this bad?\n`utils::is_type_diagnostic_item()` does not require hardcoded paths.\n### Example\nBad:\n\nutils::match_type(cx, ty, &paths::VEC)\n\nGood:\n\nutils::is_type_diagnostic_item(cx, ty, sym::Vec)\n",
        "match_wild_err_arm" => "### What it does\nChecks for arm which matches all errors with `Err(_)`\nand take drastic actions like `panic!`.\n### Why is this bad?\nIt is generally a bad practice, similar to\ncatching all exceptions in java with `catch(Exception)`\n### Example\n\nlet x: Result<i32, &str> = Ok(3);\nmatch x {\n    Ok(_) => println!(\"ok\"),\n    Err(_) => panic!(\"err\"),\n}\n",
        "match_wildcard_for_single_variants" => "### What it does\nChecks for wildcard enum matches for a single variant.\n### Why is this bad?\nNew enum variants added by library updates can be missed.\n### Known problems\nSuggested replacements may not use correct path to enum\nif it's not present in the current scope.\n### Example\n\n// Bad\nmatch x {\n    Foo::A => {},\n    Foo::B => {},\n    _ => {},\n}\n// Good\nmatch x {\n    Foo::A => {},\n    Foo::B => {},\n    Foo::C => {},\n}\n",
        "maybe_infinite_iter" => "### What it does\nChecks for iteration that may be infinite.\n### Why is this bad?\nWhile there may be places where this is acceptable\n(e.g., in event streams), in most cases this is simply an error.\n### Known problems\nThe code may have a condition to stop iteration, but\nthis lint is not clever enough to analyze it.\n### Example\n\nlet infinite_iter = 0..;\n[0..].iter().zip(infinite_iter.take_while(|x| *x > 5));\n",
        "mem_forget" => "### What it does\nChecks for usage of `std::mem::forget(t)` where `t` is\n`Drop`.\n### Why is this bad?\n`std::mem::forget(t)` prevents `t` from running its\ndestructor, possibly causing leaks.\n### Example\n\nmem::forget(Rc::new(55))\n",
        "mem_replace_option_with_none" => "### What it does\nChecks for `mem::replace()` on an `Option` with\n`None`.\n### Why is this bad?\n`Option` already has the method `take()` for\ntaking its current value (Some(..) or None) and replacing it with\n`None`.\n### Example\n\nuse std::mem;\nlet mut an_option = Some(0);\nlet replaced = mem::replace(&mut an_option, None);\n\nIs better expressed with:\n\nlet mut an_option = Some(0);\nlet taken = an_option.take();\n",
        "mem_replace_with_default" => "### What it does\nChecks for `std::mem::replace` on a value of type\n`T` with `T::default()`.\n### Why is this bad?\n`std::mem` module already has the method `take` to\ntake the current value and replace it with the default value of that type.\n### Example\n\nlet mut text = String::from(\"foo\");\nlet replaced = std::mem::replace(&mut text, String::default());\n\nIs better expressed with:\n\nlet mut text = String::from(\"foo\");\nlet taken = std::mem::take(&mut text);\n",
        "mem_replace_with_uninit" => "### What it does\nChecks for `mem::replace(&mut _, mem::uninitialized())`\nand `mem::replace(&mut _, mem::zeroed())`.\n### Why is this bad?\nThis will lead to undefined behavior even if the\nvalue is overwritten later, because the uninitialized value may be\nobserved in the case of a panic.\n### Example\n\nuse std::mem;\n#[allow(deprecated, invalid_value)]\nfn myfunc (v: &mut Vec<i32>) {\n    let taken_v = unsafe { mem::replace(v, mem::uninitialized()) };\n    let new_v = may_panic(taken_v); // undefined behavior on panic\n    mem::forget(mem::replace(v, new_v));\n}\n\nThe [take_mut](https://docs.rs/take_mut) crate offers a sound solution,\nat the cost of either lazily creating a replacement value or aborting\non panic, to ensure that the uninitialized value cannot be observed.",
        "min_max" => "### What it does\nChecks for expressions where `std::cmp::min` and `max` are\nused to clamp values, but switched so that the result is constant.\n### Why is this bad?\nThis is in all probability not the intended outcome. At\nthe least it hurts readability of the code.\n### Example\n\nmin(0, max(100, x))\n// or\nx.max(100).min(0)\n\nIt will always be equal to `0`. Probably the author meant to clamp the value\nbetween 0 and 100, but has erroneously swapped `min` and `max`.",
        "mismatched_target_os" => "### What it does\nChecks for cfg attributes having operating systems used in target family position.\n### Why is this bad?\nThe configuration option will not be recognised and the related item will not be included\nby the conditional compilation engine.\n### Example\n\n#[cfg(linux)]\nfn conditional() { }\n\nUse instead:\n\n#[cfg(target_os = \"linux\")]\nfn conditional() { }\n// or\n#[cfg(unix)]\nfn conditional() { }\n\nCheck the [Rust Reference](https://doc.rust-lang.org/reference/conditional-compilation.html#target_os) for more details.",
        "mismatching_type_param_order" => "### What it does\nChecks for type parameters which are positioned inconsistently between\na type definition and impl block. Specifically, a paramater in an impl\nblock which has the same name as a parameter in the type def, but is in\na different place.\n### Why is this bad?\nType parameters are determined by their position rather than name.\nNaming type parameters inconsistently may cause you to refer to the\nwrong type parameter.\n### Example\n\nstruct Foo<A, B> {\n    x: A,\n    y: B,\n}\n// inside the impl, B refers to Foo::A\nimpl<B, A> Foo<B, A> {}\n\nUse instead:\n\nstruct Foo<A, B> {\n    x: A,\n    y: B,\n}\nimpl<A, B> Foo<A, B> {}\n",
        "misrefactored_assign_op" => "### What it does\nChecks for `a op= a op b` or `a op= b op a` patterns.\n### Why is this bad?\nMost likely these are bugs where one meant to write `a\nop= b`.\n### Known problems\nClippy cannot know for sure if `a op= a op b` should have\nbeen `a = a op a op b` or `a = a op b`/`a op= b`. Therefore, it suggests both.\nIf `a op= a op b` is really the correct behavior it should be\nwritten as `a = a op a op b` as it's less confusing.\n### Example\n\nlet mut a = 5;\nlet b = 2;\n// ...\na += a + b;\n",
        "missing_clippy_version_attribute" => "### What it does\nChecks for declared clippy lints without the `clippy::version` attribute.",
        "missing_const_for_fn" => "### What it does\nSuggests the use of `const` in functions and methods where possible.\n### Why is this bad?\nNot having the function const prevents callers of the function from being const as well.\n### Known problems\nConst functions are currently still being worked on, with some features only being available\non nightly. This lint does not consider all edge cases currently and the suggestions may be\nincorrect if you are using this lint on stable.\nAlso, the lint only runs one pass over the code. Consider these two non-const functions:\n\nfn a() -> i32 {\n    0\n}\nfn b() -> i32 {\n    a()\n}\n\nWhen running Clippy, the lint will only suggest to make `a` const, because `b` at this time\ncan't be const as it calls a non-const function. Making `a` const and running Clippy again,\nwill suggest to make `b` const, too.\n### Example\n\nfn new() -> Self {\n    Self { random_number: 42 }\n}\n\nCould be a const fn:\n\nconst fn new() -> Self {\n    Self { random_number: 42 }\n}\n",
        "missing_docs_in_private_items" => "### What it does\nWarns if there is missing doc for any documentable item\n(public or private).\n### Why is this bad?\nDoc is good. *rustc* has a `MISSING_DOCS`\nallowed-by-default lint for\npublic members, but has no way to enforce documentation of private items.\nThis lint fixes that.",
        "missing_enforced_import_renames" => "### What it does\nChecks for imports that do not rename the item as specified\nin the `enforce-import-renames` config option.\n### Why is this bad?\nConsistency is important, if a project has defined import\nrenames they should be followed. More practically, some item names are too\nvague outside of their defining scope this can enforce a more meaningful naming.\n### Example\nAn example clippy.toml configuration:\n\nenforced-import-renames = [ { path = \"serde_json::Value\", rename = \"JsonValue\" }]\n\n\nuse serde_json::Value;\n\nUse instead:\n\nuse serde_json::Value as JsonValue;\n",
        "missing_errors_doc" => "### What it does\nChecks the doc comments of publicly visible functions that\nreturn a `Result` type and warns if there is no `# Errors` section.\n### Why is this bad?\nDocumenting the type of errors that can be returned from a\nfunction can help callers write code to handle the errors appropriately.\n### Examples\nSince the following function returns a `Result` it has an `# Errors` section in\nits doc comment:\n\n/// # Errors\n///\n/// Will return `Err` if `filename` does not exist or the user does not have\n/// permission to read it.\npub fn read(filename: String) -> io::Result<String> {\n    unimplemented!();\n}\n",
        "missing_inline_in_public_items" => "### What it does\nIt lints if an exported function, method, trait method with default impl,\nor trait method impl is not `#[inline]`.\n### Why is this bad?\nIn general, it is not. Functions can be inlined across\ncrates when that's profitable as long as any form of LTO is used. When LTO is disabled,\nfunctions that are not `#[inline]` cannot be inlined across crates. Certain types of crates\nmight intend for most of the methods in their public API to be able to be inlined across\ncrates even when LTO is disabled. For these types of crates, enabling this lint might make\nsense. It allows the crate to require all exported methods to be `#[inline]` by default, and\nthen opt out for specific methods where this might not make sense.\n### Example\n\npub fn foo() {} // missing #[inline]\nfn ok() {} // ok\n#[inline] pub fn bar() {} // ok\n#[inline(always)] pub fn baz() {} // ok\npub trait Bar {\n  fn bar(); // ok\n  fn def_bar() {} // missing #[inline]\n}\nstruct Baz;\nimpl Baz {\n   fn private() {} // ok\n}\nimpl Bar for Baz {\n  fn bar() {} // ok - Baz is not exported\n}\npub struct PubBaz;\nimpl PubBaz {\n   fn private() {} // ok\n   pub fn not_private() {} // missing #[inline]\n}\nimpl Bar for PubBaz {\n   fn bar() {} // missing #[inline]\n   fn def_bar() {} // missing #[inline]\n}\n",
        "missing_msrv_attr_impl" => "### What it does\nCheck that the `extract_msrv_attr!` macro is used, when a lint has a MSRV.",
        "missing_panics_doc" => "### What it does\nChecks the doc comments of publicly visible functions that\nmay panic and warns if there is no `# Panics` section.\n### Why is this bad?\nDocumenting the scenarios in which panicking occurs\ncan help callers who do not want to panic to avoid those situations.\n### Examples\nSince the following function may panic it has a `# Panics` section in\nits doc comment:\n\n/// # Panics\n///\n/// Will panic if y is 0\npub fn divide_by(x: i32, y: i32) -> i32 {\n    if y == 0 {\n        panic!(\"Cannot divide by 0\")\n    } else {\n        x / y\n    }\n}\n",
        "missing_safety_doc" => "### What it does\nChecks for the doc comments of publicly visible\nunsafe functions and warns if there is no `# Safety` section.\n### Why is this bad?\nUnsafe functions should document their safety\npreconditions, so that users can be sure they are using them safely.\n### Examples\n\n/// This function should really be documented\npub unsafe fn start_apocalypse(u: &mut Universe) {\n    unimplemented!();\n}\n\nAt least write a line about safety:\n\n/// # Safety\n///\n/// This function should not be called before the horsemen are ready.\npub unsafe fn start_apocalypse(u: &mut Universe) {\n    unimplemented!();\n}\n",
        "missing_spin_loop" => "### What it does\nCheck for empty spin loops\n### Why is this bad?\nThe loop body should have something like `thread::park()` or at least\n`std::hint::spin_loop()` to avoid needlessly burning cycles and conserve\nenergy. Perhaps even better use an actual lock, if possible.\n### Known problems\nThis lint doesn't currently trigger on `while let` or\n`loop { match .. { .. } }` loops, which would be considered idiomatic in\ncombination with e.g. `AtomicBool::compare_exchange_weak`.\n### Example\n\nuse core::sync::atomic::{AtomicBool, Ordering};\nlet b = AtomicBool::new(true);\n// give a ref to `b` to another thread,wait for it to become false\nwhile b.load(Ordering::Acquire) {};\n\nUse instead:\n\nwhile b.load(Ordering::Acquire) {\n    std::hint::spin_loop()\n}\n",
        "mistyped_literal_suffixes" => "### What it does\nWarns for mistyped suffix in literals\n### Why is this bad?\nThis is most probably a typo\n### Known problems\n- Does not match on integers too large to fit in the corresponding unsigned type\n- Does not match on `_127` since that is a valid grouping for decimal and octal numbers\n### Example\n`2_32` => `2_i32`\n`250_8 => `250_u8`\n",
        "mixed_case_hex_literals" => "### What it does\nWarns on hexadecimal literals with mixed-case letter\ndigits.\n### Why is this bad?\nIt looks confusing.\n### Example\n\n// Bad\nlet y = 0x1a9BAcD;\n// Good\nlet y = 0x1A9BACD;\n",
        "mixed_read_write_in_expression" => "### What it does\nChecks for a read and a write to the same variable where\nwhether the read occurs before or after the write depends on the evaluation\norder of sub-expressions.\n### Why is this bad?\nIt is often confusing to read. As described [here](https://doc.rust-lang.org/reference/expressions.html?highlight=subexpression#evaluation-order-of-operands),\nthe operands of these expressions are evaluated before applying the effects of the expression.\n### Known problems\nCode which intentionally depends on the evaluation\norder, or which is correct for any evaluation order.\n### Example\n\nlet mut x = 0;\n// Bad\nlet a = {\n    x = 1;\n    1\n} + x;\n// Unclear whether a is 1 or 2.\n// Good\nlet tmp = {\n    x = 1;\n    1\n};\nlet a = tmp + x;\n",
        "mod_module_files" => "### What it does\nChecks that module layout uses only self named module files, bans `mod.rs` files.\n### Why is this bad?\nHaving multiple module layout styles in a project can be confusing.\n### Example\n\nsrc/\n  stuff/\n    stuff_files.rs\n    mod.rs\n  lib.rs\n\nUse instead:\n\nsrc/\n  stuff/\n    stuff_files.rs\n  stuff.rs\n  lib.rs\n",
        "module_inception" => "### What it does\nChecks for modules that have the same name as their\nparent module\n### Why is this bad?\nA typical beginner mistake is to have `mod foo;` and\nagain `mod foo { ..\n}` in `foo.rs`.\nThe expectation is that items inside the inner `mod foo { .. }` are then\navailable\nthrough `foo::x`, but they are only available through\n`foo::foo::x`.\nIf this is done on purpose, it would be better to choose a more\nrepresentative module name.\n### Example\n\n// lib.rs\nmod foo;\n// foo.rs\nmod foo {\n    ...\n}\n",
        "module_name_repetitions" => "### What it does\nDetects type names that are prefixed or suffixed by the\ncontaining module's name.\n### Why is this bad?\nIt requires the user to type the module name twice.\n### Example\n\nmod cake {\n    struct BlackForestCake;\n}\n\nCould be written as:\n\nmod cake {\n    struct BlackForest;\n}\n",
        "modulo_arithmetic" => "### What it does\nChecks for modulo arithmetic.\n### Why is this bad?\nThe results of modulo (%) operation might differ\ndepending on the language, when negative numbers are involved.\nIf you interop with different languages it might be beneficial\nto double check all places that use modulo arithmetic.\nFor example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n### Example\n\nlet x = -17 % 3;\n",
        "modulo_one" => "### What it does\nChecks for getting the remainder of a division by one or minus\none.\n### Why is this bad?\nThe result for a divisor of one can only ever be zero; for\nminus one it can cause panic/overflow (if the left operand is the minimal value of\nthe respective integer type) or results in zero. No one will write such code\ndeliberately, unless trying to win an Underhanded Rust Contest. Even for that\ncontest, it's probably a bad idea. Use something more underhanded.\n### Example\n\nlet a = x % 1;\nlet a = x % -1;\n",
        "multiple_crate_versions" => "### What it does\nChecks to see if multiple versions of a crate are being\nused.\n### Why is this bad?\nThis bloats the size of targets, and can lead to\nconfusing error messages when structs or traits are used interchangeably\nbetween different versions of a crate.\n### Known problems\nBecause this can be caused purely by the dependencies\nthemselves, it's not always possible to fix this issue.\n### Example\n\n[dependencies]\nctrlc = \"=3.1.0\"\nansi_term = \"=0.11.0\"\n",
        "multiple_inherent_impl" => "### What it does\nChecks for multiple inherent implementations of a struct\n### Why is this bad?\nSplitting the implementation of a type makes the code harder to navigate.\n### Example\n\nstruct X;\nimpl X {\n    fn one() {}\n}\nimpl X {\n    fn other() {}\n}\n\nCould be written:\n\nstruct X;\nimpl X {\n    fn one() {}\n    fn other() {}\n}\n",
        "must_use_candidate" => "### What it does\nChecks for public functions that have no\n`#[must_use]` attribute, but return something not already marked\nmust-use, have no mutable arg and mutate no statics.\n### Why is this bad?\nNot bad at all, this lint just shows places where\nyou could add the attribute.\n### Known problems\nThe lint only checks the arguments for mutable\ntypes without looking if they are actually changed. On the other hand,\nit also ignores a broad range of potentially interesting side effects,\nbecause we cannot decide whether the programmer intends the function to\nbe called for the side effect or the result. Expect many false\npositives. At least we don't lint if the result type is unit or already\n`#[must_use]`.\n### Examples\n\n// this could be annotated with `#[must_use]`.\nfn id<T>(t: T) -> T { t }\n",
        "must_use_unit" => "### What it does\nChecks for a `#[must_use]` attribute on\nunit-returning functions and methods.\n### Why is this bad?\nUnit values are useless. The attribute is likely\na remnant of a refactoring that removed the return type.\n### Examples\n\n#[must_use]\nfn useless() { }\n",
        "mut_from_ref" => "### What it does\nThis lint checks for functions that take immutable references and return\nmutable ones. This will not trigger if no unsafe code exists as there\nare multiple safe functions which will do this transformation\nTo be on the conservative side, if there's at least one mutable\nreference with the output lifetime, this lint will not trigger.\n### Why is this bad?\nCreating a mutable reference which can be repeatably derived from an\nimmutable reference is unsound as it allows creating multiple live\nmutable references to the same object.\nThis [error](https://github.com/rust-lang/rust/issues/39465) actually\nlead to an interim Rust release 1.15.1.\n### Known problems\nThis pattern is used by memory allocators to allow allocating multiple\nobjects while returning mutable references to each one. So long as\ndifferent mutable references are returned each time such a function may\nbe safe.\n### Example\n\nfn foo(&Foo) -> &mut Bar { .. }\n",
        "mut_mut" => "### What it does\nChecks for instances of `mut mut` references.\n### Why is this bad?\nMultiple `mut`s don't add anything meaningful to the\nsource. This is either a copy'n'paste error, or it shows a fundamental\nmisunderstanding of references.\n### Example\n\nlet x = &mut &mut y;\n",
        "mut_mutex_lock" => "### What it does\nChecks for `&mut Mutex::lock` calls\n### Why is this bad?\n`Mutex::lock` is less efficient than\ncalling `Mutex::get_mut`. In addition you also have a statically\nguarantee that the mutex isn't locked, instead of just a runtime\nguarantee.\n### Example\n\nuse std::sync::{Arc, Mutex};\nlet mut value_rc = Arc::new(Mutex::new(42_u8));\nlet value_mutex = Arc::get_mut(&mut value_rc).unwrap();\nlet mut value = value_mutex.lock().unwrap();\n*value += 1;\n\nUse instead:\n\nuse std::sync::{Arc, Mutex};\nlet mut value_rc = Arc::new(Mutex::new(42_u8));\nlet value_mutex = Arc::get_mut(&mut value_rc).unwrap();\nlet value = value_mutex.get_mut().unwrap();\n*value += 1;\n",
        "mut_range_bound" => "### What it does\nChecks for loops which have a range bound that is a mutable variable\n### Why is this bad?\nOne might think that modifying the mutable variable changes the loop bounds\n### Known problems\nFalse positive when mutation is followed by a `break`, but the `break` is not immediately\nafter the mutation:\n\nlet mut x = 5;\nfor _ in 0..x {\n    x += 1; // x is a range bound that is mutated\n    ..; // some other expression\n    break; // leaves the loop, so mutation is not an issue\n}\n\nFalse positive on nested loops ([#6072](https://github.com/rust-lang/rust-clippy/issues/6072))\n### Example\n\nlet mut foo = 42;\nfor i in 0..foo {\n    foo -= 1;\n    println!(\"{}\", i); // prints numbers from 0 to 42, not 0 to 21\n}\n",
        "mutable_key_type" => "### What it does\nChecks for sets/maps with mutable key types.\n### Why is this bad?\nAll of `HashMap`, `HashSet`, `BTreeMap` and\n`BtreeSet` rely on either the hash or the order of keys be unchanging,\nso having types with interior mutability is a bad idea.\n### Known problems\n#### False Positives\nIt's correct to use a struct that contains interior mutability as a key, when its\nimplementation of `Hash` or `Ord` doesn't access any of the interior mutable types.\nHowever, this lint is unable to recognize this, so it will often cause false positives in\ntheses cases.  The `bytes` crate is a great example of this.\n#### False Negatives\nFor custom `struct`s/`enum`s, this lint is unable to check for interior mutability behind\nindirection.  For example, `struct BadKey<'a>(&'a Cell<usize>)` will be seen as immutable\nand cause a false negative if its implementation of `Hash`/`Ord` accesses the `Cell`.\nThis lint does check a few cases for indirection.  Firstly, using some standard library\ntypes (`Option`, `Result`, `Box`, `Rc`, `Arc`, `Vec`, `VecDeque`, `BTreeMap` and\n`BTreeSet`) directly as keys (e.g. in `HashMap<Box<Cell<usize>>, ()>`) **will** trigger the\nlint, because the impls of `Hash`/`Ord` for these types directly call `Hash`/`Ord` on their\ncontained type.\nSecondly, the implementations of `Hash` and `Ord` for raw pointers (`*const T` or `*mut T`)\napply only to the **address** of the contained value.  Therefore, interior mutability\nbehind raw pointers (e.g. in `HashSet<*mut Cell<usize>>`) can't impact the value of `Hash`\nor `Ord`, and therefore will not trigger this link.  For more info, see issue\n[#6745](https://github.com/rust-lang/rust-clippy/issues/6745).\n### Example\n\nuse std::cmp::{PartialEq, Eq};\nuse std::collections::HashSet;\nuse std::hash::{Hash, Hasher};\nuse std::sync::atomic::AtomicUsize;\nstruct Bad(AtomicUsize);\nimpl PartialEq for Bad {\n    fn eq(&self, rhs: &Self) -> bool {\n         ..\n; unimplemented!();\n    }\n}\nimpl Eq for Bad {}\nimpl Hash for Bad {\n    fn hash<H: Hasher>(&self, h: &mut H) {\n        ..\n; unimplemented!();\n    }\n}\nfn main() {\n    let _: HashSet<Bad> = HashSet::new();\n}\n",
        "mutex_atomic" => "### What it does\nChecks for usages of `Mutex<X>` where an atomic will do.\n### Why is this bad?\nUsing a mutex just to make access to a plain bool or\nreference sequential is shooting flies with cannons.\n`std::sync::atomic::AtomicBool` and `std::sync::atomic::AtomicPtr` are leaner and\nfaster.\n### Known problems\nThis lint cannot detect if the mutex is actually used\nfor waiting before a critical section.\n### Example\n\n// Bad\nlet x = Mutex::new(&y);\n// Good\nlet x = AtomicBool::new(y);\n",
        "mutex_integer" => "### What it does\nChecks for usages of `Mutex<X>` where `X` is an integral\ntype.\n### Why is this bad?\nUsing a mutex just to make access to a plain integer\nsequential is\nshooting flies with cannons. `std::sync::atomic::AtomicUsize` is leaner and faster.\n### Known problems\nThis lint cannot detect if the mutex is actually used\nfor waiting before a critical section.\n### Example\n\nlet x = Mutex::new(0usize);\n// Good\nlet x = AtomicUsize::new(0usize);\n",
        "naive_bytecount" => "### What it does\nChecks for naive byte counts\n### Why is this bad?\nThe [`bytecount`](https://crates.io/crates/bytecount)\ncrate has methods to count your bytes faster, especially for large slices.\n### Known problems\nIf you have predominantly small slices, the\n`bytecount::count(..)` method may actually be slower. However, if you can\nensure that less than 2³²-1 matches arise, the `naive_count_32(..)` can be\nfaster in those cases.\n### Example\n\nlet count = vec.iter().filter(|x| **x == 0u8).count();\n\nUse instead:\n\nlet count = bytecount::count(&vec, 0u8);\n",
        "needless_arbitrary_self_type" => "### What it does\nThe lint checks for `self` in fn parameters that\nspecify the `Self`-type explicitly\n### Why is this bad?\nIncreases the amount and decreases the readability of code\n### Example\n\nenum ValType {\n    I32,\n    I64,\n    F32,\n    F64,\n}\nimpl ValType {\n    pub fn bytes(self: Self) -> usize {\n        match self {\n            Self::I32 | Self::F32 => 4,\n            Self::I64 | Self::F64 => 8,\n        }\n    }\n}\n\nCould be rewritten as\n\nenum ValType {\n    I32,\n    I64,\n    F32,\n    F64,\n}\nimpl ValType {\n    pub fn bytes(self) -> usize {\n        match self {\n            Self::I32 | Self::F32 => 4,\n            Self::I64 | Self::F64 => 8,\n        }\n    }\n}\n",
        "needless_bitwise_bool" => "### What it does\nChecks for uses of bitwise and/or operators between booleans, where performance may be improved by using\na lazy and.\n### Why is this bad?\nThe bitwise operators do not support short-circuiting, so it may hinder code performance.\nAdditionally, boolean logic \"masked\" as bitwise logic is not caught by lints like `unnecessary_fold`\n### Known problems\nThis lint evaluates only when the right side is determined to have no side effects. At this time, that\ndetermination is quite conservative.\n### Example\n\nlet (x,y) = (true, false);\nif x & !y {} // where both x and y are booleans\n\nUse instead:\n\nlet (x,y) = (true, false);\nif x && !y {}\n",
        "needless_bool" => "### What it does\nChecks for expressions of the form `if c { true } else {\nfalse }` (or vice versa) and suggests using the condition directly.\n### Why is this bad?\nRedundant code.\n### Known problems\nMaybe false positives: Sometimes, the two branches are\npainstakingly documented (which we, of course, do not detect), so they *may*\nhave some value. Even then, the documentation can be rewritten to match the\nshorter code.\n### Example\n\nif x {\n    false\n} else {\n    true\n}\n\nCould be written as\n\n!x\n",
        "needless_borrow" => "### What it does\nChecks for address of operations (`&`) that are going to\nbe dereferenced immediately by the compiler.\n### Why is this bad?\nSuggests that the receiver of the expression borrows\nthe expression.\n### Example\n\nfn fun(_a: &i32) {}\n// Bad\nlet x: &i32 = &&&&&&5;\nfun(&x);\n// Good\nlet x: &i32 = &5;\nfun(x);\n",
        "needless_borrowed_reference" => "### What it does\nChecks for bindings that destructure a reference and borrow the inner\nvalue with `&ref`.\n### Why is this bad?\nThis pattern has no effect in almost all cases.\n### Known problems\nIn some cases, `&ref` is needed to avoid a lifetime mismatch error.\nExample:\n\nfn foo(a: &Option<String>, b: &Option<String>) {\n    match (a, b) {\n        (None, &ref c) | (&ref c, None) => (),\n        (&Some(ref c), _) => (),\n    };\n}\n\n### Example\nBad:\n\nlet mut v = Vec::<String>::new();\nlet _ = v.iter_mut().filter(|&ref a| a.is_empty());\n\nGood:\n\nlet mut v = Vec::<String>::new();\nlet _ = v.iter_mut().filter(|a| a.is_empty());\n",
        "needless_collect" => "### What it does\nChecks for functions collecting an iterator when collect\nis not needed.\n### Why is this bad?\n`collect` causes the allocation of a new data structure,\nwhen this allocation may not be needed.\n### Example\n\nlet len = iterator.clone().collect::<Vec<_>>().len();\n// should be\nlet len = iterator.count();\n",
        "needless_continue" => "### What it does\nThe lint checks for `if`-statements appearing in loops\nthat contain a `continue` statement in either their main blocks or their\n`else`-blocks, when omitting the `else`-block possibly with some\nrearrangement of code can make the code easier to understand.\n### Why is this bad?\nHaving explicit `else` blocks for `if` statements\ncontaining `continue` in their THEN branch adds unnecessary branching and\nnesting to the code. Having an else block containing just `continue` can\nalso be better written by grouping the statements following the whole `if`\nstatement within the THEN block and omitting the else block completely.\n### Example\n\nwhile condition() {\n    update_condition();\n    if x {\n        // ...\n    } else {\n        continue;\n    }\n    println!(\"Hello, world\");\n}\n\nCould be rewritten as\n\nwhile condition() {\n    update_condition();\n    if x {\n        // ...\n        println!(\"Hello, world\");\n    }\n}\n\nAs another example, the following code\n\nloop {\n    if waiting() {\n        continue;\n    } else {\n        // Do something useful\n    }\n    # break;\n}\n\nCould be rewritten as\n\nloop {\n    if waiting() {\n        continue;\n    }\n    // Do something useful\n    # break;\n}\n",
        "needless_doctest_main" => "### What it does\nChecks for `fn main() { .. }` in doctests\n### Why is this bad?\nThe test can be shorter (and likely more readable)\nif the `fn main()` is left implicit.\n### Examples\n\n/// An example of a doctest with a `main()` function\n///\n/// # Examples\n///\n/// ```\n/// fn main() {\n///     // this needs not be in an `fn`\n/// }\n/// ```\nfn needless_main() {\n    unimplemented!();\n}\n",
        "needless_for_each" => "### What it does\nChecks for usage of `for_each` that would be more simply written as a\n`for` loop.\n### Why is this bad?\n`for_each` may be used after applying iterator transformers like\n`filter` for better readability and performance. It may also be used to fit a simple\noperation on one line.\nBut when none of these apply, a simple `for` loop is more idiomatic.\n### Example\n\nlet v = vec![0, 1, 2];\nv.iter().for_each(|elem| {\n    println!(\"{}\", elem);\n})\n\nUse instead:\n\nlet v = vec![0, 1, 2];\nfor elem in v.iter() {\n    println!(\"{}\", elem);\n}\n",
        "needless_late_init" => "### What it does\nChecks for late initializations that can be replaced by a `let` statement\nwith an initializer.\n### Why is this bad?\nAssigning in the `let` statement is less repetitive.\n### Example\n\nlet a;\na = 1;\nlet b;\nmatch 3 {\n    0 => b = \"zero\",\n    1 => b = \"one\",\n    _ => b = \"many\",\n}\nlet c;\nif true {\n    c = 1;\n} else {\n    c = -1;\n}\n\nUse instead:\n\nlet a = 1;\nlet b = match 3 {\n    0 => \"zero\",\n    1 => \"one\",\n    _ => \"many\",\n};\nlet c = if true {\n    1\n} else {\n    -1\n};\n",
        "needless_lifetimes" => "### What it does\nChecks for lifetime annotations which can be removed by\nrelying on lifetime elision.\n### Why is this bad?\nThe additional lifetimes make the code look more\ncomplicated, while there is nothing out of the ordinary going on. Removing\nthem leads to more readable code.\n### Known problems\n- We bail out if the function has a `where` clause where lifetimes\nare mentioned due to potential false positives.\n- Lifetime bounds such as `impl Foo + 'a` and `T: 'a` must be elided with the\nplaceholder notation `'_` because the fully elided notation leaves the type bound to `'static`.\n### Example\n\n// Bad: unnecessary lifetime annotations\nfn in_and_out<'a>(x: &'a u8, y: u8) -> &'a u8 {\n    x\n}\n// Good\nfn elided(x: &u8, y: u8) -> &u8 {\n    x\n}\n",
        "needless_match" => "### What it does\nChecks for unnecessary `match` or match-like `if let` returns for `Option` and `Result`\nwhen function signatures are the same.\n### Why is this bad?\nThis `match` block does nothing and might not be what the coder intended.\n### Example\n\nfn foo() -> Result<(), i32> {\n    match result {\n        Ok(val) => Ok(val),\n        Err(err) => Err(err),\n    }\n}\nfn bar() -> Option<i32> {\n    if let Some(val) = option {\n        Some(val)\n    } else {\n        None\n    }\n}\n\nCould be replaced as\n\nfn foo() -> Result<(), i32> {\n    result\n}\nfn bar() -> Option<i32> {\n    option\n}\n",
        "needless_option_as_deref" => "### What it does\nChecks for no-op uses of `Option::{as_deref, as_deref_mut}`,\nfor example, `Option<&T>::as_deref()` returns the same type.\n### Why is this bad?\nRedundant code and improving readability.\n### Example\n\nlet a = Some(&1);\nlet b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n\nCould be written as:\n\nlet a = Some(&1);\nlet b = a;\n",
        "needless_option_take" => "### Why is this bad?\n### Example\n\nlet x = Some(3);\nx.as_ref().take();\n\nUse instead:\n\nlet x = Some(3);\nx.as_ref();\n",
        "needless_pass_by_value" => "### What it does\nChecks for functions taking arguments by value, but not\nconsuming them in its\nbody.\n### Why is this bad?\nTaking arguments by reference is more flexible and can\nsometimes avoid\nunnecessary allocations.\n### Known problems\n* This lint suggests taking an argument by reference,\nhowever sometimes it is better to let users decide the argument type\n(by using `Borrow` trait, for example), depending on how the function is used.\n### Example\n\nfn foo(v: Vec<i32>) {\n    assert_eq!(v.len(), 42);\n}\n\nshould be\n\nfn foo(v: &[i32]) {\n    assert_eq!(v.len(), 42);\n}\n",
        "needless_question_mark" => "### What it does\nSuggests alternatives for useless applications of `?` in terminating expressions\n### Why is this bad?\nThere's no reason to use `?` to short-circuit when execution of the body will end there anyway.\n### Example\n\nstruct TO {\n    magic: Option<usize>,\n}\nfn f(to: TO) -> Option<usize> {\n    Some(to.magic?)\n}\nstruct TR {\n    magic: Result<usize, bool>,\n}\nfn g(tr: Result<TR, bool>) -> Result<usize, bool> {\n    tr.and_then(|t| Ok(t.magic?))\n}\n\nUse instead:\n\nstruct TO {\n    magic: Option<usize>,\n}\nfn f(to: TO) -> Option<usize> {\n   to.magic\n}\nstruct TR {\n    magic: Result<usize, bool>,\n}\nfn g(tr: Result<TR, bool>) -> Result<usize, bool> {\n    tr.and_then(|t| t.magic)\n}\n",
        "needless_range_loop" => "### What it does\nChecks for looping over the range of `0..len` of some\ncollection just to get the values by index.\n### Why is this bad?\nJust iterating the collection itself makes the intent\nmore clear and is probably faster.\n### Example\n\nlet vec = vec!['a', 'b', 'c'];\nfor i in 0..vec.len() {\n    println!(\"{}\", vec[i]);\n}\n\nCould be written as:\n\nlet vec = vec!['a', 'b', 'c'];\nfor i in vec {\n    println!(\"{}\", i);\n}\n",
        "needless_return" => "### What it does\nChecks for return statements at the end of a block.\n### Why is this bad?\nRemoving the `return` and semicolon will make the code\nmore rusty.\n### Example\n\nfn foo(x: usize) -> usize {\n    return x;\n}\n\nsimplify to\n\nfn foo(x: usize) -> usize {\n    x\n}\n",
        "needless_splitn" => "### What it does\nChecks for usages of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.\n### Why is this bad?\nThe function `split` is simpler and there is no performance difference in these cases, considering\nthat both functions return a lazy iterator.\n### Example\n\n// Bad\nlet str = \"key=value=add\";\nlet _ = str.splitn(3, '=').next().unwrap();\n\nUse instead:\n\n// Good\nlet str = \"key=value=add\";\nlet _ = str.split('=').next().unwrap();\n",
        "needless_update" => "### What it does\nChecks for needlessly including a base struct on update\nwhen all fields are changed anyway.\nThis lint is not applied to structs marked with\n[non_exhaustive](https://doc.rust-lang.org/reference/attributes/type_system.html).\n### Why is this bad?\nThis will cost resources (because the base has to be\nsomewhere), and make the code less readable.\n### Example\n\n// Bad\nPoint {\n    x: 1,\n    y: 1,\n    z: 1,\n    ..zero_point\n};\n// Ok\nPoint {\n    x: 1,\n    y: 1,\n    ..zero_point\n};\n",
        "neg_cmp_op_on_partial_ord" => "### What it does\nChecks for the usage of negated comparison operators on types which only implement\n`PartialOrd` (e.g., `f64`).\n### Why is this bad?\nThese operators make it easy to forget that the underlying types actually allow not only three\npotential Orderings (Less, Equal, Greater) but also a fourth one (Uncomparable). This is\nespecially easy to miss if the operator based comparison result is negated.\n### Example\n\nuse std::cmp::Ordering;\n// Bad\nlet a = 1.0;\nlet b = f64::NAN;\nlet _not_less_or_equal = !(a <= b);\n// Good\nlet a = 1.0;\nlet b = f64::NAN;\nlet _not_less_or_equal = match a.partial_cmp(&b) {\n    None | Some(Ordering::Greater) => true,\n    _ => false,\n};\n",
        "neg_multiply" => "### What it does\nChecks for multiplication by -1 as a form of negation.\n### Why is this bad?\nIt's more readable to just negate.\n### Known problems\nThis only catches integers (for now).\n### Example\n\n// Bad\nlet a = x * -1;\n// Good\nlet b = -x;\n",
        "negative_feature_names" => "### What it does\nChecks for negative feature names with prefix `no-` or `not-`\n### Why is this bad?\nFeatures are supposed to be additive, and negatively-named features violate it.\n### Example\n\n[features]\ndefault = []\nno-abc = []\nnot-def = []\n\nUse instead:\n\n[features]\ndefault = [\"abc\", \"def\"]\nabc = []\ndef = []\n",
        "never_loop" => "### What it does\nChecks for loops that will always `break`, `return` or\n`continue` an outer loop.\n### Why is this bad?\nThis loop never loops, all it does is obfuscating the\ncode.\n### Example\n\nloop {\n    ..;\n    break;\n}\n",
        "new_ret_no_self" => "### What it does\nChecks for `new` not returning a type that contains `Self`.\n### Why is this bad?\nAs a convention, `new` methods are used to make a new\ninstance of a type.\n### Example\nIn an impl block:\n\nimpl Foo {\n    fn new() -> NotAFoo {\n    }\n}\n\n\nstruct Bar(Foo);\nimpl Foo {\n    // Bad. The type name must contain `Self`\n    fn new() -> Bar {\n    }\n}\n\n\nimpl Foo {\n    // Good. Return type contains `Self`\n    fn new() -> Result<Foo, FooError> {\n    }\n}\n\nOr in a trait definition:\n\npub trait Trait {\n    // Bad. The type name must contain `Self`\n    fn new();\n}\n\n\npub trait Trait {\n    // Good. Return type contains `Self`\n    fn new() -> Self;\n}\n",
        "new_without_default" => "### What it does\nChecks for public types with a `pub fn new() -> Self` method and no\nimplementation of\n[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html).\n### Why is this bad?\nThe user might expect to be able to use\n[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the\ntype can be constructed without arguments.\n### Example\n\npub struct Foo(Bar);\nimpl Foo {\n    pub fn new() -> Self {\n        Foo(Bar::new())\n    }\n}\n\nTo fix the lint, add a `Default` implementation that delegates to `new`:\n\npub struct Foo(Bar);\nimpl Default for Foo {\n    fn default() -> Self {\n        Foo::new()\n    }\n}\n",
        "no_effect" => "### What it does\nChecks for statements which have no effect.\n### Why is this bad?\nUnlike dead code, these statements are actually\nexecuted. However, as they have no effect, all they do is make the code less\nreadable.\n### Example\n\n0;\n",
        "no_effect_replace" => "### What it does\nChecks for `replace` statements which have no effect.\n### Why is this bad?\nIt's either a mistake or confusing.\n### Example\n\n\"1234\".replace(\"12\", \"12\");\n\"1234\".replacen(\"12\", \"12\", 1);\n",
        "no_effect_underscore_binding" => "### What it does\nChecks for binding to underscore prefixed variable without side-effects.\n### Why is this bad?\nUnlike dead code, these bindings are actually\nexecuted. However, as they have no effect and shouldn't be used further on, all they\ndo is make the code less readable.\n### Known problems\nFurther usage of this variable is not checked, which can lead to false positives if it is\nused later in the code.\n### Example\n\nlet _i_serve_no_purpose = 1;\n",
        "non_ascii_literal" => "### What it does\nChecks for non-ASCII characters in string and char literals.\n### Why is this bad?\nYeah, we know, the 90's called and wanted their charset\nback. Even so, there still are editors and other programs out there that\ndon't work well with Unicode. So if the code is meant to be used\ninternationally, on multiple operating systems, or has other portability\nrequirements, activating this lint could be useful.\n### Example\n\nlet x = String::from(\"€\");\n\nCould be written as:\n\nlet x = String::from(\"\\u{20ac}\");\n",
        "non_octal_unix_permissions" => "### What it does\nChecks for non-octal values used to set Unix file permissions.\n### Why is this bad?\nThey will be converted into octal, creating potentially\nunintended file permissions.\n### Example\n\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\nlet mut options = OpenOptions::new();\noptions.mode(644);\n\nUse instead:\n\nuse std::fs::OpenOptions;\nuse std::os::unix::fs::OpenOptionsExt;\nlet mut options = OpenOptions::new();\noptions.mode(0o644);\n",
        "non_send_fields_in_send_ty" => "### What it does\nThis lint warns about a `Send` implementation for a type that\ncontains fields that are not safe to be sent across threads.\nIt tries to detect fields that can cause a soundness issue\nwhen sent to another thread (e.g., `Rc`) while allowing `!Send` fields\nthat are expected to exist in a `Send` type, such as raw pointers.\n### Why is this bad?\nSending the struct to another thread effectively sends all of its fields,\nand the fields that do not implement `Send` can lead to soundness bugs\nsuch as data races when accessed in a thread\nthat is different from the thread that created it.\nSee:\n* [*The Rustonomicon* about *Send and Sync*](https://doc.rust-lang.org/nomicon/send-and-sync.html)\n* [The documentation of `Send`](https://doc.rust-lang.org/std/marker/trait.Send.html)\n### Known Problems\nThis lint relies on heuristics to distinguish types that are actually\nunsafe to be sent across threads and `!Send` types that are expected to\nexist in  `Send` type. Its rule can filter out basic cases such as\n`Vec<*const T>`, but it's not perfect. Feel free to create an issue if\nyou have a suggestion on how this heuristic can be improved.\n### Example\n\nstruct ExampleStruct<T> {\n    rc_is_not_send: Rc<String>,\n    unbounded_generic_field: T,\n}\n// This impl is unsound because it allows sending `!Send` types through `ExampleStruct`\nunsafe impl<T> Send for ExampleStruct<T> {}\n\nUse thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\nor specify correct bounds on generic type parameters (`T: Send`).",
        "nonminimal_bool" => "### What it does\nChecks for boolean expressions that can be written more\nconcisely.\n### Why is this bad?\nReadability of boolean expressions suffers from\nunnecessary duplication.\n### Known problems\nIgnores short circuiting behavior of `||` and\n`&&`. Ignores `|`, `&` and `^`.\n### Example\n\nif a && true {}\nif !(a == b) {}\n\nUse instead:\n\nif a {}\nif a != b {}\n",
        "nonsensical_open_options" => "### What it does\nChecks for duplicate open options as well as combinations\nthat make no sense.\n### Why is this bad?\nIn the best case, the code will be harder to read than\nnecessary. I don't know the worst case.\n### Example\n\nuse std::fs::OpenOptions;\nOpenOptions::new().read(true).truncate(true);\n",
        "nonstandard_macro_braces" => "### What it does\nChecks that common macros are used with consistent bracing.\n### Why is this bad?\nThis is mostly a consistency lint although using () or []\ndoesn't give you a semicolon in item position, which can be unexpected.\n### Example\n\nvec!{1, 2, 3};\n\nUse instead:\n\nvec![1, 2, 3];\n",
        "not_unsafe_ptr_arg_deref" => "### What it does\nChecks for public functions that dereference raw pointer\narguments but are not marked `unsafe`.\n### Why is this bad?\nThe function should probably be marked `unsafe`, since\nfor an arbitrary raw pointer, there is no way of telling for sure if it is\nvalid.\n### Known problems\n* It does not check functions recursively so if the pointer is passed to a\nprivate non-`unsafe` function which does the dereferencing, the lint won't\ntrigger.\n* It only checks for arguments whose type are raw pointers, not raw pointers\ngot from an argument in some other way (`fn foo(bar: &[*const u8])` or\n`some_argument.get_raw_ptr()`).\n### Example\n\n// Bad\npub fn foo(x: *const u8) {\n    println!(\"{}\", unsafe { *x });\n}\n// Good\npub unsafe fn foo(x: *const u8) {\n    println!(\"{}\", unsafe { *x });\n}\n",
        "octal_escapes" => "### What it does\nChecks for `\\0` escapes in string and byte literals that look like octal\ncharacter escapes in C.\n### Why is this bad?\nC and other languages support octal character escapes in strings, where\na backslash is followed by up to three octal digits. For example, `\\033`\nstands for the ASCII character 27 (ESC). Rust does not support this\nnotation, but has the escape code `\\0` which stands for a null\nbyte/character, and any following digits do not form part of the escape\nsequence. Therefore, `\\033` is not a compiler error but the result may\nbe surprising.\n### Known problems\nThe actual meaning can be the intended one. `\\x00` can be used in these\ncases to be unambiguous.\nThe lint does not trigger for format strings in `print!()`, `write!()`\nand friends since the string is already preprocessed when Clippy lints\ncan see it.\n\n// Bad\nlet one = \"\\033[1m Bold? \\033[0m\";  // \\033 intended as escape\nlet two = \"\\033\\0\";                 // \\033 intended as null-3-3\n// Good\nlet one = \"\\x1b[1mWill this be bold?\\x1b[0m\";\nlet two = \"\\x0033\\x00\";\n",
        "ok_expect" => "### What it does\nChecks for usage of `ok().expect(..)`.\n### Why is this bad?\nBecause you usually call `expect()` on the `Result`\ndirectly to get a better error message.\n### Known problems\nThe error type needs to implement `Debug`\n### Example\n\n// Bad\nx.ok().expect(\"why did I do this again?\");\n// Good\nx.expect(\"why did I do this again?\");\n",
        "only_used_in_recursion" => "### What it does\nChecks for arguments that are only used in recursion with no side-effects.\n### Why is this bad?\nIt could contain a useless calculation and can make function simpler.\nThe arguments can be involved in calculations and assignments but as long as\nthe calculations have no side-effects (function calls or mutating dereference)\nand the assigned variables are also only in recursion, it is useless.\n### Known problems\nToo many code paths in the linting code are currently untested and prone to produce false\npositives or are prone to have performance implications.\nIn some cases, this would not catch all useless arguments.\n\nfn foo(a: usize, b: usize) -> usize {\n    let f = |x| x + 1;\n    if a == 0 {\n        1\n    } else {\n        foo(a - 1, f(b))\n    }\n}\n\nFor example, the argument `b` is only used in recursion, but the lint would not catch it.\nList of some examples that can not be caught:\n- binary operation of non-primitive types\n- closure usage\n- some `break` relative operations\n- struct pattern binding\nAlso, when you recurse the function name with path segments, it is not possible to detect.\n### Example\n\nfn f(a: usize, b: usize) -> usize {\n    if a == 0 {\n        1\n    } else {\n        f(a - 1, b + 1)\n    }\n}\n\nUse instead:\n\nfn f(a: usize) -> usize {\n    if a == 0 {\n        1\n    } else {\n        f(a - 1)\n    }\n}\n",
        "op_ref" => "### What it does\nChecks for arguments to `==` which have their address\ntaken to satisfy a bound\nand suggests to dereference the other argument instead\n### Why is this bad?\nIt is more idiomatic to dereference the other argument.\n### Known problems\nNone\n### Example\n\n// Bad\n&x == y\n// Good\nx == *y\n",
        "option_as_ref_deref" => "### What it does\nChecks for usage of `_.as_ref().map(Deref::deref)` or it's aliases (such as String::as_str).\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.as_deref()`.\n### Example\n\nopt.as_ref().map(String::as_str)\n\nCan be written as\n\nopt.as_deref()\n",
        "option_env_unwrap" => "### What it does\nChecks for usage of `option_env!(...).unwrap()` and\nsuggests usage of the `env!` macro.\n### Why is this bad?\nUnwrapping the result of `option_env!` will panic\nat run-time if the environment variable doesn't exist, whereas `env!`\ncatches it at compile-time.\n### Example\n\nlet _ = option_env!(\"HOME\").unwrap();\n\nIs better expressed as:\n\nlet _ = env!(\"HOME\");\n",
        "option_filter_map" => "### What it does\nChecks for indirect collection of populated `Option`\n### Why is this bad?\n`Option` is like a collection of 0-1 things, so `flatten`\nautomatically does this without suspicious-looking `unwrap` calls.\n### Example\n\nlet _ = std::iter::empty::<Option<i32>>().filter(Option::is_some).map(Option::unwrap);\n\nUse instead:\n\nlet _ = std::iter::empty::<Option<i32>>().flatten();\n",
        "option_if_let_else" => "### What it does\nLints usage of `if let Some(v) = ... { y } else { x }` which is more\nidiomatically done with `Option::map_or` (if the else bit is a pure\nexpression) or `Option::map_or_else` (if the else bit is an impure\nexpression).\n### Why is this bad?\nUsing the dedicated functions of the `Option` type is clearer and\nmore concise than an `if let` expression.\n### Known problems\nThis lint uses a deliberately conservative metric for checking\nif the inside of either body contains breaks or continues which will\ncause it to not suggest a fix if either block contains a loop with\ncontinues or breaks contained within the loop.\n### Example\n\nlet _ = if let Some(foo) = optional {\n    foo\n} else {\n    5\n};\nlet _ = if let Some(foo) = optional {\n    foo\n} else {\n    let y = do_complicated_function();\n    y*y\n};\n\nshould be\n\nlet _ = optional.map_or(5, |foo| foo);\nlet _ = optional.map_or_else(||{\n    let y = do_complicated_function();\n    y*y\n}, |foo| foo);\n",
        "option_map_or_none" => "### What it does\nChecks for usage of `_.map_or(None, _)`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.and_then(_)`.\n### Known problems\nThe order of the arguments is not in execution order.\n### Example\n\n// Bad\nopt.map_or(None, |a| Some(a + 1));\n// Good\nopt.and_then(|a| Some(a + 1));\n",
        "option_map_unit_fn" => "### What it does\nChecks for usage of `option.map(f)` where f is a function\nor closure that returns the unit type `()`.\n### Why is this bad?\nReadability, this can be written more clearly with\nan if let statement\n### Example\n\nlet x: Option<String> = do_stuff();\nx.map(log_err_msg);\nx.map(|msg| log_err_msg(format_msg(msg)));\n\nThe correct use would be:\n\nlet x: Option<String> = do_stuff();\nif let Some(msg) = x {\n    log_err_msg(msg);\n}\nif let Some(msg) = x {\n    log_err_msg(format_msg(msg));\n}\n",
        "option_option" => "### What it does\nChecks for use of `Option<Option<_>>` in function signatures and type\ndefinitions\n### Why is this bad?\n`Option<_>` represents an optional value. `Option<Option<_>>`\nrepresents an optional optional value which is logically the same thing as an optional\nvalue but has an unneeded extra level of wrapping.\nIf you have a case where `Some(Some(_))`, `Some(None)` and `None` are distinct cases,\nconsider a custom `enum` instead, with clear names for each case.\n### Example\n\nfn get_data() -> Option<Option<u32>> {\n    None\n}\n\nBetter:\n\npub enum Contents {\n    Data(Vec<u8>), // Was Some(Some(Vec<u8>))\n    NotYetFetched, // Was Some(None)\n    None,          // Was None\n}\nfn get_data() -> Contents {\n    Contents::None\n}\n",
        "or_fun_call" => "### What it does\nChecks for calls to `.or(foo(..))`, `.unwrap_or(foo(..))`,\netc., and suggests to use `or_else`, `unwrap_or_else`, etc., or\n`unwrap_or_default` instead.\n### Why is this bad?\nThe function will always be called and potentially\nallocate an object acting as the default.\n### Known problems\nIf the function has side-effects, not calling it will\nchange the semantic of the program, but you shouldn't rely on that anyway.\n### Example\n\nfoo.unwrap_or(String::new());\n\nUse instead:\n\nfoo.unwrap_or_else(String::new);\n// or\nfoo.unwrap_or_default();\n",
        "or_then_unwrap" => "### What it does\nChecks for `.or(…).unwrap()` calls to Options and Results.\n### Why is this bad?\nYou should use `.unwrap_or(…)` instead for clarity.\n### Example\n\n// Result\nlet value = result.or::<Error>(Ok(fallback)).unwrap();\n// Option\nlet value = option.or(Some(fallback)).unwrap();\n\nUse instead:\n\n// Result\nlet value = result.unwrap_or(fallback);\n// Option\nlet value = option.unwrap_or(fallback);\n",
        "out_of_bounds_indexing" => "### What it does\nChecks for out of bounds array indexing with a constant\nindex.\n### Why is this bad?\nThis will always panic at runtime.\n### Known problems\nHopefully none.\n### Example\n\nlet x = [1, 2, 3, 4];\n// Bad\nx[9];\n&x[2..9];\n// Good\nx[0];\nx[3];\n",
        "outer_expn_expn_data" => "### What it does\nChecks for calls to `cx.outer().expn_data()` and suggests to use\nthe `cx.outer_expn_data()`\n### Why is this bad?\n`cx.outer_expn_data()` is faster and more concise.\n### Example\nBad:\n\nexpr.span.ctxt().outer().expn_data()\n\nGood:\n\nexpr.span.ctxt().outer_expn_data()\n",
        "overflow_check_conditional" => "### What it does\nDetects classic underflow/overflow checks.\n### Why is this bad?\nMost classic C underflow/overflow checks will fail in\nRust. Users can use functions like `overflowing_*` and `wrapping_*` instead.\n### Example\n\na + b < a;\n",
        "panic" => "### What it does\nChecks for usage of `panic!`.\n### Why is this bad?\n`panic!` will stop the execution of the executable\n### Example\n\npanic!(\"even with a good reason\");\n",
        "panic_in_result_fn" => "### What it does\nChecks for usage of `panic!`, `unimplemented!`, `todo!`, `unreachable!` or assertions in a function of type result.\n### Why is this bad?\nFor some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence panicking macros should be avoided.\n### Known problems\nFunctions called from a function returning a `Result` may invoke a panicking macro. This is not checked.\n### Example\n\nfn result_with_panic() -> Result<bool, String>\n{\n    panic!(\"error\");\n}\n\nUse instead:\n\nfn result_without_panic() -> Result<bool, String> {\n    Err(String::from(\"error\"))\n}\n",
        "panicking_unwrap" => "### What it does\nChecks for calls of `unwrap[_err]()` that will always fail.\n### Why is this bad?\nIf panicking is desired, an explicit `panic!()` should be used.\n### Known problems\nThis lint only checks `if` conditions not assignments.\nSo something like `let x: Option<()> = None; x.unwrap();` will not be recognized.\n### Example\n\nif option.is_none() {\n    do_something_with(option.unwrap())\n}\n\nThis code will always panic. The if condition should probably be inverted.",
        "partialeq_ne_impl" => "### What it does\nChecks for manual re-implementations of `PartialEq::ne`.\n### Why is this bad?\n`PartialEq::ne` is required to always return the\nnegated result of `PartialEq::eq`, which is exactly what the default\nimplementation does. Therefore, there should never be any need to\nre-implement it.\n### Example\n\nstruct Foo;\nimpl PartialEq for Foo {\n   fn eq(&self, other: &Foo) -> bool { true }\n   fn ne(&self, other: &Foo) -> bool { !(self == other) }\n}\n",
        "path_buf_push_overwrite" => "### What it does\ncalls on `PathBuf` that can cause overwrites.\n### Why is this bad?\nCalling `push` with a root path at the start can overwrite the\nprevious defined path.\n### Example\n\nuse std::path::PathBuf;\nlet mut x = PathBuf::from(\"/foo\");\nx.push(\"/bar\");\nassert_eq!(x, PathBuf::from(\"/bar\"));\n\nCould be written:\n\nuse std::path::PathBuf;\nlet mut x = PathBuf::from(\"/foo\");\nx.push(\"bar\");\nassert_eq!(x, PathBuf::from(\"/foo/bar\"));\n",
        "pattern_type_mismatch" => "### What it does\nChecks for patterns that aren't exact representations of the types\nthey are applied to.\nTo satisfy this lint, you will have to adjust either the expression that is matched\nagainst or the pattern itself, as well as the bindings that are introduced by the\nadjusted patterns. For matching you will have to either dereference the expression\nwith the `*` operator, or amend the patterns to explicitly match against `&<pattern>`\nor `&mut <pattern>` depending on the reference mutability. For the bindings you need\nto use the inverse. You can leave them as plain bindings if you wish for the value\nto be copied, but you must use `ref mut <variable>` or `ref <variable>` to construct\na reference into the matched structure.\nIf you are looking for a way to learn about ownership semantics in more detail, it\nis recommended to look at IDE options available to you to highlight types, lifetimes\nand reference semantics in your code. The available tooling would expose these things\nin a general way even outside of the various pattern matching mechanics. Of course\nthis lint can still be used to highlight areas of interest and ensure a good understanding\nof ownership semantics.\n### Why is this bad?\nIt isn't bad in general. But in some contexts it can be desirable\nbecause it increases ownership hints in the code, and will guard against some changes\nin ownership.\n### Example\nThis example shows the basic adjustments necessary to satisfy the lint. Note how\nthe matched expression is explicitly dereferenced with `*` and the `inner` variable\nis bound to a shared borrow via `ref inner`.\n\n// Bad\nlet value = &Some(Box::new(23));\nmatch value {\n    Some(inner) => println!(\"{}\", inner),\n    None => println!(\"none\"),\n}\n// Good\nlet value = &Some(Box::new(23));\nmatch *value {\n    Some(ref inner) => println!(\"{}\", inner),\n    None => println!(\"none\"),\n}\n\nThe following example demonstrates one of the advantages of the more verbose style.\nNote how the second version uses `ref mut a` to explicitly declare `a` a shared mutable\nborrow, while `b` is simply taken by value. This ensures that the loop body cannot\naccidentally modify the wrong part of the structure.\n\n// Bad\nlet mut values = vec![(2, 3), (3, 4)];\nfor (a, b) in &mut values {\n    *a += *b;\n}\n// Good\nlet mut values = vec![(2, 3), (3, 4)];\nfor &mut (ref mut a, b) in &mut values {\n    *a += b;\n}\n",
        "possible_missing_comma" => "### What it does\nChecks for possible missing comma in an array. It lints if\nan array element is a binary operator expression and it lies on two lines.\n### Why is this bad?\nThis could lead to unexpected results.\n### Example\n\nlet a = &[\n    -1, -2, -3 // <= no comma here\n    -4, -5, -6\n];\n",
        "precedence" => "### What it does\nChecks for operations where precedence may be unclear\nand suggests to add parentheses. Currently it catches the following:\n* mixed usage of arithmetic and bit shifting/combining operators without\nparentheses\n* a \"negative\" numeric literal (which is really a unary `-` followed by a\nnumeric literal)\n  followed by a method call\n### Why is this bad?\nNot everyone knows the precedence of those operators by\nheart, so expressions like these may trip others trying to reason about the\ncode.\n### Example\n* `1 << 2 + 3` equals 32, while `(1 << 2) + 3` equals 7\n* `-1i32.abs()` equals -1, while `(-1i32).abs()` equals 1",
        "print_in_format_impl" => "### What it does\nChecks for use of `println`, `print`, `eprintln` or `eprint` in an\nimplementation of a formatting trait.\n### Why is this bad?\nUsing a print macro is likely unintentional since formatting traits\nshould write to the `Formatter`, not stdout/stderr.\n### Example\n\nuse std::fmt::{Display, Error, Formatter};\nstruct S;\nimpl Display for S {\n    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n        println!(\"S\");\n        Ok(())\n    }\n}\n\nUse instead:\n\nuse std::fmt::{Display, Error, Formatter};\nstruct S;\nimpl Display for S {\n    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n        writeln!(f, \"S\");\n        Ok(())\n    }\n}\n",
        "print_literal" => "### What it does\nThis lint warns about the use of literals as `print!`/`println!` args.\n### Why is this bad?\nUsing literals as `println!` args is inefficient\n(c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n(i.e., just put the literal in the format string)\n### Known problems\nWill also warn with macro calls as arguments that expand to literals\n-- e.g., `println!(\"{}\", env!(\"FOO\"))`.\n### Example\n\nprintln!(\"{}\", \"foo\");\n\nuse the literal without formatting:\n\nprintln!(\"foo\");\n",
        "print_stderr" => "### What it does\nChecks for printing on *stderr*. The purpose of this lint\nis to catch debugging remnants.\n### Why is this bad?\nPeople often print on *stderr* while debugging an\napplication and might forget to remove those prints afterward.\n### Known problems\n* Only catches `eprint!` and `eprintln!` calls.\n* The lint level is unaffected by crate attributes. The level can still\n  be set for functions, modules and other items. To change the level for\n  the entire crate, please use command line flags. More information and a\n  configuration example can be found in [clippy#6610].\n[clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n### Example\n\neprintln!(\"Hello world!\");\n",
        "print_stdout" => "### What it does\nChecks for printing on *stdout*. The purpose of this lint\nis to catch debugging remnants.\n### Why is this bad?\nPeople often print on *stdout* while debugging an\napplication and might forget to remove those prints afterward.\n### Known problems\n* Only catches `print!` and `println!` calls.\n* The lint level is unaffected by crate attributes. The level can still\n  be set for functions, modules and other items. To change the level for\n  the entire crate, please use command line flags. More information and a\n  configuration example can be found in [clippy#6610].\n[clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n### Example\n\nprintln!(\"Hello world!\");\n",
        "print_with_newline" => "### What it does\nThis lint warns when you use `print!()` with a format\nstring that ends in a newline.\n### Why is this bad?\nYou should use `println!()` instead, which appends the\nnewline.\n### Example\n\nprint!(\"Hello {}!\\n\", name);\n\nuse println!() instead\n\nprintln!(\"Hello {}!\", name);\n",
        "println_empty_string" => "### What it does\nThis lint warns when you use `println!(\"\")` to\nprint a newline.\n### Why is this bad?\nYou should use `println!()`, which is simpler.\n### Example\n\n// Bad\nprintln!(\"\");\n// Good\nprintln!();\n",
        "produce_ice" => "### What it does\nNot an actual lint. This lint is only meant for testing our customized internal compiler\nerror message by calling `panic`.\n### Why is this bad?\nICE in large quantities can damage your teeth\n### Example\nBad:\n\n🍦🍦🍦🍦🍦\n",
        "ptr_arg" => "### What it does\nThis lint checks for function arguments of type `&String`, `&Vec`,\n`&PathBuf`, and `Cow<_>`. It will also suggest you replace `.clone()` calls\nwith the appropriate `.to_owned()`/`to_string()` calls.\n### Why is this bad?\nRequiring the argument to be of the specific size\nmakes the function less useful for no benefit; slices in the form of `&[T]`\nor `&str` usually suffice and can be obtained from other types, too.\n### Known problems\nThere may be `fn(&Vec)`-typed references pointing to your function.\nIf you have them, you will get a compiler error after applying this lint's\nsuggestions. You then have the choice to undo your changes or change the\ntype of the reference.\nNote that if the function is part of your public interface, there may be\nother crates referencing it, of which you may not be aware. Carefully\ndeprecate the function before applying the lint suggestions in this case.\n### Example\n\n// Bad\nfn foo(&Vec<u32>) { .. }\n// Good\nfn foo(&[u32]) { .. }\n",
        "ptr_as_ptr" => "### What it does\nChecks for expressions where a character literal is cast\nto `u8` and suggests using a byte literal instead.\n### Why is this bad?\nIn general, casting values to smaller types is\nerror-prone and should be avoided where possible. In the particular case of\nconverting a character literal to u8, it is easy to avoid by just using a\nbyte literal instead. As an added bonus, `b'a'` is even slightly shorter\nthan `'a' as u8`.\n### Example\n\n'x' as u8\n\nA better version, using the byte literal:\n\nb'x'\n\n### What it does\nChecks for `as` casts between raw pointers without changing its mutability,\nnamely `*const T` to `*const U` and `*mut T` to `*mut U`.\n### Why is this bad?\nThough `as` casts between raw pointers is not terrible, `pointer::cast` is safer because\nit cannot accidentally change the pointer's mutability nor cast the pointer to other types like `usize`.\n### Example\n\nlet ptr: *const u32 = &42_u32;\nlet mut_ptr: *mut u32 = &mut 42_u32;\nlet _ = ptr as *const i32;\nlet _ = mut_ptr as *mut i32;\n\nUse instead:\n\nlet ptr: *const u32 = &42_u32;\nlet mut_ptr: *mut u32 = &mut 42_u32;\nlet _ = ptr.cast::<i32>();\nlet _ = mut_ptr.cast::<i32>();\n",
        "ptr_eq" => "### What it does\nUse `std::ptr::eq` when applicable\n### Why is this bad?\n`ptr::eq` can be used to compare `&T` references\n(which coerce to `*const T` implicitly) by their address rather than\ncomparing the values they point to.\n### Example\n\nlet a = &[1, 2, 3];\nlet b = &[1, 2, 3];\nassert!(a as *const _ as usize == b as *const _ as usize);\n\nUse instead:\n\nlet a = &[1, 2, 3];\nlet b = &[1, 2, 3];\nassert!(std::ptr::eq(a, b));\n",
        "ptr_offset_with_cast" => "### What it does\nChecks for usage of the `offset` pointer method with a `usize` casted to an\n`isize`.\n### Why is this bad?\nIf we’re always increasing the pointer address, we can avoid the numeric\ncast by using the `add` method instead.\n### Example\n\nlet vec = vec![b'a', b'b', b'c'];\nlet ptr = vec.as_ptr();\nlet offset = 1_usize;\nunsafe {\n    ptr.offset(offset as isize);\n}\n\nCould be written:\n\nlet vec = vec![b'a', b'b', b'c'];\nlet ptr = vec.as_ptr();\nlet offset = 1_usize;\nunsafe {\n    ptr.add(offset);\n}\n",
        "pub_use" => "### What it does\nRestricts the usage of `pub use ...`\n### Why is this bad?\n`pub use` is usually fine, but a project may wish to limit `pub use` instances to prevent\nunintentional exports or to encourage placing exported items directly in public modules\n### Example\n\npub mod outer {\n    mod inner {\n        pub struct Test {}\n    }\n    pub use inner::Test;\n}\nuse outer::Test;\n\nUse instead:\n\npub mod outer {\n    pub struct Test {}\n}\nuse outer::Test;\n",
        "question_mark" => "### What it does\nChecks for expressions that could be replaced by the question mark operator.\n### Why is this bad?\nQuestion mark usage is more idiomatic.\n### Example\n\nif option.is_none() {\n    return None;\n}\n\nCould be written:\n\noption?;\n",
        "range_minus_one" => "### What it does\nChecks for inclusive ranges where 1 is subtracted from\nthe upper bound, e.g., `x..=(y-1)`.\n### Why is this bad?\nThe code is more readable with an exclusive range\nlike `x..y`.\n### Known problems\nThis will cause a warning that cannot be fixed if\nthe consumer of the range only accepts a specific range type, instead of\nthe generic `RangeBounds` trait\n([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n### Example\n\nfor x..=(y-1) { .. }\n\nCould be written as\n\nfor x..y { .. }\n",
        "range_plus_one" => "### What it does\nChecks for exclusive ranges where 1 is added to the\nupper bound, e.g., `x..(y+1)`.\n### Why is this bad?\nThe code is more readable with an inclusive range\nlike `x..=y`.\n### Known problems\nWill add unnecessary pair of parentheses when the\nexpression is not wrapped in a pair but starts with an opening parenthesis\nand ends with a closing one.\nI.e., `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\nAlso in many cases, inclusive ranges are still slower to run than\nexclusive ranges, because they essentially add an extra branch that\nLLVM may fail to hoist out of the loop.\nThis will cause a warning that cannot be fixed if the consumer of the\nrange only accepts a specific range type, instead of the generic\n`RangeBounds` trait\n([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n### Example\n\nfor x..(y+1) { .. }\n\nCould be written as\n\nfor x..=y { .. }\n",
        "range_zip_with_len" => "### What it does\nChecks for zipping a collection with the range of\n`0.._.len()`.\n### Why is this bad?\nThe code is better expressed with `.enumerate()`.\n### Example\n\nx.iter().zip(0..x.len());\n\nCould be written as\n\nx.iter().enumerate();\n",
        "rc_buffer" => "### What it does\nChecks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\n### Why is this bad?\nExpressions such as `Rc<String>` usually have no advantage over `Rc<str>`, since\nit is larger and involves an extra level of indirection, and doesn't implement `Borrow<str>`.\nWhile mutating a buffer type would still be possible with `Rc::get_mut()`, it only\nworks if there are no additional references yet, which usually defeats the purpose of\nenclosing it in a shared ownership type. Instead, additionally wrapping the inner\ntype with an interior mutable container (such as `RefCell` or `Mutex`) would normally\nbe used.\n### Known problems\nThis pattern can be desirable to avoid the overhead of a `RefCell` or `Mutex` for\ncases where mutation only happens before there are any additional references.\n### Example\n\nfn foo(interned: Rc<String>) { ... }\n\nBetter:\n\nfn foo(interned: Rc<str>) { ... }\n",
        "rc_clone_in_vec_init" => "### What it does\nChecks for reference-counted pointers (`Arc`, `Rc`, `rc::Weak`, and `sync::Weak`)\nin `vec![elem; len]`\n### Why is this bad?\nThis will create `elem` once and clone it `len` times - doing so with `Arc`/`Rc`/`Weak`\nis a bit misleading, as it will create references to the same pointer, rather\nthan different instances.\n### Example\n\nlet v = vec![std::sync::Arc::new(\"some data\".to_string()); 100];\n// or\nlet v = vec![std::rc::Rc::new(\"some data\".to_string()); 100];\n\nUse instead:\n\n// Initialize each value separately:\nlet mut data = Vec::with_capacity(100);\nfor _ in 0..100 {\n    data.push(std::rc::Rc::new(\"some data\".to_string()));\n}\n// Or if you want clones of the same reference,\n// Create the reference beforehand to clarify that\n// it should be cloned for each value\nlet data = std::rc::Rc::new(\"some data\".to_string());\nlet v = vec![data; 100];\n",
        "rc_mutex" => "### What it does\nChecks for `Rc<Mutex<T>>`.\n### Why is this bad?\n`Rc` is used in single thread and `Mutex` is used in multi thread.\nConsider using `Rc<RefCell<T>>` in single thread or `Arc<Mutex<T>>` in multi thread.\n### Known problems\nSometimes combining generic types can lead to the requirement that a\ntype use Rc in conjunction with Mutex. We must consider those cases false positives, but\nalas they are quite hard to rule out. Luckily they are also rare.\n### Example\n\nuse std::rc::Rc;\nuse std::sync::Mutex;\nfn foo(interned: Rc<Mutex<i32>>) { ... }\n\nBetter:\n\nuse std::rc::Rc;\nuse std::cell::RefCell\nfn foo(interned: Rc<RefCell<i32>>) { ... }\n",
        "recursive_format_impl" => "### What it does\nChecks for format trait implementations (e.g. `Display`) with a recursive call to itself\nwhich uses `self` as a parameter.\nThis is typically done indirectly with the `write!` macro or with `to_string()`.\n### Why is this bad?\nThis will lead to infinite recursion and a stack overflow.\n### Example\n\nuse std::fmt;\nstruct Structure(i32);\nimpl fmt::Display for Structure {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.to_string())\n    }\n}\n\nUse instead:\n\nuse std::fmt;\nstruct Structure(i32);\nimpl fmt::Display for Structure {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.0)\n    }\n}\n",
        "redundant_allocation" => "### What it does\nChecks for use of redundant allocations anywhere in the code.\n### Why is this bad?\nExpressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Arc<T>>`, `Rc<Box<T>>`, `Arc<&T>`, `Arc<Rc<T>>`,\n`Arc<Arc<T>>`, `Arc<Box<T>>`, `Box<&T>`, `Box<Rc<T>>`, `Box<Arc<T>>`, `Box<Box<T>>`, add an unnecessary level of indirection.\n### Example\n\nfn foo(bar: Rc<&usize>) {}\n\nBetter:\n\nfn foo(bar: &usize) {}\n",
        "redundant_clone" => "### What it does\nChecks for a redundant `clone()` (and its relatives) which clones an owned\nvalue that is going to be dropped without further use.\n### Why is this bad?\nIt is not always possible for the compiler to eliminate useless\nallocations and deallocations generated by redundant `clone()`s.\n### Known problems\nFalse-negatives: analysis performed by this lint is conservative and limited.\n### Example\n\n{\n    let x = Foo::new();\n    call(x.clone());\n    call(x.clone()); // this can just pass `x`\n}\n[\"lorem\", \"ipsum\"].join(\" \").to_string();\nPath::new(\"/a/b\").join(\"c\").to_path_buf();\n",
        "redundant_closure" => "### What it does\nChecks for closures which just call another function where\nthe function can be called directly. `unsafe` functions or calls where types\nget adjusted are ignored.\n### Why is this bad?\nNeedlessly creating a closure adds code for no benefit\nand gives the optimizer more work.\n### Known problems\nIf creating the closure inside the closure has a side-\neffect then moving the closure creation out will change when that side-\neffect runs.\nSee [#1439](https://github.com/rust-lang/rust-clippy/issues/1439) for more details.\n### Example\n\n// Bad\nxs.map(|x| foo(x))\n// Good\nxs.map(foo)\n\nwhere `foo(_)` is a plain function that takes the exact argument type of\n`x`.",
        "redundant_closure_call" => "### What it does\nDetects closures called in the same expression where they\nare defined.\n### Why is this bad?\nIt is unnecessarily adding to the expression's\ncomplexity.\n### Example\n\n// Bad\nlet a = (|| 42)()\n// Good\nlet a = 42\n",
        "redundant_closure_for_method_calls" => "### What it does\nChecks for closures which only invoke a method on the closure\nargument and can be replaced by referencing the method directly.\n### Why is this bad?\nIt's unnecessary to create the closure.\n### Example\n\nSome('a').map(|s| s.to_uppercase());\n\nmay be rewritten as\n\nSome('a').map(char::to_uppercase);\n",
        "redundant_else" => "### What it does\nChecks for `else` blocks that can be removed without changing semantics.\n### Why is this bad?\nThe `else` block adds unnecessary indentation and verbosity.\n### Known problems\nSome may prefer to keep the `else` block for clarity.\n### Example\n\nfn my_func(count: u32) {\n    if count == 0 {\n        print!(\"Nothing to do\");\n        return;\n    } else {\n        print!(\"Moving on...\");\n    }\n}\n\nUse instead:\n\nfn my_func(count: u32) {\n    if count == 0 {\n        print!(\"Nothing to do\");\n        return;\n    }\n    print!(\"Moving on...\");\n}\n",
        "redundant_feature_names" => "### What it does\nChecks for feature names with prefix `use-`, `with-` or suffix `-support`\n### Why is this bad?\nThese prefixes and suffixes have no significant meaning.\n### Example\n\n[features]\ndefault = [\"use-abc\", \"with-def\", \"ghi-support\"]\nuse-abc = []  // redundant\nwith-def = []   // redundant\nghi-support = []   // redundant\n\nUse instead:\n\n[features]\ndefault = [\"abc\", \"def\", \"ghi\"]\nabc = []\ndef = []\nghi = []\n",
        "redundant_field_names" => "### What it does\nChecks for fields in struct literals where shorthands\ncould be used.\n### Why is this bad?\nIf the field and variable names are the same,\nthe field name is redundant.\n### Example\n\nlet bar: u8 = 123;\nstruct Foo {\n    bar: u8,\n}\nlet foo = Foo { bar: bar };\n\nthe last line can be simplified to\n\nlet foo = Foo { bar };\n",
        "redundant_pattern" => "### What it does\nChecks for patterns in the form `name @ _`.\n### Why is this bad?\nIt's almost always more readable to just use direct\nbindings.\n### Example\n\n// Bad\nmatch v {\n    Some(x) => (),\n    y @ _ => (),\n}\n// Good\nmatch v {\n    Some(x) => (),\n    y => (),\n}\n",
        "redundant_pattern_matching" => "### What it does\nLint for redundant pattern matching over `Result`, `Option`,\n`std::task::Poll` or `std::net::IpAddr`\n### Why is this bad?\nIt's more concise and clear to just use the proper\nutility function\n### Known problems\nThis will change the drop order for the matched type. Both `if let` and\n`while let` will drop the value at the end of the block, both `if` and `while` will drop the\nvalue before entering the block. For most types this change will not matter, but for a few\ntypes this will not be an acceptable change (e.g. locks). See the\n[reference](https://doc.rust-lang.org/reference/destructors.html#drop-scopes) for more about\ndrop order.\n### Example\n\nif let Ok(_) = Ok::<i32, i32>(42) {}\nif let Err(_) = Err::<i32, i32>(42) {}\nif let None = None::<()> {}\nif let Some(_) = Some(42) {}\nif let Poll::Pending = Poll::Pending::<()> {}\nif let Poll::Ready(_) = Poll::Ready(42) {}\nif let IpAddr::V4(_) = IpAddr::V4(Ipv4Addr::LOCALHOST) {}\nif let IpAddr::V6(_) = IpAddr::V6(Ipv6Addr::LOCALHOST) {}\nmatch Ok::<i32, i32>(42) {\n    Ok(_) => true,\n    Err(_) => false,\n};\n\nThe more idiomatic use would be:\n\nif Ok::<i32, i32>(42).is_ok() {}\nif Err::<i32, i32>(42).is_err() {}\nif None::<()>.is_none() {}\nif Some(42).is_some() {}\nif Poll::Pending::<()>.is_pending() {}\nif Poll::Ready(42).is_ready() {}\nif IpAddr::V4(Ipv4Addr::LOCALHOST).is_ipv4() {}\nif IpAddr::V6(Ipv6Addr::LOCALHOST).is_ipv6() {}\nOk::<i32, i32>(42).is_ok();\n",
        "redundant_pub_crate" => "### What it does\nChecks for items declared `pub(crate)` that are not crate visible because they\nare inside a private module.\n### Why is this bad?\nWriting `pub(crate)` is misleading when it's redundant due to the parent\nmodule's visibility.\n### Example\n\nmod internal {\n    pub(crate) fn internal_fn() { }\n}\n\nThis function is not visible outside the module and it can be declared with `pub` or\nprivate visibility\n\nmod internal {\n    pub fn internal_fn() { }\n}\n",
        "redundant_slicing" => "### What it does\nChecks for redundant slicing expressions which use the full range, and\ndo not change the type.\n### Why is this bad?\nIt unnecessarily adds complexity to the expression.\n### Known problems\nIf the type being sliced has an implementation of `Index<RangeFull>`\nthat actually changes anything then it can't be removed. However, this would be surprising\nto people reading the code and should have a note with it.\n### Example\n\nfn get_slice(x: &[u32]) -> &[u32] {\n    &x[..]\n}\n\nUse instead:\n\nfn get_slice(x: &[u32]) -> &[u32] {\n    x\n}\n",
        "redundant_static_lifetimes" => "### What it does\nChecks for constants and statics with an explicit `'static` lifetime.\n### Why is this bad?\nAdding `'static` to every reference can create very\ncomplicated types.\n### Example\n\nconst FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n&[...]\nstatic FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n&[...]\n\nThis code can be rewritten as\n\n const FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n static FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n",
        "ref_binding_to_reference" => "### What it does\nChecks for `ref` bindings which create a reference to a reference.\n### Why is this bad?\nThe address-of operator at the use site is clearer about the need for a reference.\n### Example\n\n// Bad\nlet x = Some(\"\");\nif let Some(ref x) = x {\n    // use `x` here\n}\n// Good\nlet x = Some(\"\");\nif let Some(x) = x {\n    // use `&x` here\n}\n",
        "ref_option_ref" => "### What it does\nChecks for usage of `&Option<&T>`.\n### Why is this bad?\nSince `&` is Copy, it's useless to have a\nreference on `Option<&T>`.\n### Known problems\nIt may be irrelevant to use this lint on\npublic API code as it will make a breaking change to apply it.\n### Example\n\nlet x: &Option<&u32> = &Some(&0u32);\n\nUse instead:\n\nlet x: Option<&u32> = Some(&0u32);\n",
        "repeat_once" => "### What it does\nChecks for usage of `.repeat(1)` and suggest the following method for each types.\n- `.to_string()` for `str`\n- `.clone()` for `String`\n- `.to_vec()` for `slice`\nThe lint will evaluate constant expressions and values as arguments of `.repeat(..)` and emit a message if\nthey are equivalent to `1`. (Related discussion in [rust-clippy#7306](https://github.com/rust-lang/rust-clippy/issues/7306))\n### Why is this bad?\nFor example, `String.repeat(1)` is equivalent to `.clone()`. If cloning\nthe string is the intention behind this, `clone()` should be used.\n### Example\n\nfn main() {\n    let x = String::from(\"hello world\").repeat(1);\n}\n\nUse instead:\n\nfn main() {\n    let x = String::from(\"hello world\").clone();\n}\n",
        "rest_pat_in_fully_bound_structs" => "### What it does\nChecks for unnecessary '..' pattern binding on struct when all fields are explicitly matched.\n### Why is this bad?\nCorrectness and readability. It's like having a wildcard pattern after\nmatching all enum variants explicitly.\n### Example\n\nlet a = A { a: 5 };\n// Bad\nmatch a {\n    A { a: 5, .. } => {},\n    _ => {},\n}\n// Good\nmatch a {\n    A { a: 5 } => {},\n    _ => {},\n}\n",
        "result_map_or_into_option" => "### What it does\nChecks for usage of `_.map_or(None, Some)`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.ok()`.\n### Example\nBad:\n\nassert_eq!(Some(1), r.map_or(None, Some));\n\nGood:\n\nassert_eq!(Some(1), r.ok());\n",
        "result_map_unit_fn" => "### What it does\nChecks for usage of `result.map(f)` where f is a function\nor closure that returns the unit type `()`.\n### Why is this bad?\nReadability, this can be written more clearly with\nan if let statement\n### Example\n\nlet x: Result<String, String> = do_stuff();\nx.map(log_err_msg);\nx.map(|msg| log_err_msg(format_msg(msg)));\n\nThe correct use would be:\n\nlet x: Result<String, String> = do_stuff();\nif let Ok(msg) = x {\n    log_err_msg(msg);\n};\nif let Ok(msg) = x {\n    log_err_msg(format_msg(msg));\n};\n",
        "result_unit_err" => "### What it does\nChecks for public functions that return a `Result`\nwith an `Err` type of `()`. It suggests using a custom type that\nimplements `std::error::Error`.\n### Why is this bad?\nUnit does not implement `Error` and carries no\nfurther information about what went wrong.\n### Known problems\nOf course, this lint assumes that `Result` is used\nfor a fallible operation (which is after all the intended use). However\ncode may opt to (mis)use it as a basic two-variant-enum. In that case,\nthe suggestion is misguided, and the code should use a custom enum\ninstead.\n### Examples\n\npub fn read_u8() -> Result<u8, ()> { Err(()) }\n\nshould become\n\nuse std::fmt;\n#[derive(Debug)]\npub struct EndOfStream;\nimpl fmt::Display for EndOfStream {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"End of Stream\")\n    }\n}\nimpl std::error::Error for EndOfStream { }\npub fn read_u8() -> Result<u8, EndOfStream> { Err(EndOfStream) }\n\nNote that there are crates that simplify creating the error type, e.g.\n[`thiserror`](https://docs.rs/thiserror).",
        "return_self_not_must_use" => "### What it does\nThis lint warns when a method returning `Self` doesn't have the `#[must_use]` attribute.\n### Why is this bad?\nMethods returning `Self` often create new values, having the `#[must_use]` attribute\nprevents users from \"forgetting\" to use the newly created value.\nThe `#[must_use]` attribute can be added to the type itself to ensure that instances\nare never forgotten. Functions returning a type marked with `#[must_use]` will not be\nlinted, as the usage is already enforced by the type attribute.\n### Limitations\nThis lint is only applied on methods taking a `self` argument. It would be mostly noise\nif it was added on constructors for example.\n### Example\nMissing attribute\n\npub struct Bar;\nimpl Bar {\n    // Bad\n    pub fn bar(&self) -> Self {\n        Self\n    }\n}\n\nIt's better to have the `#[must_use]` attribute on the method like this:\n\npub struct Bar;\nimpl Bar {\n    #[must_use]\n    pub fn bar(&self) -> Self {\n        Self\n    }\n}\n\nOr on the type definition like this:\n\n#[must_use]\npub struct Bar;\nimpl Bar {\n    pub fn bar(&self) -> Self {\n        Self\n    }\n}\n",
        "reversed_empty_ranges" => "### What it does\nChecks for range expressions `x..y` where both `x` and `y`\nare constant and `x` is greater or equal to `y`.\n### Why is this bad?\nEmpty ranges yield no values so iterating them is a no-op.\nMoreover, trying to use a reversed range to index a slice will panic at run-time.\n### Example\n\nfn main() {\n    (10..=0).for_each(|x| println!(\"{}\", x));\n    let arr = [1, 2, 3, 4, 5];\n    let sub = &arr[3..1];\n}\n\nUse instead:\n\nfn main() {\n    (0..=10).rev().for_each(|x| println!(\"{}\", x));\n    let arr = [1, 2, 3, 4, 5];\n    let sub = &arr[1..3];\n}\n",
        "same_functions_in_if_condition" => "### What it does\nChecks for consecutive `if`s with the same function call.\n### Why is this bad?\nThis is probably a copy & paste error.\nDespite the fact that function can have side effects and `if` works as\nintended, such an approach is implicit and can be considered a \"code smell\".\n### Example\n\nif foo() == bar {\n    …\n} else if foo() == bar {\n    …\n}\n\nThis probably should be:\n\nif foo() == bar {\n    …\n} else if foo() == baz {\n    …\n}\n\nor if the original code was not a typo and called function mutates a state,\nconsider move the mutation out of the `if` condition to avoid similarity to\na copy & paste error:\n\nlet first = foo();\nif first == bar {\n    …\n} else {\n    let second = foo();\n    if second == bar {\n    …\n    }\n}\n",
        "same_item_push" => "### What it does\nChecks whether a for loop is being used to push a constant\nvalue into a Vec.\n### Why is this bad?\nThis kind of operation can be expressed more succinctly with\n`vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\nhave better performance.\n### Example\n\nlet item1 = 2;\nlet item2 = 3;\nlet mut vec: Vec<u8> = Vec::new();\nfor _ in 0..20 {\n   vec.push(item1);\n}\nfor _ in 0..30 {\n    vec.push(item2);\n}\n\ncould be written as\n\nlet item1 = 2;\nlet item2 = 3;\nlet mut vec: Vec<u8> = vec![item1; 20];\nvec.resize(20 + 30, item2);\n",
        "same_name_method" => "### What it does\nIt lints if a struct has two methods with the same name:\none from a trait, another not from trait.\n### Why is this bad?\nConfusing.\n### Example\n\ntrait T {\n    fn foo(&self) {}\n}\nstruct S;\nimpl T for S {\n    fn foo(&self) {}\n}\nimpl S {\n    fn foo(&self) {}\n}\n",
        "search_is_some" => "### What it does\nChecks for an iterator or string search (such as `find()`,\n`position()`, or `rposition()`) followed by a call to `is_some()` or `is_none()`.\n### Why is this bad?\nReadability, this can be written more concisely as:\n* `_.any(_)`, or `_.contains(_)` for `is_some()`,\n* `!_.any(_)`, or `!_.contains(_)` for `is_none()`.\n### Example\n\nlet vec = vec![1];\nvec.iter().find(|x| **x == 0).is_some();\nlet _ = \"hello world\".find(\"world\").is_none();\n\nCould be written as\n\nlet vec = vec![1];\nvec.iter().any(|x| *x == 0);\nlet _ = !\"hello world\".contains(\"world\");\n",
        "self_assignment" => "### What it does\nChecks for explicit self-assignments.\n### Why is this bad?\nSelf-assignments are redundant and unlikely to be\nintentional.\n### Known problems\nIf expression contains any deref coercions or\nindexing operations they are assumed not to have any side effects.\n### Example\n\nstruct Event {\n    id: usize,\n    x: i32,\n    y: i32,\n}\nfn copy_position(a: &mut Event, b: &Event) {\n    a.x = b.x;\n    a.y = a.y;\n}\n",
        "self_named_constructors" => "### What it does\nWarns when constructors have the same name as their types.\n### Why is this bad?\nRepeating the name of the type is redundant.\n### Example\n\nstruct Foo {}\nimpl Foo {\n    pub fn foo() -> Foo {\n        Foo {}\n    }\n}\n\nUse instead:\n\nstruct Foo {}\nimpl Foo {\n    pub fn new() -> Foo {\n        Foo {}\n    }\n}\n",
        "self_named_module_files" => "### What it does\nChecks that module layout uses only `mod.rs` files.\n### Why is this bad?\nHaving multiple module layout styles in a project can be confusing.\n### Example\n\nsrc/\n  stuff/\n    stuff_files.rs\n  stuff.rs\n  lib.rs\n\nUse instead:\n\nsrc/\n  stuff/\n    stuff_files.rs\n    mod.rs\n  lib.rs\n",
        "semicolon_if_nothing_returned" => "### What it does\nLooks for blocks of expressions and fires if the last expression returns\n`()` but is not followed by a semicolon.\n### Why is this bad?\nThe semicolon might be optional but when extending the block with new\ncode, it doesn't require a change in previous last line.\n### Example\n\nfn main() {\n    println!(\"Hello world\")\n}\n\nUse instead:\n\nfn main() {\n    println!(\"Hello world\");\n}\n",
        "separated_literal_suffix" => "### What it does\nWarns if literal suffixes are separated by an underscore.\nTo enforce separated literal suffix style,\nsee the `unseparated_literal_suffix` lint.\n### Why is this bad?\nSuffix style should be consistent.\n### Example\n\n// Bad\nlet y = 123832_i32;\n// Good\nlet y = 123832i32;\n",
        "serde_api_misuse" => "### What it does\nChecks for mis-uses of the serde API.\n### Why is this bad?\nSerde is very finnicky about how its API should be\nused, but the type system can't be used to enforce it (yet?).\n### Example\nImplementing `Visitor::visit_string` but not\n`Visitor::visit_str`.",
        "shadow_reuse" => "### What it does\nChecks for bindings that shadow other bindings already in\nscope, while reusing the original value.\n### Why is this bad?\nNot too much, in fact it's a common pattern in Rust\ncode. Still, some argue that name shadowing like this hurts readability,\nbecause a value may be bound to different things depending on position in\nthe code.\n### Example\n\nlet x = 2;\nlet x = x + 1;\n\nuse different variable name:\n\nlet x = 2;\nlet y = x + 1;\n",
        "shadow_same" => "### What it does\nChecks for bindings that shadow other bindings already in\nscope, while just changing reference level or mutability.\n### Why is this bad?\nNot much, in fact it's a very common pattern in Rust\ncode. Still, some may opt to avoid it in their code base, they can set this\nlint to `Warn`.\n### Example\n\n// Bad\nlet x = &x;\n// Good\nlet y = &x; // use different variable name\n",
        "shadow_unrelated" => "### What it does\nChecks for bindings that shadow other bindings already in\nscope, either without an initialization or with one that does not even use\nthe original value.\n### Why is this bad?\nName shadowing can hurt readability, especially in\nlarge code bases, because it is easy to lose track of the active binding at\nany place in the code. This can be alleviated by either giving more specific\nnames to bindings or introducing more scopes to contain the bindings.\n### Example\n\nlet x = y;\n// Bad\nlet x = z; // shadows the earlier binding\n// Good\nlet w = z; // use different variable name\n",
        "short_circuit_statement" => "### What it does\nChecks for the use of short circuit boolean conditions as\na\nstatement.\n### Why is this bad?\nUsing a short circuit boolean condition as a statement\nmay hide the fact that the second part is executed or not depending on the\noutcome of the first part.\n### Example\n\nf() && g(); // We should write `if f() { g(); }`.\n",
        "should_implement_trait" => "### What it does\nChecks for methods that should live in a trait\nimplementation of a `std` trait (see [llogiq's blog\npost](http://llogiq.github.io/2015/07/30/traits.html) for further\ninformation) instead of an inherent implementation.\n### Why is this bad?\nImplementing the traits improve ergonomics for users of\nthe code, often with very little cost. Also people seeing a `mul(...)`\nmethod\nmay expect `*` to work equally, so you should have good reason to disappoint\nthem.\n### Example\n\nstruct X;\nimpl X {\n    fn add(&self, other: &X) -> X {\n        // ..\n    }\n}\n",
        "significant_drop_in_scrutinee" => "### What it does\nCheck for temporaries returned from function calls in a match scrutinee that have the\n`clippy::has_significant_drop` attribute.\n### Why is this bad?\nThe `clippy::has_significant_drop` attribute can be added to types whose Drop impls have\nan important side-effect, such as unlocking a mutex, making it important for users to be\nable to accurately understand their lifetimes. When a temporary is returned in a function\ncall in a match scrutinee, its lifetime lasts until the end of the match block, which may\nbe surprising.\nFor `Mutex`es this can lead to a deadlock. This happens when the match scrutinee uses a\nfunction call that returns a `MutexGuard` and then tries to lock again in one of the match\narms. In that case the `MutexGuard` in the scrutinee will not be dropped until the end of\nthe match block and thus will not unlock.\n### Example\n\nlet mutex = Mutex::new(State {});\nmatch mutex.lock().unwrap().foo() {\n    true => {\n        mutex.lock().unwrap().bar(); // Deadlock!\n    }\n    false => {}\n};\nprintln!(\"All done!\");\n\nUse instead:\n\nlet mutex = Mutex::new(State {});\nlet is_foo = mutex.lock().unwrap().foo();\nmatch is_foo {\n    true => {\n        mutex.lock().unwrap().bar();\n    }\n    false => {}\n};\nprintln!(\"All done!\");\n",
        "similar_names" => "### What it does\nChecks for names that are very similar and thus confusing.\n### Why is this bad?\nIt's hard to distinguish between names that differ only\nby a single character.\n### Example\n\nlet checked_exp = something;\nlet checked_expr = something_else;\n",
        "single_char_add_str" => "### What it does\nWarns when using `push_str`/`insert_str` with a single-character string literal\nwhere `push`/`insert` with a `char` would work fine.\n### Why is this bad?\nIt's less clear that we are pushing a single character.\n### Example\n\nlet mut string = String::new();\nstring.insert_str(0, \"R\");\nstring.push_str(\"R\");\n\nCould be written as\n\nlet mut string = String::new();\nstring.insert(0, 'R');\nstring.push('R');\n",
        "single_char_lifetime_names" => "### What it does\nChecks for lifetimes with names which are one character\nlong.\n### Why is this bad?\nA single character is likely not enough to express the\npurpose of a lifetime. Using a longer name can make code\neasier to understand, especially for those who are new to\nRust.\n### Known problems\nRust programmers and learning resources tend to use single\ncharacter lifetimes, so this lint is at odds with the\necosystem at large. In addition, the lifetime's purpose may\nbe obvious or, rarely, expressible in one character.\n### Example\n\nstruct DiagnosticCtx<'a> {\n    source: &'a str,\n}\n\nUse instead:\n\nstruct DiagnosticCtx<'src> {\n    source: &'src str,\n}\n",
        "single_char_pattern" => "### What it does\nChecks for string methods that receive a single-character\n`str` as an argument, e.g., `_.split(\"x\")`.\n### Why is this bad?\nPerforming these methods using a `char` is faster than\nusing a `str`.\n### Known problems\nDoes not catch multi-byte unicode characters.\n### Example\n\n// Bad\n_.split(\"x\");\n// Good\n_.split('x');",
        "single_component_path_imports" => "### What it does\nChecking for imports with single component use path.\n### Why is this bad?\nImport with single component use path such as `use cratename;`\nis not necessary, and thus should be removed.\n### Example\n\nuse regex;\nfn main() {\n    regex::Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n}\n\nBetter as\n\nfn main() {\n    regex::Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n}\n",
        "single_element_loop" => "### What it does\nChecks whether a for loop has a single element.\n### Why is this bad?\nThere is no reason to have a loop of a\nsingle element.\n### Example\n\nlet item1 = 2;\nfor item in &[item1] {\n    println!(\"{}\", item);\n}\n\ncould be written as\n\nlet item1 = 2;\nlet item = &item1;\nprintln!(\"{}\", item);\n",
        "single_match" => "### What it does\nChecks for matches with a single arm where an `if let`\nwill usually suffice.\n### Why is this bad?\nJust readability – `if let` nests less than a `match`.\n### Example\n\n// Bad\nmatch x {\n    Some(ref foo) => bar(foo),\n    _ => (),\n}\n// Good\nif let Some(ref foo) = x {\n    bar(foo);\n}\n",
        "single_match_else" => "### What it does\nChecks for matches with two arms where an `if let else` will\nusually suffice.\n### Why is this bad?\nJust readability – `if let` nests less than a `match`.\n### Known problems\nPersonal style preferences may differ.\n### Example\nUsing `match`:\n\nmatch x {\n    Some(ref foo) => bar(foo),\n    _ => bar(&other_ref),\n}\n\nUsing `if let` with `else`:\n\nif let Some(ref foo) = x {\n    bar(foo);\n} else {\n    bar(&other_ref);\n}\n",
        "size_of_in_element_count" => "### What it does\nDetects expressions where\n`size_of::<T>` or `size_of_val::<T>` is used as a\ncount of elements of type `T`\n### Why is this bad?\nThese functions expect a count\nof `T` and not a number of bytes\n### Example\n\nconst SIZE: usize = 128;\nlet x = [2u8; SIZE];\nlet mut y = [2u8; SIZE];\nunsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n",
        "skip_while_next" => "### What it does\nChecks for usage of `_.skip_while(condition).next()`.\n### Why is this bad?\nReadability, this can be written more concisely as\n`_.find(!condition)`.\n### Example\n\nvec.iter().skip_while(|x| **x == 0).next();\n\nCould be written as\n\nvec.iter().find(|x| **x != 0);\n",
        "slow_vector_initialization" => "### What it does\nChecks slow zero-filled vector initialization\n### Why is this bad?\nThese structures are non-idiomatic and less efficient than simply using\n`vec![0; len]`.\n### Example\n\n// Bad\nlet mut vec1 = Vec::with_capacity(len);\nvec1.resize(len, 0);\nlet mut vec2 = Vec::with_capacity(len);\nvec2.extend(repeat(0).take(len));\n// Good\nlet mut vec1 = vec![0; len];\nlet mut vec2 = vec![0; len];\n",
        "stable_sort_primitive" => "### What it does\nWhen sorting primitive values (integers, bools, chars, as well\nas arrays, slices, and tuples of such items), it is typically better to\nuse an unstable sort than a stable sort.\n### Why is this bad?\nTypically, using a stable sort consumes more memory and cpu cycles.\nBecause values which compare equal are identical, preserving their\nrelative order (the guarantee that a stable sort provides) means\nnothing, while the extra costs still apply.\n### Known problems\nAs pointed out in\n[issue #8241](https://github.com/rust-lang/rust-clippy/issues/8241),\na stable sort can instead be significantly faster for certain scenarios\n(eg. when a sorted vector is extended with new data and resorted).\nFor more information and benchmarking results, please refer to the\nissue linked above.\n### Example\n\nlet mut vec = vec![2, 1, 3];\nvec.sort();\n\nUse instead:\n\nlet mut vec = vec![2, 1, 3];\nvec.sort_unstable();\n",
        "str_to_string" => "### What it does\nCheck if the string is transformed to byte array and casted back to string.\n### Why is this bad?\nIt's unnecessary, the string can be used directly.\n### Example\n\nlet _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n\ncould be written as\n\nlet _ = &\"Hello World!\"[6..11];\n\n### What it does\nThis lint checks for `.to_string()` method calls on values of type `&str`.\n### Why is this bad?\nThe `to_string` method is also used on other types to convert them to a string.\nWhen called on a `&str` it turns the `&str` into the owned variant `String`, which can be better\nexpressed with `.to_owned()`.\n### Example\n\n// example code where clippy issues a warning\nlet _ = \"str\".to_string();\n\nUse instead:\n\n// example code which does not raise clippy warning\nlet _ = \"str\".to_owned();\n",
        "string_add" => "### What it does\nChecks for all instances of `x + _` where `x` is of type\n`String`, but only if [`string_add_assign`](#string_add_assign) does *not*\nmatch.\n### Why is this bad?\nIt's not bad in and of itself. However, this particular\n`Add` implementation is asymmetric (the other operand need not be `String`,\nbut `x` does), while addition as mathematically defined is symmetric, also\nthe `String::push_str(_)` function is a perfectly good replacement.\nTherefore, some dislike it and wish not to have it in their code.\nThat said, other people think that string addition, having a long tradition\nin other languages is actually fine, which is why we decided to make this\nparticular lint `allow` by default.\n### Example\n\nlet x = \"Hello\".to_owned();\nx + \", World\";\n",
        "string_add_assign" => "### What it does\nChecks for string appends of the form `x = x + y` (without\n`let`!).\n### Why is this bad?\nIt's not really bad, but some people think that the\n`.push_str(_)` method is more readable.\n### Example\n\nlet mut x = \"Hello\".to_owned();\nx = x + \", World\";\n// More readable\nx += \", World\";\nx.push_str(\", World\");\n",
        "string_extend_chars" => "### What it does\nChecks for the use of `.extend(s.chars())` where s is a\n`&str` or `String`.\n### Why is this bad?\n`.push_str(s)` is clearer\n### Example\n\nlet abc = \"abc\";\nlet def = String::from(\"def\");\nlet mut s = String::new();\ns.extend(abc.chars());\ns.extend(def.chars());\n\nThe correct use would be:\n\nlet abc = \"abc\";\nlet def = String::from(\"def\");\nlet mut s = String::new();\ns.push_str(abc);\ns.push_str(&def);\n",
        "string_lit_as_bytes" => "### What it does\nChecks for the `as_bytes` method called on string literals\nthat contain only ASCII characters.\n### Why is this bad?\nByte string literals (e.g., `b\"foo\"`) can be used\ninstead. They are shorter but less discoverable than `as_bytes()`.\n### Known problems\n`\"str\".as_bytes()` and the suggested replacement of `b\"str\"` are not\nequivalent because they have different types. The former is `&[u8]`\nwhile the latter is `&[u8; 3]`. That means in general they will have a\ndifferent set of methods and different trait implementations.\n\nfn f(v: Vec<u8>) {}\nf(\"...\".as_bytes().to_owned()); // works\nf(b\"...\".to_owned()); // does not work, because arg is [u8; 3] not Vec<u8>\nfn g(r: impl std::io::Read) {}\ng(\"...\".as_bytes()); // works\ng(b\"...\"); // does not work\n\nThe actual equivalent of `\"str\".as_bytes()` with the same type is not\n`b\"str\"` but `&b\"str\"[..]`, which is a great deal of punctuation and not\nmore readable than a function call.\n### Example\n\n// Bad\nlet bs = \"a byte string\".as_bytes();\n// Good\nlet bs = b\"a byte string\";\n",
        "string_slice" => "### What it does\nChecks for slice operations on strings\n### Why is this bad?\nUTF-8 characters span multiple bytes, and it is easy to inadvertently confuse character\ncounts and string indices. This may lead to panics, and should warrant some test cases\ncontaining wide UTF-8 characters. This lint is most useful in code that should avoid\npanics at all costs.\n### Known problems\nProbably lots of false positives. If an index comes from a known valid position (e.g.\nobtained via `char_indices` over the same string), it is totally OK.\n\n&\"Ölkanne\"[1..];\n",
        "string_to_string" => "### What it does\nThis lint checks for `.to_string()` method calls on values of type `String`.\n### Why is this bad?\nThe `to_string` method is also used on other types to convert them to a string.\nWhen called on a `String` it only clones the `String`, which can be better expressed with `.clone()`.\n### Example\n\n// example code where clippy issues a warning\nlet msg = String::from(\"Hello World\");\nlet _ = msg.to_string();\n\nUse instead:\n\n// example code which does not raise clippy warning\nlet msg = String::from(\"Hello World\");\nlet _ = msg.clone();\n",
        "strlen_on_c_strings" => "### What it does\nChecks for usage of `libc::strlen` on a `CString` or `CStr` value,\nand suggest calling `as_bytes().len()` or `to_bytes().len()` respectively instead.\n### Why is this bad?\nThis avoids calling an unsafe `libc` function.\nCurrently, it also avoids calculating the length.\n### Example\n\nuse std::ffi::CString;\nlet cstring = CString::new(\"foo\").expect(\"CString::new failed\");\nlet len = unsafe { libc::strlen(cstring.as_ptr()) };\n\nUse instead:\n\nuse std::ffi::CString;\nlet cstring = CString::new(\"foo\").expect(\"CString::new failed\");\nlet len = cstring.as_bytes().len();\n",
        "struct_excessive_bools" => "### What it does\nChecks for excessive\nuse of bools in structs.\n### Why is this bad?\nExcessive bools in a struct\nis often a sign that it's used as a state machine,\nwhich is much better implemented as an enum.\nIf it's not the case, excessive bools usually benefit\nfrom refactoring into two-variant enums for better\nreadability and API.\n### Example\n\nstruct S {\n    is_pending: bool,\n    is_processing: bool,\n    is_finished: bool,\n}\n\nUse instead:\n\nenum S {\n    Pending,\n    Processing,\n    Finished,\n}\n",
        "suboptimal_flops" => "### What it does\nLooks for floating-point expressions that\ncan be expressed using built-in methods to improve both\naccuracy and performance.\n### Why is this bad?\nNegatively impacts accuracy and performance.\n### Example\n\nuse std::f32::consts::E;\nlet a = 3f32;\nlet _ = (2f32).powf(a);\nlet _ = E.powf(a);\nlet _ = a.powf(1.0 / 2.0);\nlet _ = a.log(2.0);\nlet _ = a.log(10.0);\nlet _ = a.log(E);\nlet _ = a.powf(2.0);\nlet _ = a * 2.0 + 4.0;\nlet _ = if a < 0.0 {\n    -a\n} else {\n    a\n};\nlet _ = if a < 0.0 {\n    a\n} else {\n    -a\n};\n\nis better expressed as\n\nuse std::f32::consts::E;\nlet a = 3f32;\nlet _ = a.exp2();\nlet _ = a.exp();\nlet _ = a.sqrt();\nlet _ = a.log2();\nlet _ = a.log10();\nlet _ = a.ln();\nlet _ = a.powi(2);\nlet _ = a.mul_add(2.0, 4.0);\nlet _ = a.abs();\nlet _ = -a.abs();\n",
        "suspicious_arithmetic_impl" => "### What it does\nLints for suspicious operations in impls of arithmetic operators, e.g.\nsubtracting elements in an Add impl.\n### Why is this bad?\nThis is probably a typo or copy-and-paste error and not intended.\n### Example\n\nimpl Add for Foo {\n    type Output = Foo;\n    fn add(self, other: Foo) -> Foo {\n        Foo(self.0 - other.0)\n    }\n}\n",
        "suspicious_assignment_formatting" => "### What it does\nChecks for use of the non-existent `=*`, `=!` and `=-`\noperators.\n### Why is this bad?\nThis is either a typo of `*=`, `!=` or `-=` or\nconfusing.\n### Example\n\na =- 42; // confusing, should it be `a -= 42` or `a = -42`?\n",
        "suspicious_else_formatting" => "### What it does\nChecks for formatting of `else`. It lints if the `else`\nis followed immediately by a newline or the `else` seems to be missing.\n### Why is this bad?\nThis is probably some refactoring remnant, even if the\ncode is correct, it might look confusing.\n### Example\n\nif foo {\n} { // looks like an `else` is missing here\n}\nif foo {\n} if bar { // looks like an `else` is missing here\n}\nif foo {\n} else\n{ // this is the `else` block of the previous `if`, but should it be?\n}\nif foo {\n} else\nif bar { // this is the `else` block of the previous `if`, but should it be?\n}\n",
        "suspicious_map" => "### What it does\nChecks for calls to `map` followed by a `count`.\n### Why is this bad?\nIt looks suspicious. Maybe `map` was confused with `filter`.\nIf the `map` call is intentional, this should be rewritten\nusing `inspect`. Or, if you intend to drive the iterator to\ncompletion, you can just use `for_each` instead.\n### Example\n\nlet _ = (0..3).map(|x| x + 2).count();\n",
        "suspicious_op_assign_impl" => "### What it does\nLints for suspicious operations in impls of OpAssign, e.g.\nsubtracting elements in an AddAssign impl.\n### Why is this bad?\nThis is probably a typo or copy-and-paste error and not intended.\n### Example\n\nimpl AddAssign for Foo {\n    fn add_assign(&mut self, other: Foo) {\n        *self = *self - other;\n    }\n}\n",
        "suspicious_operation_groupings" => "### What it does\nChecks for unlikely usages of binary operators that are almost\ncertainly typos and/or copy/paste errors, given the other usages\nof binary operators nearby.\n### Why is this bad?\nThey are probably bugs and if they aren't then they look like bugs\nand you should add a comment explaining why you are doing such an\nodd set of operations.\n### Known problems\nThere may be some false positives if you are trying to do something\nunusual that happens to look like a typo.\n### Example\n\nstruct Vec3 {\n    x: f64,\n    y: f64,\n    z: f64,\n}\nimpl Eq for Vec3 {}\nimpl PartialEq for Vec3 {\n    fn eq(&self, other: &Self) -> bool {\n        // This should trigger the lint because `self.x` is compared to `other.y`\n        self.x == other.y && self.y == other.y && self.z == other.z\n    }\n}\n\nUse instead:\n\n// same as above except:\nimpl PartialEq for Vec3 {\n    fn eq(&self, other: &Self) -> bool {\n        // Note we now compare other.x to self.x\n        self.x == other.x && self.y == other.y && self.z == other.z\n    }\n}\n",
        "suspicious_splitn" => "### What it does\nChecks for calls to [`splitn`]\n(https://doc.rust-lang.org/std/primitive.str.html#method.splitn) and\nrelated functions with either zero or one splits.\n### Why is this bad?\nThese calls don't actually split the value and are\nlikely to be intended as a different number.\n### Example\n\n// Bad\nlet s = \"\";\nfor x in s.splitn(1, \":\") {\n    // use x\n}\n// Good\nlet s = \"\";\nfor x in s.splitn(2, \":\") {\n    // use x\n}\n",
        "suspicious_unary_op_formatting" => "### What it does\nChecks the formatting of a unary operator on the right hand side\nof a binary operator. It lints if there is no space between the binary and unary operators,\nbut there is a space between the unary and its operand.\n### Why is this bad?\nThis is either a typo in the binary operator or confusing.\n### Example\n\n// &&! looks like a different operator\nif foo &&! bar {}\n\nUse instead:\n\nif foo && !bar {}\n",
        "swap_ptr_to_ref" => "### What it does\nChecks for calls to `core::mem::swap` where either parameter is derived from a pointer\n### Why is this bad?\nWhen at least one parameter to `swap` is derived from a pointer it may overlap with the\nother. This would then lead to undefined behavior.\n### Example\n\nunsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n    for (&x, &y) in x.iter().zip(y) {\n        core::mem::swap(&mut *x, &mut *y);\n    }\n}\n\nUse instead:\n\nunsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n    for (&x, &y) in x.iter().zip(y) {\n        core::ptr::swap(x, y);\n    }\n}\n",
        "tabs_in_doc_comments" => "### What it does\nChecks doc comments for usage of tab characters.\n### Why is this bad?\nThe rust style-guide promotes spaces instead of tabs for indentation.\nTo keep a consistent view on the source, also doc comments should not have tabs.\nAlso, explaining ascii-diagrams containing tabs can get displayed incorrectly when the\ndisplay settings of the author and reader differ.\n### Example\n\n///\n/// Struct to hold two strings:\n/// \t- first\t\tone\n/// \t- second\tone\npub struct DoubleString {\n   ///\n   /// \t- First String:\n   /// \t\t- needs to be inside here\n   first_string: String,\n   ///\n   /// \t- Second String:\n   /// \t\t- needs to be inside here\n   second_string: String,\n\nWill be converted to:\n\n///\n/// Struct to hold two strings:\n///     - first        one\n///     - second    one\npub struct DoubleString {\n   ///\n   ///     - First String:\n   ///         - needs to be inside here\n   first_string: String,\n   ///\n   ///     - Second String:\n   ///         - needs to be inside here\n   second_string: String,\n",
        "temporary_assignment" => "### What it does\nChecks for construction of a structure or tuple just to\nassign a value in it.\n### Why is this bad?\nReadability. If the structure is only created to be\nupdated, why not write the structure you want in the first place?\n### Example\n\n(0, 0).0 = 1\n",
        "to_digit_is_some" => "### What it does\nChecks for `.to_digit(..).is_some()` on `char`s.\n### Why is this bad?\nThis is a convoluted way of checking if a `char` is a digit. It's\nmore straight forward to use the dedicated `is_digit` method.\n### Example\n\nlet is_digit = c.to_digit(radix).is_some();\n\ncan be written as:\n\nlet is_digit = c.is_digit(radix);\n",
        "to_string_in_format_args" => "### What it does\nChecks for [`ToString::to_string`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)\napplied to a type that implements [`Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)\nin a macro that does formatting.\n### Why is this bad?\nSince the type implements `Display`, the use of `to_string` is\nunnecessary.\n### Example\n\nprintln!(\"error: something failed at {}\", Location::caller().to_string());\n\nUse instead:\n\nprintln!(\"error: something failed at {}\", Location::caller());\n",
        "todo" => "### What it does\nChecks for usage of `todo!`.\n### Why is this bad?\nThis macro should not be present in production code\n### Example\n\ntodo!();\n",
        "too_many_arguments" => "### What it does\nChecks for functions with too many parameters.\n### Why is this bad?\nFunctions with lots of parameters are considered bad\nstyle and reduce readability (“what does the 5th parameter mean?”). Consider\ngrouping some parameters into a new type.\n### Example\n\nfn foo(x: u32, y: u32, name: &str, c: Color, w: f32, h: f32, a: f32, b: f32) {\n    // ..\n}\n",
        "too_many_lines" => "### What it does\nChecks for functions with a large amount of lines.\n### Why is this bad?\nFunctions with a lot of lines are harder to understand\ndue to having to look at a larger amount of code to understand what the\nfunction is doing. Consider splitting the body of the function into\nmultiple functions.\n### Example\n\nfn im_too_long() {\n    println!(\"\");\n    // ... 100 more LoC\n    println!(\"\");\n}\n",
        "toplevel_ref_arg" => "### What it does\nChecks for function arguments and let bindings denoted as\n`ref`.\n### Why is this bad?\nThe `ref` declaration makes the function take an owned\nvalue, but turns the argument into a reference (which means that the value\nis destroyed when exiting the function). This adds not much value: either\ntake a reference type, or take an owned value and create references in the\nbody.\nFor let bindings, `let x = &foo;` is preferred over `let ref x = foo`. The\ntype of `x` is more obvious with the former.\n### Known problems\nIf the argument is dereferenced within the function,\nremoving the `ref` will lead to errors. This can be fixed by removing the\ndereferences, e.g., changing `*x` to `x` within the function.\n### Example\n\n// Bad\nfn foo(ref x: u8) -> bool {\n    true\n}\n// Good\nfn foo(x: &u8) -> bool {\n    true\n}\n",
        "trailing_empty_array" => "### What it does\nDisplays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\n### Why is this bad?\nZero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjunction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n### Example\n\nstruct RarelyUseful {\n    some_field: u32,\n    last: [u32; 0],\n}\n\nUse instead:\n\n#[repr(C)]\nstruct MoreOftenUseful {\n    some_field: usize,\n    last: [u32; 0],\n}\n",
        "trait_duplication_in_bounds" => "### What it does\nChecks for cases where generics are being used and multiple\nsyntax specifications for trait bounds are used simultaneously.\n### Why is this bad?\nDuplicate bounds makes the code\nless readable than specifying them only once.\n### Example\n\nfn func<T: Clone + Default>(arg: T) where T: Clone + Default {}\n\nUse instead:\n\nfn func<T: Clone + Default>(arg: T) {}\n// or\nfn func<T>(arg: T) where T: Clone + Default {}\n",
        "transmute_bytes_to_str" => "### What it does\nChecks for transmutes from a `&[u8]` to a `&str`.\n### Why is this bad?\nNot every byte slice is a valid UTF-8 string.\n### Known problems\n- [`from_utf8`] which this lint suggests using is slower than `transmute`\nas it needs to validate the input.\nIf you are certain that the input is always a valid UTF-8,\nuse [`from_utf8_unchecked`] which is as fast as `transmute`\nbut has a semantically meaningful name.\n- You might want to handle errors returned from [`from_utf8`] instead of calling `unwrap`.\n[`from_utf8`]: https://doc.rust-lang.org/std/str/fn.from_utf8.html\n[`from_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\n### Example\n\nlet b: &[u8] = &[1_u8, 2_u8];\nunsafe {\n    let _: &str = std::mem::transmute(b); // where b: &[u8]\n}\n// should be:\nlet _ = std::str::from_utf8(b).unwrap();\n",
        "transmute_float_to_int" => "### What it does\nChecks for transmutes from a float to an integer.\n### Why is this bad?\nTransmutes are dangerous and error-prone, whereas `to_bits` is intuitive\nand safe.\n### Example\n\nunsafe {\n    let _: u32 = std::mem::transmute(1f32);\n}\n// should be:\nlet _: u32 = 1f32.to_bits();\n",
        "transmute_int_to_bool" => "### What it does\nChecks for transmutes from an integer to a `bool`.\n### Why is this bad?\nThis might result in an invalid in-memory representation of a `bool`.\n### Example\n\nlet x = 1_u8;\nunsafe {\n    let _: bool = std::mem::transmute(x); // where x: u8\n}\n// should be:\nlet _: bool = x != 0;\n",
        "transmute_int_to_char" => "### What it does\nChecks for transmutes from an integer to a `char`.\n### Why is this bad?\nNot every integer is a Unicode scalar value.\n### Known problems\n- [`from_u32`] which this lint suggests using is slower than `transmute`\nas it needs to validate the input.\nIf you are certain that the input is always a valid Unicode scalar value,\nuse [`from_u32_unchecked`] which is as fast as `transmute`\nbut has a semantically meaningful name.\n- You might want to handle `None` returned from [`from_u32`] instead of calling `unwrap`.\n[`from_u32`]: https://doc.rust-lang.org/std/char/fn.from_u32.html\n[`from_u32_unchecked`]: https://doc.rust-lang.org/std/char/fn.from_u32_unchecked.html\n### Example\n\nlet x = 1_u32;\nunsafe {\n    let _: char = std::mem::transmute(x); // where x: u32\n}\n// should be:\nlet _ = std::char::from_u32(x).unwrap();\n",
        "transmute_int_to_float" => "### What it does\nChecks for transmutes from an integer to a float.\n### Why is this bad?\nTransmutes are dangerous and error-prone, whereas `from_bits` is intuitive\nand safe.\n### Example\n\nunsafe {\n    let _: f32 = std::mem::transmute(1_u32); // where x: u32\n}\n// should be:\nlet _: f32 = f32::from_bits(1_u32);\n",
        "transmute_num_to_bytes" => "### What it does\nChecks for transmutes from a number to an array of `u8`\n### Why this is bad?\nTransmutes are dangerous and error-prone, whereas `to_ne_bytes`\nis intuitive and safe.\n### Example\n\nunsafe {\n    let x: [u8; 8] = std::mem::transmute(1i64);\n}\n// should be\nlet x: [u8; 8] = 0i64.to_ne_bytes();\n",
        "transmute_ptr_to_ptr" => "### What it does\nChecks for transmutes from a pointer to a pointer, or\nfrom a reference to a reference.\n### Why is this bad?\nTransmutes are dangerous, and these can instead be\nwritten as casts.\n### Example\n\nlet ptr = &1u32 as *const u32;\nunsafe {\n    // pointer-to-pointer transmute\n    let _: *const f32 = std::mem::transmute(ptr);\n    // ref-ref transmute\n    let _: &f32 = std::mem::transmute(&1u32);\n}\n// These can be respectively written:\nlet _ = ptr as *const f32;\nlet _ = unsafe{ &*(&1u32 as *const u32 as *const f32) };\n",
        "transmute_ptr_to_ref" => "### What it does\nChecks for transmutes from a pointer to a reference.\n### Why is this bad?\nThis can always be rewritten with `&` and `*`.\n### Known problems\n- `mem::transmute` in statics and constants is stable from Rust 1.46.0,\nwhile dereferencing raw pointer is not stable yet.\nIf you need to do this in those places,\nyou would have to use `transmute` instead.\n### Example\n\nunsafe {\n    let _: &T = std::mem::transmute(p); // where p: *const T\n}\n// can be written:\nlet _: &T = &*p;\n",
        "transmute_undefined_repr" => "### What it does\nChecks for transmutes between types which do not have a representation defined relative to\neach other.\n### Why is this bad?\nThe results of such a transmute are not defined.\n### Known problems\nThis lint has had multiple problems in the past and was moved to `nursery`. See issue\n[#8496](https://github.com/rust-lang/rust-clippy/issues/8496) for more details.\n### Example\n\nstruct Foo<T>(u32, T);\nlet _ = unsafe { core::mem::transmute::<Foo<u32>, Foo<i32>>(Foo(0u32, 0u32)) };\n\nUse instead:\n\n#[repr(C)]\nstruct Foo<T>(u32, T);\nlet _ = unsafe { core::mem::transmute::<Foo<u32>, Foo<i32>>(Foo(0u32, 0u32)) };\n",
        "transmutes_expressible_as_ptr_casts" => "### What it does\n### Why is this bad?\nReadability. The code tricks people into thinking that\nsomething complex is going on.\n### Example\n\nunsafe { std::mem::transmute::<*const [i32], *const [u16]>(p) };\n\nUse instead:\n\np as *const [u16];\n",
        "transmuting_null" => "### What it does\nChecks for transmute calls which would receive a null pointer.\n### Why is this bad?\nTransmuting a null pointer is undefined behavior.\n### Known problems\nNot all cases can be detected at the moment of this writing.\nFor example, variables which hold a null pointer and are then fed to a `transmute`\ncall, aren't detectable yet.\n### Example\n\nlet null_ref: &u64 = unsafe { std::mem::transmute(0 as *const u64) };\n",
        "trim_split_whitespace" => "### What it does\nWarns about calling `str::trim` (or variants) before `str::split_whitespace`.\n### Why is this bad?\n`split_whitespace` already ignores leading and trailing whitespace.\n### Example\n\n\" A B C \".trim().split_whitespace();\n\nUse instead:\n\n\" A B C \".split_whitespace();\n",
        "trivial_regex" => "### What it does\nChecks for trivial [regex](https://crates.io/crates/regex)\ncreation (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`).\n### Why is this bad?\nMatching the regex can likely be replaced by `==` or\n`str::starts_with`, `str::ends_with` or `std::contains` or other `str`\nmethods.\n### Known problems\nIf the same regex is going to be applied to multiple\ninputs, the precomputations done by `Regex` construction can give\nsignificantly better performance than any of the `str`-based methods.\n### Example\n\nRegex::new(\"^foobar\")\n",
        "trivially_copy_pass_by_ref" => "### What it does\nChecks for functions taking arguments by reference, where\nthe argument type is `Copy` and small enough to be more efficient to always\npass by value.\n### Why is this bad?\nIn many calling conventions instances of structs will\nbe passed through registers if they fit into two or less general purpose\nregisters.\n### Known problems\nThis lint is target register size dependent, it is\nlimited to 32-bit to try and reduce portability problems between 32 and\n64-bit, but if you are compiling for 8 or 16-bit targets then the limit\nwill be different.\nThe configuration option `trivial_copy_size_limit` can be set to override\nthis limit for a project.\nThis lint attempts to allow passing arguments by reference if a reference\nto that argument is returned. This is implemented by comparing the lifetime\nof the argument and return value for equality. However, this can cause\nfalse positives in cases involving multiple lifetimes that are bounded by\neach other.\nAlso, it does not take account of other similar cases where getting memory addresses\nmatters; namely, returning the pointer to the argument in question,\nand passing the argument, as both references and pointers,\nto a function that needs the memory address. For further details, refer to\n[this issue](https://github.com/rust-lang/rust-clippy/issues/5953)\nthat explains a real case in which this false positive\nled to an **undefined behavior** introduced with unsafe code.\n### Example\n\n// Bad\nfn foo(v: &u32) {}\n\n\n// Better\nfn foo(v: u32) {}\n",
        "try_err" => "### What it does\nChecks for usages of `Err(x)?`.\n### Why is this bad?\nThe `?` operator is designed to allow calls that\ncan fail to be easily chained. For example, `foo()?.bar()` or\n`foo(bar()?)`. Because `Err(x)?` can't be used that way (it will\nalways return), it is more clear to write `return Err(x)`.\n### Example\n\nfn foo(fail: bool) -> Result<i32, String> {\n    if fail {\n      Err(\"failed\")?;\n    }\n    Ok(0)\n}\n\nCould be written:\n\nfn foo(fail: bool) -> Result<i32, String> {\n    if fail {\n      return Err(\"failed\".into());\n    }\n    Ok(0)\n}\n",
        "type_complexity" => "### What it does\nChecks for types used in structs, parameters and `let`\ndeclarations above a certain complexity threshold.\n### Why is this bad?\nToo complex types make the code less readable. Consider\nusing a `type` definition to simplify them.\n### Example\n\nstruct Foo {\n    inner: Rc<Vec<Vec<Box<(u32, u32, u32, u32)>>>>,\n}\n",
        "type_repetition_in_bounds" => "### What it does\nThis lint warns about unnecessary type repetitions in trait bounds\n### Why is this bad?\nRepeating the type for every bound makes the code\nless readable than combining the bounds\n### Example\n\npub fn foo<T>(t: T) where T: Copy, T: Clone {}\n\nCould be written as:\n\npub fn foo<T>(t: T) where T: Copy + Clone {}\n",
        "undocumented_unsafe_blocks" => "### What it does\nChecks for `unsafe` blocks and impls without a `// SAFETY: ` comment\nexplaining why the unsafe operations performed inside\nthe block are safe.\nNote the comment must appear on the line(s) preceding the unsafe block\nwith nothing appearing in between. The following is ok:\n\nfoo(\n    // SAFETY:\n    // This is a valid safety comment\n    unsafe { *x }\n)\n\nBut neither of these are:\n\n// SAFETY:\n// This is not a valid safety comment\nfoo(\n    /* SAFETY: Neither is this */ unsafe { *x },\n);\n\n### Why is this bad?\nUndocumented unsafe blocks and impls can make it difficult to\nread and maintain code, as well as uncover unsoundness\nand bugs.\n### Example\n\nuse std::ptr::NonNull;\nlet a = &mut 42;\nlet ptr = unsafe { NonNull::new_unchecked(a) };\n\nUse instead:\n\nuse std::ptr::NonNull;\nlet a = &mut 42;\n// SAFETY: references are guaranteed to be non-null.\nlet ptr = unsafe { NonNull::new_unchecked(a) };\n",
        "undropped_manually_drops" => "### What it does\nPrevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n### Why is this bad?\nThe safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n### Known problems\nDoes not catch cases if the user binds `std::mem::drop`\nto a different name and calls it that way.\n### Example\n\nstruct S;\ndrop(std::mem::ManuallyDrop::new(S));\n\nUse instead:\n\nstruct S;\nunsafe {\n    std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n}\n",
        "unicode_not_nfc" => "### What it does\nChecks for string literals that contain Unicode in a form\nthat is not equal to its\n[NFC-recomposition](http://www.unicode.org/reports/tr15/#Norm_Forms).\n### Why is this bad?\nIf such a string is compared to another, the results\nmay be surprising.\n### Example\nYou may not see it, but \"a\u{300}\"\" and \"à\"\" aren't the same string. The\nformer when escaped is actually `\"a\\u{300}\"` while the latter is `\"\\u{e0}\"`.",
        "unimplemented" => "### What it does\nChecks for usage of `unimplemented!`.\n### Why is this bad?\nThis macro should not be present in production code\n### Example\n\nunimplemented!();\n",
        "uninit_assumed_init" => "### What it does\nChecks for `MaybeUninit::uninit().assume_init()`.\n### Why is this bad?\nFor most types, this is undefined behavior.\n### Known problems\nFor now, we accept empty tuples and tuples / arrays\nof `MaybeUninit`. There may be other types that allow uninitialized\ndata, but those are not yet rigorously defined.\n### Example\n\n// Beware the UB\nuse std::mem::MaybeUninit;\nlet _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n\nNote that the following is OK:\n\nuse std::mem::MaybeUninit;\nlet _: [MaybeUninit<bool>; 5] = unsafe {\n    MaybeUninit::uninit().assume_init()\n};\n",
        "uninit_vec" => "### What it does\nChecks for `set_len()` call that creates `Vec` with uninitialized elements.\nThis is commonly caused by calling `set_len()` right after allocating or\nreserving a buffer with `new()`, `default()`, `with_capacity()`, or `reserve()`.\n### Why is this bad?\nIt creates a `Vec` with uninitialized data, which leads to\nundefined behavior with most safe operations. Notably, uninitialized\n`Vec<u8>` must not be used with generic `Read`.\nMoreover, calling `set_len()` on a `Vec` created with `new()` or `default()`\ncreates out-of-bound values that lead to heap memory corruption when used.\n### Known Problems\nThis lint only checks directly adjacent statements.\n### Example\n\nlet mut vec: Vec<u8> = Vec::with_capacity(1000);\nunsafe { vec.set_len(1000); }\nreader.read(&mut vec); // undefined behavior!\n\n### How to fix?\n1. Use an initialized buffer:\n   ```rust,ignore\n   let mut vec: Vec<u8> = vec![0; 1000];\n   reader.read(&mut vec);\n   ```\n2. Wrap the content in `MaybeUninit`:\n   ```rust,ignore\n   let mut vec: Vec<MaybeUninit<T>> = Vec::with_capacity(1000);\n   vec.set_len(1000);  // `MaybeUninit` can be uninitialized\n   ```\n3. If you are on nightly, `Vec::spare_capacity_mut()` is available:\n   ```rust,ignore\n   let mut vec: Vec<u8> = Vec::with_capacity(1000);\n   let remaining = vec.spare_capacity_mut();  // `&mut [MaybeUninit<u8>]`\n   // perform initialization with `remaining`\n   vec.set_len(...);  // Safe to call `set_len()` on initialized part\n   ```",
        "unit_arg" => "### What it does\nChecks for passing a unit value as an argument to a function without using a\nunit literal (`()`).\n### Why is this bad?\nThis is likely the result of an accidental semicolon.\n### Example\n\nfoo({\n    let a = bar();\n    baz(a);\n})\n",
        "unit_cmp" => "### What it does\nChecks for comparisons to unit. This includes all binary\ncomparisons (like `==` and `<`) and asserts.\n### Why is this bad?\nUnit is always equal to itself, and thus is just a\nclumsily written constant. Mostly this happens when someone accidentally\nadds semicolons at the end of the operands.\n### Example\n\nif {\n    foo();\n} == {\n    bar();\n} {\n    baz();\n}\n\nis equal to\n\n{\n    foo();\n    bar();\n    baz();\n}\n\nFor asserts:\n\nassert_eq!({ foo(); }, { bar(); });\n\nwill always succeed",
        "unit_hash" => "### What it does\nDetects `().hash(_)`.\n### Why is this bad?\nHashing a unit value doesn't do anything as the implementation of `Hash` for `()` is a no-op.\n### Example\n\nmatch my_enum {\n\tEmpty => ().hash(&mut state),\n\tWithValue(x) => x.hash(&mut state),\n}\n\nUse instead:\n\nmatch my_enum {\n\tEmpty => 0_u8.hash(&mut state),\n\tWithValue(x) => x.hash(&mut state),\n}\n",
        "unit_return_expecting_ord" => "### What it does\nChecks for functions that expect closures of type\nFn(...) -> Ord where the implemented closure returns the unit type.\nThe lint also suggests to remove the semi-colon at the end of the statement if present.\n### Why is this bad?\nLikely, returning the unit type is unintentional, and\ncould simply be caused by an extra semi-colon. Since () implements Ord\nit doesn't cause a compilation error.\nThis is the same reasoning behind the unit_cmp lint.\n### Known problems\nIf returning unit is intentional, then there is no\nway of specifying this without triggering needless_return lint\n### Example\n\nlet mut twins = vec!((1, 1), (2, 2));\ntwins.sort_by_key(|x| { x.1; });\n",
        "unnecessary_cast" => "### What it does\nChecks for casts to the same type, casts of int literals to integer types\nand casts of float literals to float types.\n### Why is this bad?\nIt's just unnecessary.\n### Example\n\nlet _ = 2i32 as i32;\nlet _ = 0.5 as f32;\n\nBetter:\n\nlet _ = 2_i32;\nlet _ = 0.5_f32;\n",
        "unnecessary_filter_map" => "### What it does\nChecks for `filter_map` calls that could be replaced by `filter` or `map`.\nMore specifically it checks if the closure provided is only performing one of the\nfilter or map operations and suggests the appropriate option.\n### Why is this bad?\nComplexity. The intent is also clearer if only a single\noperation is being performed.\n### Example\n\nlet _ = (0..3).filter_map(|x| if x > 2 { Some(x) } else { None });\n// As there is no transformation of the argument this could be written as:\nlet _ = (0..3).filter(|&x| x > 2);\n\n\nlet _ = (0..4).filter_map(|x| Some(x + 1));\n// As there is no conditional check on the argument this could be written as:\nlet _ = (0..4).map(|x| x + 1);\n",
        "unnecessary_find_map" => "### What it does\nChecks for `find_map` calls that could be replaced by `find` or `map`. More\nspecifically it checks if the closure provided is only performing one of the\nfind or map operations and suggests the appropriate option.\n### Why is this bad?\nComplexity. The intent is also clearer if only a single\noperation is being performed.\n### Example\n\nlet _ = (0..3).find_map(|x| if x > 2 { Some(x) } else { None });\n// As there is no transformation of the argument this could be written as:\nlet _ = (0..3).find(|&x| x > 2);\n\n\nlet _ = (0..4).find_map(|x| Some(x + 1));\n// As there is no conditional check on the argument this could be written as:\nlet _ = (0..4).map(|x| x + 1).next();\n",
        "unnecessary_fold" => "### What it does\nChecks for using `fold` when a more succinct alternative exists.\nSpecifically, this checks for `fold`s which could be replaced by `any`, `all`,\n`sum` or `product`.\n### Why is this bad?\nReadability.\n### Example\n\nlet _ = (0..3).fold(false, |acc, x| acc || x > 2);\n\nThis could be written as:\n\nlet _ = (0..3).any(|x| x > 2);\n",
        "unnecessary_join" => "### What it does\nChecks for use of `.collect::<Vec<String>>().join(\"\")` on iterators.\n### Why is this bad?\n`.collect::<String>()` is more concise and might be more performant\n### Example\n\nlet vector = vec![\"hello\",  \"world\"];\nlet output = vector.iter().map(|item| item.to_uppercase()).collect::<Vec<String>>().join(\"\");\nprintln!(\"{}\", output);\n\nThe correct use would be:\n\nlet vector = vec![\"hello\",  \"world\"];\nlet output = vector.iter().map(|item| item.to_uppercase()).collect::<String>();\nprintln!(\"{}\", output);\n\n### Known problems\nWhile `.collect::<String>()` is sometimes more performant, there are cases where\nusing `.collect::<String>()` over `.collect::<Vec<String>>().join(\"\")`\nwill prevent loop unrolling and will result in a negative performance impact.\nAdditionally, differences have been observed between aarch64 and x86_64 assembly output,\nwith aarch64 tending to producing faster assembly in more cases when using `.collect::<String>()`",
        "unnecessary_lazy_evaluations" => "### What it does\nAs the counterpart to `or_fun_call`, this lint looks for unnecessary\nlazily evaluated closures on `Option` and `Result`.\nThis lint suggests changing the following functions, when eager evaluation results in\nsimpler code:\n - `unwrap_or_else` to `unwrap_or`\n - `and_then` to `and`\n - `or_else` to `or`\n - `get_or_insert_with` to `get_or_insert`\n - `ok_or_else` to `ok_or`\n### Why is this bad?\nUsing eager evaluation is shorter and simpler in some cases.\n### Known problems\nIt is possible, but not recommended for `Deref` and `Index` to have\nside effects. Eagerly evaluating them can change the semantics of the program.\n### Example\n\n// example code where clippy issues a warning\nlet opt: Option<u32> = None;\nopt.unwrap_or_else(|| 42);\n\nUse instead:\n\nlet opt: Option<u32> = None;\nopt.unwrap_or(42);\n",
        "unnecessary_mut_passed" => "### What it does\nDetects passing a mutable reference to a function that only\nrequires an immutable reference.\n### Why is this bad?\nThe mutable reference rules out all other references to\nthe value. Also the code misleads about the intent of the call site.\n### Example\n\n// Bad\nmy_vec.push(&mut value)\n// Good\nmy_vec.push(&value)\n",
        "unnecessary_operation" => "### What it does\nChecks for expression statements that can be reduced to a\nsub-expression.\n### Why is this bad?\nExpressions by themselves often have no side-effects.\nHaving such expressions reduces readability.\n### Example\n\ncompute_array()[0];\n",
        "unnecessary_owned_empty_strings" => "### What it does\nDetects cases of owned empty strings being passed as an argument to a function expecting `&str`\n### Why is this bad?\nThis results in longer and less readable code\n### Example\n\nvec![\"1\", \"2\", \"3\"].join(&String::new());\n\nUse instead:\n\nvec![\"1\", \"2\", \"3\"].join(\"\");\n",
        "unnecessary_self_imports" => "### What it does\nChecks for imports ending in `::{self}`.\n### Why is this bad?\nIn most cases, this can be written much more cleanly by omitting `::{self}`.\n### Known problems\nRemoving `::{self}` will cause any non-module items at the same path to also be imported.\nThis might cause a naming conflict (https://github.com/rust-lang/rustfmt/issues/3568). This lint makes no attempt\nto detect this scenario and that is why it is a restriction lint.\n### Example\n\nuse std::io::{self};\n\nUse instead:\n\nuse std::io;\n",
        "unnecessary_sort_by" => "### What it does\nDetects uses of `Vec::sort_by` passing in a closure\nwhich compares the two arguments, either directly or indirectly.\n### Why is this bad?\nIt is more clear to use `Vec::sort_by_key` (or `Vec::sort` if\npossible) than to use `Vec::sort_by` and a more complicated\nclosure.\n### Known problems\nIf the suggested `Vec::sort_by_key` uses Reverse and it isn't already\nimported by a use statement, then it will need to be added manually.\n### Example\n\nvec.sort_by(|a, b| a.foo().cmp(&b.foo()));\n\nUse instead:\n\nvec.sort_by_key(|a| a.foo());\n",
        "unnecessary_symbol_str" => "### What it does\nChecks for unnecessary conversion from Symbol to a string.\n### Why is this bad?\nIt's faster use symbols directly instead of strings.\n### Example\nBad:\n\nsymbol.as_str() == \"clippy\";\n\nGood:\n\nsymbol == sym::clippy;\n",
        "unnecessary_to_owned" => "### What it does\nChecks for unnecessary calls to [`ToOwned::to_owned`](https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#tymethod.to_owned)\nand other `to_owned`-like functions.\n### Why is this bad?\nThe unnecessary calls result in useless allocations.\n### Known problems\n`unnecessary_to_owned` can falsely trigger if `IntoIterator::into_iter` is applied to an\nowned copy of a resource and the resource is later used mutably. See\n[#8148](https://github.com/rust-lang/rust-clippy/issues/8148).\n### Example\n\nlet path = std::path::Path::new(\"x\");\nfoo(&path.to_string_lossy().to_string());\nfn foo(s: &str) {}\n\nUse instead:\n\nlet path = std::path::Path::new(\"x\");\nfoo(&path.to_string_lossy());\nfn foo(s: &str) {}\n",
        "unnecessary_unwrap" => "### What it does\nChecks for calls of `unwrap[_err]()` that cannot fail.\n### Why is this bad?\nUsing `if let` or `match` is more idiomatic.\n### Example\n\nif option.is_some() {\n    do_something_with(option.unwrap())\n}\n\nCould be written:\n\nif let Some(value) = option {\n    do_something_with(value)\n}\n",
        "unnecessary_wraps" => "### What it does\nChecks for private functions that only return `Ok` or `Some`.\n### Why is this bad?\nIt is not meaningful to wrap values when no `None` or `Err` is returned.\n### Known problems\nThere can be false positives if the function signature is designed to\nfit some external requirement.\n### Example\n\nfn get_cool_number(a: bool, b: bool) -> Option<i32> {\n    if a && b {\n        return Some(50);\n    }\n    if a {\n        Some(0)\n    } else {\n        Some(10)\n    }\n}\n\nUse instead:\n\nfn get_cool_number(a: bool, b: bool) -> i32 {\n    if a && b {\n        return 50;\n    }\n    if a {\n        0\n    } else {\n        10\n    }\n}\n",
        "unneeded_field_pattern" => "### What it does\nChecks for structure field patterns bound to wildcards.\n### Why is this bad?\nUsing `..` instead is shorter and leaves the focus on\nthe fields that are actually bound.\n### Example\n\nlet f = Foo { a: 0, b: 0, c: 0 };\n// Bad\nmatch f {\n    Foo { a: _, b: 0, .. } => {},\n    Foo { a: _, b: _, c: _ } => {},\n}\n// Good\nmatch f {\n    Foo { b: 0, .. } => {},\n    Foo { .. } => {},\n}\n",
        "unneeded_wildcard_pattern" => "### What it does\nChecks for tuple patterns with a wildcard\npattern (`_`) is next to a rest pattern (`..`).\n_NOTE_: While `_, ..` means there is at least one element left, `..`\nmeans there are 0 or more elements left. This can make a difference\nwhen refactoring, but shouldn't result in errors in the refactored code,\nsince the wildcard pattern isn't used anyway.\n### Why is this bad?\nThe wildcard pattern is unneeded as the rest pattern\ncan match that element as well.\n### Example\n\n// Bad\nmatch t {\n    TupleStruct(0, .., _) => (),\n    _ => (),\n}\n// Good\nmatch t {\n    TupleStruct(0, ..) => (),\n    _ => (),\n}\n",
        "unnested_or_patterns" => "### What it does\nChecks for unnested or-patterns, e.g., `Some(0) | Some(2)` and\nsuggests replacing the pattern with a nested one, `Some(0 | 2)`.\nAnother way to think of this is that it rewrites patterns in\n*disjunctive normal form (DNF)* into *conjunctive normal form (CNF)*.\n### Why is this bad?\nIn the example above, `Some` is repeated, which unnecessarily complicates the pattern.\n### Example\n\nfn main() {\n    if let Some(0) | Some(2) = Some(0) {}\n}\n\nUse instead:\n\nfn main() {\n    if let Some(0 | 2) = Some(0) {}\n}\n",
        "unreachable" => "### What it does\nChecks for usage of `unreachable!`.\n### Why is this bad?\nThis macro can cause code to panic\n### Example\n\nunreachable!();\n",
        "unreadable_literal" => "### What it does\nWarns if a long integral or floating-point constant does\nnot contain underscores.\n### Why is this bad?\nReading long numbers is difficult without separators.\n### Example\n\n// Bad\nlet x: u64 = 61864918973511;\n// Good\nlet x: u64 = 61_864_918_973_511;\n",
        "unsafe_derive_deserialize" => "### What it does\nChecks for deriving `serde::Deserialize` on a type that\nhas methods using `unsafe`.\n### Why is this bad?\nDeriving `serde::Deserialize` will create a constructor\nthat may violate invariants hold by another constructor.\n### Example\n\nuse serde::Deserialize;\n#[derive(Deserialize)]\npub struct Foo {\n    // ..\n}\nimpl Foo {\n    pub fn new() -> Self {\n        // setup here ..\n    }\n    pub unsafe fn parts() -> (&str, &str) {\n        // assumes invariants hold\n    }\n}\n",
        "unsafe_removed_from_name" => "### What it does\nChecks for imports that remove \"unsafe\" from an item's\nname.\n### Why is this bad?\nRenaming makes it less clear which traits and\nstructures are unsafe.\n### Example\n\nuse std::cell::{UnsafeCell as TotallySafeCell};\nextern crate crossbeam;\nuse crossbeam::{spawn_unsafe as spawn};\n",
        "unseparated_literal_suffix" => "### What it does\nWarns if literal suffixes are not separated by an\nunderscore.\nTo enforce unseparated literal suffix style,\nsee the `separated_literal_suffix` lint.\n### Why is this bad?\nSuffix style should be consistent.\n### Example\n\n// Bad\nlet y = 123832i32;\n// Good\nlet y = 123832_i32;\n",
        "unsound_collection_transmute" => "### What it does\nChecks for transmutes between collections whose\ntypes have different ABI, size or alignment.\n### Why is this bad?\nThis is undefined behavior.\n### Known problems\nCurrently, we cannot know whether a type is a\ncollection, so we just lint the ones that come with `std`.\n### Example\n\n// different size, therefore likely out-of-bounds memory access\n// You absolutely do not want this in your code!\nunsafe {\n    std::mem::transmute::<_, Vec<u32>>(vec![2_u16])\n};\n\nYou must always iterate, map and collect the values:\n\nvec![2_u16].into_iter().map(u32::from).collect::<Vec<_>>();\n",
        "unused_async" => "### What it does\nChecks for functions that are declared `async` but have no `.await`s inside of them.\n### Why is this bad?\nAsync functions with no async code create overhead, both mentally and computationally.\nCallers of async methods either need to be calling from an async function themselves or run it on an executor, both of which\ncauses runtime overhead and hassle for the caller.\n### Example\n\n// Bad\nasync fn get_random_number() -> i64 {\n    4 // Chosen by fair dice roll. Guaranteed to be random.\n}\nlet number_future = get_random_number();\n// Good\nfn get_random_number_improved() -> i64 {\n    4 // Chosen by fair dice roll. Guaranteed to be random.\n}\nlet number_future = async { get_random_number_improved() };\n",
        "unused_io_amount" => "### What it does\nChecks for unused written/read amount.\n### Why is this bad?\n`io::Write::write(_vectored)` and\n`io::Read::read(_vectored)` are not guaranteed to\nprocess the entire buffer. They return how many bytes were processed, which\nmight be smaller\nthan a given buffer's length. If you don't need to deal with\npartial-write/read, use\n`write_all`/`read_exact` instead.\nWhen working with asynchronous code (either with the `futures`\ncrate or with `tokio`), a similar issue exists for\n`AsyncWriteExt::write()` and `AsyncReadExt::read()` : these\nfunctions are also not guaranteed to process the entire\nbuffer.  Your code should either handle partial-writes/reads, or\ncall the `write_all`/`read_exact` methods on those traits instead.\n### Known problems\nDetects only common patterns.\n### Examples\n\nuse std::io;\nfn foo<W: io::Write>(w: &mut W) -> io::Result<()> {\n    // must be `w.write_all(b\"foo\")?;`\n    w.write(b\"foo\")?;\n    Ok(())\n}\n",
        "unused_rounding" => "### What it does\nDetects cases where a whole-number literal float is being rounded, using\nthe `floor`, `ceil`, or `round` methods.\n### Why is this bad?\nThis is unnecessary and confusing to the reader. Doing this is probably a mistake.\n### Example\n\nlet x = 1f32.ceil();\n\nUse instead:\n\nlet x = 1f32;\n",
        "unused_self" => "### What it does\nChecks methods that contain a `self` argument but don't use it\n### Why is this bad?\nIt may be clearer to define the method as an associated function instead\nof an instance method if it doesn't require `self`.\n### Example\n\nstruct A;\nimpl A {\n    fn method(&self) {}\n}\n\nCould be written:\n\nstruct A;\nimpl A {\n    fn method() {}\n}\n",
        "unused_unit" => "### What it does\nChecks for unit (`()`) expressions that can be removed.\n### Why is this bad?\nSuch expressions add no value, but can make the code\nless readable. Depending on formatting they can make a `break` or `return`\nstatement look like a function call.\n### Example\n\nfn return_unit() -> () {\n    ()\n}\n\nis equivalent to\n\nfn return_unit() {}\n",
        "unusual_byte_groupings" => "### What it does\nWarns if hexadecimal or binary literals are not grouped\nby nibble or byte.\n### Why is this bad?\nNegatively impacts readability.\n### Example\n\nlet x: u32 = 0xFFF_FFF;\nlet y: u8 = 0b01_011_101;\n",
        "unwrap_in_result" => "### What it does\nChecks for functions of type `Result` that contain `expect()` or `unwrap()`\n### Why is this bad?\nThese functions promote recoverable errors to non-recoverable errors which may be undesirable in code bases which wish to avoid panics.\n### Known problems\nThis can cause false positives in functions that handle both recoverable and non recoverable errors.\n### Example\nBefore:\n\nfn divisible_by_3(i_str: String) -> Result<(), String> {\n    let i = i_str\n        .parse::<i32>()\n        .expect(\"cannot divide the input by three\");\n    if i % 3 != 0 {\n        Err(\"Number is not divisible by 3\")?\n    }\n    Ok(())\n}\n\nAfter:\n\nfn divisible_by_3(i_str: String) -> Result<(), String> {\n    let i = i_str\n        .parse::<i32>()\n        .map_err(|e| format!(\"cannot divide the input by three: {}\", e))?;\n    if i % 3 != 0 {\n        Err(\"Number is not divisible by 3\")?\n    }\n    Ok(())\n}\n",
        "unwrap_or_else_default" => "### What it does\nChecks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n`Result` values.\n### Why is this bad?\nReadability, these can be written as `_.unwrap_or_default`, which is\nsimpler and more concise.\n### Examples\n\n// Bad\nx.unwrap_or_else(Default::default);\nx.unwrap_or_else(u32::default);\n// Good\nx.unwrap_or_default();\n",
        "unwrap_used" => "### What it does\nChecks for `.unwrap()` calls on `Option`s and on `Result`s.\n### Why is this bad?\nIt is better to handle the `None` or `Err` case,\nor at least call `.expect(_)` with a more helpful message. Still, for a lot of\nquick-and-dirty code, `unwrap` is a good choice, which is why this lint is\n`Allow` by default.\n`result.unwrap()` will let the thread panic on `Err` values.\nNormally, you want to implement more sophisticated error handling,\nand propagate errors upwards with `?` operator.\nEven if you want to panic on errors, not all `Error`s implement good\nmessages on display. Therefore, it may be beneficial to look at the places\nwhere they may get displayed. Activate this lint to do just that.\n### Examples\n\noption.unwrap();\nresult.unwrap();\n\nUse instead:\n\noption.expect(\"more helpful message\");\nresult.expect(\"more helpful message\");\n",
        "upper_case_acronyms" => "### What it does\nChecks for fully capitalized names and optionally names containing a capitalized acronym.\n### Why is this bad?\nIn CamelCase, acronyms count as one word.\nSee [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\nfor more.\nBy default, the lint only triggers on fully-capitalized names.\nYou can use the `upper-case-acronyms-aggressive: true` config option to enable linting\non all camel case names\n### Known problems\nWhen two acronyms are contiguous, the lint can't tell where\nthe first acronym ends and the second starts, so it suggests to lowercase all of\nthe letters in the second acronym.\n### Example\n\nstruct HTTPResponse;\n\nUse instead:\n\nstruct HttpResponse;\n",
        "use_debug" => "### What it does\nChecks for use of `Debug` formatting. The purpose of this\nlint is to catch debugging remnants.\n### Why is this bad?\nThe purpose of the `Debug` trait is to facilitate\ndebugging Rust code. It should not be used in user-facing output.\n### Example\n\nprintln!(\"{:?}\", foo);\n",
        "use_self" => "### What it does\nChecks for unnecessary repetition of structure name when a\nreplacement with `Self` is applicable.\n### Why is this bad?\nUnnecessary repetition. Mixed use of `Self` and struct\nname\nfeels inconsistent.\n### Known problems\n- Unaddressed false negative in fn bodies of trait implementations\n- False positive with associated types in traits (#4140)\n### Example\n\nstruct Foo;\nimpl Foo {\n    fn new() -> Foo {\n        Foo {}\n    }\n}\n\ncould be\n\nstruct Foo;\nimpl Foo {\n    fn new() -> Self {\n        Self {}\n    }\n}\n",
        "used_underscore_binding" => "### What it does\nChecks for the use of bindings with a single leading\nunderscore.\n### Why is this bad?\nA single leading underscore is usually used to indicate\nthat a binding will not be used. Using such a binding breaks this\nexpectation.\n### Known problems\nThe lint does not work properly with desugaring and\nmacro, it has been allowed in the mean time.\n### Example\n\nlet _x = 0;\nlet y = _x + 1; // Here we are using `_x`, even though it has a leading\n                // underscore. We should rename `_x` to `x`\n",
        "useless_asref" => "### What it does\nChecks for usage of `.as_ref()` or `.as_mut()` where the\ntypes before and after the call are the same.\n### Why is this bad?\nThe call is unnecessary.\n### Example\n\nlet x: &[i32] = &[1, 2, 3, 4, 5];\ndo_stuff(x.as_ref());\n\nThe correct use would be:\n\nlet x: &[i32] = &[1, 2, 3, 4, 5];\ndo_stuff(x);\n",
        "useless_attribute" => "### What it does\nChecks for `extern crate` and `use` items annotated with\nlint attributes.\nThis lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n`#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n`#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n`extern crate` items with a `#[macro_use]` attribute.\n### Why is this bad?\nLint attributes have no effect on crate imports. Most\nlikely a `!` was forgotten.\n### Example\n\n#[deny(dead_code)]\nextern crate foo;\n#[forbid(dead_code)]\nuse foo::bar;\n\nUse instead:\n\n#[allow(unused_imports)]\nuse foo::baz;\n#[allow(unused_imports)]\n#[macro_use]\nextern crate baz;\n",
        "useless_conversion" => "### What it does\nChecks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls\nwhich uselessly convert to the same type.\n### Why is this bad?\nRedundant code.\n### Example\n\n// Bad\n// format!() returns a `String`\nlet s: String = format!(\"hello\").into();\n// Good\nlet s: String = format!(\"hello\");\n",
        "useless_format" => "### What it does\nChecks for the use of `format!(\"string literal with no\nargument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n### Why is this bad?\nThere is no point of doing that. `format!(\"foo\")` can\nbe replaced by `\"foo\".to_owned()` if you really need a `String`. The even\nworse `&format!(\"foo\")` is often encountered in the wild. `format!(\"{}\",\nfoo)` can be replaced by `foo.clone()` if `foo: String` or `foo.to_owned()`\nif `foo: &str`.\n### Examples\n\nlet foo = \"foo\";\nformat!(\"{}\", foo);\n\nUse instead:\n\nlet foo = \"foo\";\nfoo.to_owned();\n",
        "useless_let_if_seq" => "### What it does\nChecks for variable declarations immediately followed by a\nconditional affectation.\n### Why is this bad?\nThis is not idiomatic Rust.\n### Example\n\nlet foo;\nif bar() {\n    foo = 42;\n} else {\n    foo = 0;\n}\nlet mut baz = None;\nif bar() {\n    baz = Some(42);\n}\n\nshould be written\n\nlet foo = if bar() {\n    42\n} else {\n    0\n};\nlet baz = if bar() {\n    Some(42)\n} else {\n    None\n};\n",
        "useless_transmute" => "### What it does\nChecks for transmutes to the original type of the object\nand transmutes that could be a cast.\n### Why is this bad?\nReadability. The code tricks people into thinking that\nsomething complex is going on.\n### Example\n\ncore::intrinsics::transmute(t); // where the result type is the same as `t`'s\n",
        "useless_vec" => "### What it does\nChecks for usage of `&vec![..]` when using `&[..]` would\nbe possible.\n### Why is this bad?\nThis is less efficient.\n### Example\n\n// Bad\nfoo(&vec![1, 2]);\n// Good\nfoo(&[1, 2]);\n",
        "vec_box" => "### What it does\nChecks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\nCheck the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n### Why is this bad?\n`Vec` already keeps its contents in a separate area on\nthe heap. So if you `Box` its contents, you just add another level of indirection.\n### Known problems\nVec<Box<T: Sized>> makes sense if T is a large type (see [#3530](https://github.com/rust-lang/rust-clippy/issues/3530),\n1st comment).\n### Example\n\nstruct X {\n    values: Vec<Box<i32>>,\n}\n\nBetter:\n\nstruct X {\n    values: Vec<i32>,\n}\n",
        "vec_init_then_push" => "### What it does\nChecks for calls to `push` immediately after creating a new `Vec`.\nIf the `Vec` is created using `with_capacity` this will only lint if the capacity is a\nconstant and the number of pushes is greater than or equal to the initial capacity.\nIf the `Vec` is extended after the initial sequence of pushes and it was default initialized\nthen this will only lint after there were at least four pushes. This number may change in\nthe future.\n### Why is this bad?\nThe `vec![]` macro is both more performant and easier to read than\nmultiple `push` calls.\n### Example\n\nlet mut v = Vec::new();\nv.push(0);\n\nUse instead:\n\nlet v = vec![0];\n",
        "vec_resize_to_zero" => "### What it does\nFinds occurrences of `Vec::resize(0, an_int)`\n### Why is this bad?\nThis is probably an argument inversion mistake.\n### Example\n\nvec!(1, 2, 3, 4, 5).resize(0, 5)\n",
        "verbose_bit_mask" => "### What it does\nChecks for bit masks that can be replaced by a call\nto `trailing_zeros`\n### Why is this bad?\n`x.trailing_zeros() > 4` is much clearer than `x & 15\n== 0`\n### Known problems\nllvm generates better code for `x & 15 == 0` on x86\n### Example\n\nif x & 0b1111 == 0 { }\n",
        "verbose_file_reads" => "### What it does\nChecks for use of File::read_to_end and File::read_to_string.\n### Why is this bad?\n`fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\nSee also: [fs::read docs](https://doc.rust-lang.org/std/fs/fn.read.html), [fs::read_to_string docs](https://doc.rust-lang.org/std/fs/fn.read_to_string.html)\n### Example\n\nlet mut f = File::open(\"foo.txt\").unwrap();\nlet mut bytes = Vec::new();\nf.read_to_end(&mut bytes).unwrap();\n\nCan be written more concisely as\n\nlet mut bytes = fs::read(\"foo.txt\").unwrap();\n",
        "vtable_address_comparisons" => "### What it does\nChecks for comparisons with an address of a trait vtable.\n### Why is this bad?\nComparing trait objects pointers compares an vtable addresses which\nare not guaranteed to be unique and could vary between different code generation units.\nFurthermore vtables for different types could have the same address after being merged\ntogether.\n### Example\n\nlet a: Rc<dyn Trait> = ...\nlet b: Rc<dyn Trait> = ...\nif Rc::ptr_eq(&a, &b) {\n    ...\n}\n",
        "while_immutable_condition" => "### What it does\nChecks whether variables used within while loop condition\ncan be (and are) mutated in the body.\n### Why is this bad?\nIf the condition is unchanged, entering the body of the loop\nwill lead to an infinite loop.\n### Known problems\nIf the `while`-loop is in a closure, the check for mutation of the\ncondition variables in the body can cause false negatives. For example when only `Upvar` `a` is\nin the condition and only `Upvar` `b` gets mutated in the body, the lint will not trigger.\n### Example\n\nlet i = 0;\nwhile i > 10 {\n    println!(\"let me loop forever!\");\n}\n",
        "while_let_loop" => "### What it does\nDetects `loop + match` combinations that are easier\nwritten as a `while let` loop.\n### Why is this bad?\nThe `while let` loop is usually shorter and more\nreadable.\n### Known problems\nSometimes the wrong binding is displayed ([#383](https://github.com/rust-lang/rust-clippy/issues/383)).\n### Example\n\nloop {\n    let x = match y {\n        Some(x) => x,\n        None => break,\n    };\n    // .. do something with x\n}\n// is easier written as\nwhile let Some(x) = y {\n    // .. do something with x\n};\n",
        "while_let_on_iterator" => "### What it does\nChecks for `while let` expressions on iterators.\n### Why is this bad?\nReadability. A simple `for` loop is shorter and conveys\nthe intent better.\n### Example\n\nwhile let Some(val) = iter() {\n    ..\n}\n",
        "wildcard_dependencies" => "### What it does\nChecks for wildcard dependencies in the `Cargo.toml`.\n### Why is this bad?\n[As the edition guide says](https://rust-lang-nursery.github.io/edition-guide/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html),\nit is highly unlikely that you work with any possible version of your dependency,\nand wildcard dependencies would cause unnecessary breakage in the ecosystem.\n### Example\n\n[dependencies]\nregex = \"*\"\n",
        "wildcard_enum_match_arm" => "### What it does\nChecks for wildcard enum matches using `_`.\n### Why is this bad?\nNew enum variants added by library updates can be missed.\n### Known problems\nSuggested replacements may be incorrect if guards exhaustively cover some\nvariants, and also may not use correct path to enum if it's not present in the current scope.\n### Example\n\n// Bad\nmatch x {\n    Foo::A(_) => {},\n    _ => {},\n}\n// Good\nmatch x {\n    Foo::A(_) => {},\n    Foo::B(_) => {},\n}\n",
        "wildcard_imports" => "### What it does\nChecks for wildcard imports `use _::*`.\n### Why is this bad?\nwildcard imports can pollute the namespace. This is especially bad if\nyou try to import something through a wildcard, that already has been imported by name from\na different source:\n\nuse crate1::foo; // Imports a function named foo\nuse crate2::*; // Has a function named foo\nfoo(); // Calls crate1::foo\n\nThis can lead to confusing error messages at best and to unexpected behavior at worst.\n### Exceptions\nWildcard imports are allowed from modules named `prelude`. Many crates (including the standard library)\nprovide modules named \"prelude\" specifically designed for wildcard import.\n`use super::*` is allowed in test modules. This is defined as any module with \"test\" in the name.\nThese exceptions can be disabled using the `warn-on-all-wildcard-imports` configuration flag.\n### Known problems\nIf macros are imported through the wildcard, this macro is not included\nby the suggestion and has to be added by hand.\nApplying the suggestion when explicit imports of the things imported with a glob import\nexist, may result in `unused_imports` warnings.\n### Example\n\n// Bad\nuse crate1::*;\nfoo();\n\n\n// Good\nuse crate1::foo;\nfoo();\n",
        "wildcard_in_or_patterns" => "### What it does\nChecks for wildcard pattern used with others patterns in same match arm.\n### Why is this bad?\nWildcard pattern already covers any other pattern as it will match anyway.\nIt makes the code less readable, especially to spot wildcard pattern use in match arm.\n### Example\n\n// Bad\nmatch \"foo\" {\n    \"a\" => {},\n    \"bar\" | _ => {},\n}\n// Good\nmatch \"foo\" {\n    \"a\" => {},\n    _ => {},\n}\n",
        "write_literal" => "### What it does\nThis lint warns about the use of literals as `write!`/`writeln!` args.\n### Why is this bad?\nUsing literals as `writeln!` args is inefficient\n(c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n(i.e., just put the literal in the format string)\n### Known problems\nWill also warn with macro calls as arguments that expand to literals\n-- e.g., `writeln!(buf, \"{}\", env!(\"FOO\"))`.\n### Example\n\n// Bad\nwriteln!(buf, \"{}\", \"foo\");\n// Good\nwriteln!(buf, \"foo\");\n",
        "write_with_newline" => "### What it does\nThis lint warns when you use `write!()` with a format\nstring that\nends in a newline.\n### Why is this bad?\nYou should use `writeln!()` instead, which appends the\nnewline.\n### Example\n\n// Bad\nwrite!(buf, \"Hello {}!\\n\", name);\n// Good\nwriteln!(buf, \"Hello {}!\", name);\n",
        "writeln_empty_string" => "### What it does\nThis lint warns when you use `writeln!(buf, \"\")` to\nprint a newline.\n### Why is this bad?\nYou should use `writeln!(buf)`, which is simpler.\n### Example\n\n// Bad\nwriteln!(buf, \"\");\n// Good\nwriteln!(buf);\n",
        "wrong_self_convention" => "### What it does\nChecks for methods with certain name prefixes and which\ndoesn't match how self is taken. The actual rules are:\n|Prefix |Postfix     |`self` taken                   | `self` type  |\n|-------|------------|-------------------------------|--------------|\n|`as_`  | none       |`&self` or `&mut self`         | any          |\n|`from_`| none       | none                          | any          |\n|`into_`| none       |`self`                         | any          |\n|`is_`  | none       |`&mut self` or `&self` or none | any          |\n|`to_`  | `_mut`     |`&mut self`                    | any          |\n|`to_`  | not `_mut` |`self`                         | `Copy`       |\n|`to_`  | not `_mut` |`&self`                        | not `Copy`   |\nNote: Clippy doesn't trigger methods with `to_` prefix in:\n- Traits definition.\nClippy can not tell if a type that implements a trait is `Copy` or not.\n- Traits implementation, when `&self` is taken.\nThe method signature is controlled by the trait and often `&self` is required for all types that implement the trait\n(see e.g. the `std::string::ToString` trait).\nClippy allows `Pin<&Self>` and `Pin<&mut Self>` if `&self` and `&mut self` is required.\nPlease find more info here:\nhttps://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n### Why is this bad?\nConsistency breeds readability. If you follow the\nconventions, your users won't be surprised that they, e.g., need to supply a\nmutable reference to a `as_..` function.\n### Example\n\nimpl X {\n    fn as_str(self) -> &'static str {\n        // ..\n    }\n}\n",
        "wrong_transmute" => "### What it does\nChecks for transmutes that can't ever be correct on any\narchitecture.\n### Why is this bad?\nIt's basically guaranteed to be undefined behavior.\n### Known problems\nWhen accessing C, users might want to store pointer\nsized objects in `extradata` arguments to save an allocation.\n### Example\n\nlet ptr: *const T = core::intrinsics::transmute('x')\n",
        "zero_divided_by_zero" => "### What it does\nChecks for `0.0 / 0.0`.\n### Why is this bad?\nIt's less readable than `f32::NAN` or `f64::NAN`.\n### Example\n\n// Bad\nlet nan = 0.0f32 / 0.0;\n// Good\nlet nan = f32::NAN;\n",
        "zero_prefixed_literal" => "### What it does\nWarns if an integral constant literal starts with `0`.\n### Why is this bad?\nIn some languages (including the infamous C language\nand most of its\nfamily), this marks an octal constant. In Rust however, this is a decimal\nconstant. This could\nbe confusing for both the writer and a reader of the constant.\n### Example\nIn Rust:\n\nfn main() {\n    let a = 0123;\n    println!(\"{}\", a);\n}\n\nprints `123`, while in C:\n\n#include <stdio.h>\nint main() {\n    int a = 0123;\n    printf(\"%d\\n\", a);\n}\n\nprints `83` (as `83 == 0o123` while `123 == 0o173`).",
        "zero_ptr" => "### What it does\nCatch casts from `0` to some pointer type\n### Why is this bad?\nThis generally means `null` and is better expressed as\n{`std`, `core`}`::ptr::`{`null`, `null_mut`}.\n### Example\n\n// Bad\nlet a = 0 as *const u32;\n// Good\nlet a = std::ptr::null::<u32>();\n",
        "zero_sized_map_values" => "### What it does\nChecks for maps with zero-sized value types anywhere in the code.\n### Why is this bad?\nSince there is only a single value for a zero-sized type, a map\ncontaining zero sized values is effectively a set. Using a set in that case improves\nreadability and communicates intent more clearly.\n### Known problems\n* A zero-sized type cannot be recovered later if it contains private fields.\n* This lints the signature of public items\n### Example\n\nfn unique_words(text: &str) -> HashMap<&str, ()> {\n    todo!();\n}\n\nUse instead:\n\nfn unique_words(text: &str) -> HashSet<&str> {\n    todo!();\n}\n",
        "zst_offset" => "### What it does\nChecks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to\nzero-sized types\n### Why is this bad?\nThis is a no-op, and likely unintended\n### Example\n\nunsafe { (&() as *const ()).offset(1) };\n",
        _ => "unknown lint",
    });
}
